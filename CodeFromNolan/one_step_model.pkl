ccopy_reg
_reconstructor
p1
(cmachine_learning_acds.regressors.nn.mlp_network
MLPNetwork
p2
c__builtin__
object
p3
NtRp4
(dp5
S'layers'
p6
(lp7
g1
(clasagne.layers.input
InputLayer
p8
g3
NtRp9
(dp10
S'shape'
p11
(NI3
tp12
sS'params'
p13
ccollections
OrderedDict
p14
((ltRp15
sS'name'
p16
NsS'input_var'
p17
g1
(ctheano.tensor.var
TensorVariable
p18
g3
NtRp19
(dp20
S'auto_name'
p21
S'auto_1307'
p22
sS'index'
p23
NsS'tag'
p24
g1
(ctheano.gof.utils
scratchpad
p25
g3
NtRp26
(dp27
S'trace'
p28
(lp29
(lp30
(S'/home/nolan/anaconda2/lib/python2.7/site-packages/IPython/core/shellapp.py'
p31
I273
S'init_code'
p32
S'self._run_cmd_line_code()'
tp33
a(g31
I394
S'_run_cmd_line_code'
p34
S'self._exec_file(fname, shell_futures=True)'
tp35
a(g31
I328
S'_exec_file'
p36
S'raise_exceptions=True)'
tp37
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/IPython/core/interactiveshell.py'
p38
I2481
S'safe_execfile'
p39
S"self.compile if kw['shell_futures'] else None)"
tp40
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/IPython/utils/py3compat.py'
p41
I292
S'execfile'
p42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp43
a(S'/home/nolan/Downloads/InvertedPendulumData/main.py'
p44
I23
S'<module>'
p45
S'layers = [layer_functions.inputlayer(STATE_DIM+CONTROL_DIM),'
tp46
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/layers/layer_functions.py'
p47
I11
S'inputlayer'
p48
S'return lasagne_layers.InputLayer(shape=(None, input_dim), **kwargs)'
tp49
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/input.py'
p50
I64
S'__init__'
p51
S'input_var = input_var_type(var_name)'
tp52
aasbsg16
S'input'
p53
sS'owner'
p54
NsS'type'
p55
g1
(ctheano.tensor.type
TensorType
p56
g3
NtRp57
(dp58
S'broadcastable'
p59
(I00
I00
tp60
sS'dtype'
p61
S'float32'
p62
sS'numpy_dtype'
p63
cnumpy
dtype
p64
(S'f4'
I0
I1
tRp65
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p66
I00
sg16
Nsbsbsbag1
(clasagne.layers.dense
DenseLayer
p67
g3
NtRp68
(dp69
S'b'
g1
(ctheano.gpuarray.type
GpuArraySharedVariable
p70
g3
NtRp71
(dp72
g21
S'auto_1309'
p73
sg23
Nsg24
g1
(g25
g3
NtRp74
(dp75
g28
(lp76
(lp77
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp78
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp79
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp80
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/mlp_network.py'
p81
I35
g51
S'x = layer(self.layers)'
tp82
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/layers/layer_functions.py'
p83
I35
S'<lambda>'
p84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp85
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/dense.py'
p86
I108
g51
S'regularizable=False)'
tp87
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/base.py'
p88
I234
S'add_param'
p89
S'param = utils.create_param(spec, shape, name)'
tp90
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/utils.py'
p91
I381
S'create_param'
p92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp93
aasbsS'container'
p94
g1
(ctheano.gof.link
Container
p95
g3
NtRp96
(dp97
g16
NsS'storage'
p98
(lp99
ctheano.gpuarray.type
GpuArray_unpickler
p100
(cnumpy.core.multiarray
_reconstruct
p101
(cnumpy
ndarray
p102
(I0
tS'b'
tRp103
(I1
(I8
tg65
I00
S'\x96\x9d\x80?3\x13W?w\xe0\xb4=m\xcf\x7f\xbe\xca\x06Z<\x8c\xacd<\xc6\xc0\x06\xbf\xeeL\xb0>'
tbNtRp104
asS'strict'
p105
I00
sS'readonly'
p106
I00
sg55
g1
(ctheano.gpuarray.type
GpuArrayType
p107
g3
NtRp108
(dp109
g59
(I00
tp110
sS'ndim'
p111
I1
sg16
NsS'typecode'
p112
I11
sg61
S'float32'
p113
sS'context_name'
p114
NsbsS'allow_downcast'
p115
Nsbsg16
S'b'
sg54
Nsg55
g108
sbsg16
NsS'nonlinearity'
p116
clasagne.nonlinearities
tanh
p117
sS'num_units'
p118
I8
sS'input_shape'
p119
g12
sg13
g14
((lp120
(lp121
g1
(g70
g3
NtRp122
(dp123
g21
S'auto_1308'
p124
sg23
Nsg24
g1
(g25
g3
NtRp125
(dp126
g28
(lp127
(lp128
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp129
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp130
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp131
a(g81
I35
g51
S'x = layer(self.layers)'
tp132
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp133
a(g86
I103
g51
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp134
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp135
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp136
aasbsg94
g1
(g95
g3
NtRp137
(dp138
g16
Nsg98
(lp139
g100
(g101
(g102
(I0
tS'b'
tRp140
(I1
(I3
I8
tg65
I00
S'5O\x81?#\tu\xbf\xbeaz\xbey\x94[>\xdc+\x17>\x02\xceC\xbe)yG?\x07S\x85?4\xd6R\xbb\xf6\x8d\x08\xbdn\xeb\x88\xbd\xf5=\xf9\xbc\xeaC\x99\xbdX(\x08\xbezJ*\xbd\x87\xef\x0e=\xea\xc0]\xbc\xde\xcea\xbc\x9c\xba\xcf\xbd\x13%7<I5\xc9\xbb\xda\x08r\xbc\x04\xaf\x04\xbdF\xaa\x84<'
tbNtRp141
asg105
I00
sg106
I00
sg55
g1
(g107
g3
NtRp142
(dp143
g59
(I00
I00
tp144
sg111
I2
sg16
Nsg112
I11
sg61
S'float32'
p145
sg114
Nsbsg115
Nsbsg16
S'W'
sg54
Nsg55
g142
sbac__builtin__
set
p146
((lp147
S'trainable'
p148
aS'regularizable'
p149
atRp150
aa(lp151
g71
ag146
((lp152
g148
atRp153
aatRp154
sS'input_layer'
p155
g9
sS'W'
g122
sS'num_leading_axes'
p156
I1
sS'get_output_kwargs'
p157
(lp158
sbag1
(g67
g3
NtRp159
(dp160
S'b'
g1
(g70
g3
NtRp161
(dp162
g21
S'auto_1311'
p163
sg23
Nsg24
g1
(g25
g3
NtRp164
(dp165
g28
(lp166
(lp167
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp168
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp169
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp170
a(g81
I35
g51
S'x = layer(self.layers)'
tp171
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp172
a(g86
I108
g51
S'regularizable=False)'
tp173
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp174
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp175
aasbsg94
g1
(g95
g3
NtRp176
(dp177
g16
Nsg98
(lp178
g100
(g101
(g102
(I0
tS'b'
tRp179
(I1
(I8
tg65
I00
S'\x86\xdd\xd7\xbe\xa1\\,\xbekv\x08>1\xd5\x9c>\xc3\x9b\x1e?6\x18\xbd>\xdb\xac\xd4\xbe\xbe\xe0\x18>'
tbNtRp180
asg105
I00
sg106
I00
sg55
g1
(g107
g3
NtRp181
(dp182
g59
(I00
tp183
sg111
I1
sg16
Nsg112
I11
sg61
S'float32'
p184
sg114
Nsbsg115
Nsbsg16
S'b'
sg54
Nsg55
g181
sbsg16
Nsg116
g117
sg118
I8
sg119
(NI8
tp185
sg13
g14
((lp186
(lp187
g1
(g70
g3
NtRp188
(dp189
g21
S'auto_1310'
p190
sg23
Nsg24
g1
(g25
g3
NtRp191
(dp192
g28
(lp193
(lp194
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp195
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp196
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp197
a(g81
I35
g51
S'x = layer(self.layers)'
tp198
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp199
a(g86
I103
g51
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp200
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp201
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp202
aasbsg94
g1
(g95
g3
NtRp203
(dp204
g16
Nsg98
(lp205
g100
(g101
(g102
(I0
tS'b'
tRp206
(I1
(I8
I8
tg65
I00
S"\xba\x02'?\x93[\xb3>\x9b\xdd.\xbf\xcd\x05g\xbf\x1f\xb20>\xf0\x8d\x80\xbe\x86\x05b\xbf\x8f\xc3\xba=\xd3\xf90\xbf\x18\xc4\x05\xbf\xf4\xad\xe8>\x900\x91>q\xc7#<\xe0I\x86?\x02Ec?\xe9\x99\xad>\xe6q|?.\xee-\xbf\xf7\x9fm\xbfD{(\xbf$c\xf2>\xc9y[\xbf)+\xbd>\x0f\x06\xcb?\xe7\xc7\xb0\xbf*\xa8\xac<\xc7c\xc6?\xdf\x02\xe4?ND:\xbe\xfb\xd7\xd0?\rk\x07\xbf\x8d\xca\x80?c7|\xbfe\xfe\xd7>f \x0b@mv^?-\xc7\t\xbeTo\xe5?\x95\x04\xcd\xbe\x83\xf6\xe3?CB\xcb?\xe4\xaf\x14\xbf\xee\x0c\xfe\xbe\x9b\xcf\xa8\xbfYL\x89\xbf\xbb\x8e\xfd\xbe\x05\\\x1d\xbf\xed0m?\xcc\xfaM?e\xfbu?I\xf1\x90\xbf@i\xbb\xbe\xe2\xde\x11\xbe\xf8\xecx\xbf\xaf\xc5|\xbf\x9d\xdb\xa8>\xd54\x1b>\x07\x04\x80?\x14\x04\xea\xbe8\xa51\xbf|P|?\xdb=G\xbc\xcf=!\xbf:\xfe\t\xbf"
tbNtRp207
asg105
I00
sg106
I00
sg55
g1
(g107
g3
NtRp208
(dp209
g59
(I00
I00
tp210
sg111
I2
sg16
Nsg112
I11
sg61
S'float32'
p211
sg114
Nsbsg115
Nsbsg16
S'W'
sg54
Nsg55
g208
sbag146
((lp212
g148
ag149
atRp213
aa(lp214
g161
ag146
((lp215
g148
atRp216
aatRp217
sg155
g68
sS'W'
g188
sg156
I1
sg157
(lp218
sbag1
(g67
g3
NtRp219
(dp220
S'b'
g1
(g70
g3
NtRp221
(dp222
g21
S'auto_1313'
p223
sg23
Nsg24
g1
(g25
g3
NtRp224
(dp225
g28
(lp226
(lp227
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp228
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp229
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp230
a(g81
I35
g51
S'x = layer(self.layers)'
tp231
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp232
a(g86
I108
g51
S'regularizable=False)'
tp233
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp234
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp235
aasbsg94
g1
(g95
g3
NtRp236
(dp237
g16
Nsg98
(lp238
g100
(g101
(g102
(I0
tS'b'
tRp239
(I1
(I1
tg65
I00
S'\xa3\xef\xde>'
tbNtRp240
asg105
I00
sg106
I00
sg55
g1
(g107
g3
NtRp241
(dp242
g59
(I01
tp243
sg111
I1
sg16
Nsg112
I11
sg61
S'float32'
p244
sg114
Nsbsg115
Nsbsg16
S'b'
sg54
Nsg55
g241
sbsg16
Nsg116
clasagne.nonlinearities
linear
p245
sg118
I1
sg119
(NI8
tp246
sg13
g14
((lp247
(lp248
g1
(g70
g3
NtRp249
(dp250
g21
S'auto_1312'
p251
sg23
Nsg24
g1
(g25
g3
NtRp252
(dp253
g28
(lp254
(lp255
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp256
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp257
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp258
a(g81
I35
g51
S'x = layer(self.layers)'
tp259
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp260
a(g86
I103
g51
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp261
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp262
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp263
aasbsg94
g1
(g95
g3
NtRp264
(dp265
g16
Nsg98
(lp266
g100
(g101
(g102
(I0
tS'b'
tRp267
(I1
(I8
I1
tg65
I00
S'\xf8UX\xc0\x87\n\x97\xbf\x9dee@F~\x8b@\xb7[\xaf\xbf\xfe\xc6i@p\xc1z?\x8fi\xbb?'
tbNtRp268
asg105
I00
sg106
I00
sg55
g1
(g107
g3
NtRp269
(dp270
g59
(I00
I01
tp271
sg111
I2
sg16
Nsg112
I11
sg61
S'float32'
p272
sg114
Nsbsg115
Nsbsg16
S'W'
sg54
Nsg55
g269
sbag146
((lp273
g148
ag149
atRp274
aa(lp275
g221
ag146
((lp276
g148
atRp277
aatRp278
sg155
g159
sS'W'
g249
sg156
I1
sg157
(lp279
sbasS'pred_role'
p280
S''
sS'network'
p281
g219
sS'allow_input_downcast'
p282
I01
sS'_predict'
p283
ctheano.compile.function_module
_constructor_Function
p284
(ctheano.compile.function_module
_constructor_FunctionMaker
p285
((dp286
S'profile'
p287
NsS'function_builder'
p288
ctheano.compile.function_module
Function
p289
sS'inputs'
p290
(lp291
g1
(ctheano.compile.io
In
p292
g3
NtRp293
(dp294
g16
g53
sS'update'
p295
NsS'value'
p296
NsS'borrow'
p297
Nsg105
I00
sS'implicit'
p298
I00
sS'mutable'
p299
I00
sS'variable'
p300
g19
sS'shared'
p301
I00
sg115
I01
sbag1
(g292
g3
NtRp302
(dp303
g16
S'W'
sg295
Nsg296
g137
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g122
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp304
(dp305
g16
S'b'
sg295
Nsg296
g96
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g71
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp306
(dp307
g16
S'W'
sg295
Nsg296
g203
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g188
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp308
(dp309
g16
S'b'
sg295
Nsg296
g176
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g161
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp310
(dp311
g16
S'W'
sg295
Nsg296
g264
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g249
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp312
(dp313
g16
S'b'
sg295
Nsg296
g236
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g221
sg301
I01
sg115
NsbasS'fgraph'
p314
g1
(ctheano.gof.fg
FunctionGraph
p315
g3
NtRp316
(dp317
g287
Nsg290
(lp318
g1
(g18
g3
NtRp319
(dp320
g23
Nsg16
g53
sg314
g316
sS'clients'
p321
(lp322
(g1
(ctheano.gof.graph
Apply
p323
g3
NtRp324
(dp325
g290
(lp326
g319
asg314
g316
sS'outputs'
p327
(lp328
g1
(ctheano.gpuarray.type
GpuArrayVariable
p329
g3
NtRp330
(dp331
g23
I0
sg16
Nsg314
g316
sg321
(lp332
(g1
(g323
g3
NtRp333
(dp334
g290
(lp335
g330
ag1
(g70
g3
NtRp336
(dp337
g23
Nsg94
g137
sg16
S'W'
sg314
g316
sg321
(lp338
(g333
I1
tp339
asg21
S'auto_1362'
p340
sg24
g1
(g25
g3
NtRp341
(dp342
g28
g127
sbsg54
Nsg55
g142
sbasg314
g316
sg327
(lp343
g1
(g329
g3
NtRp344
(dp345
g23
I0
sg16
Nsg314
g316
sg321
(lp346
(g1
(g323
g3
NtRp347
(dp348
g290
(lp349
g344
ag1
(g329
g3
NtRp350
(dp351
g23
I0
sg16
Nsg314
g316
sg321
(lp352
(g347
I1
tp353
asg21
S'auto_1439'
p354
sg24
g1
(g25
g3
NtRp355
(dp356
g28
(lp357
sbsg54
g1
(g323
g3
NtRp358
(dp359
g290
(lp360
g1
(g70
g3
NtRp361
(dp362
g23
Nsg94
g96
sg16
S'b'
sg314
g316
sg321
(lp363
(g358
I0
tp364
asg21
S'auto_1363'
p365
sg24
g1
(g25
g3
NtRp366
(dp367
g28
g76
sbsg54
Nsg55
g108
sbasg314
g316
sg327
(lp368
g350
asg24
g1
(g25
g3
NtRp369
(dp370
S'imported_by'
p371
(lp372
S'GraphToGPU'
p373
aS'init'
p374
asbsS'deps'
p375
(dp376
sS'op'
p377
g1
(ctheano.gpuarray.elemwise
GpuDimShuffle
p378
g3
NtRp379
(dp380
S'input_broadcastable'
p381
(I00
tp382
sS'shuffle'
p383
(lp384
I0
asS'augment'
p385
(lp386
I0
asS'drop'
p387
(lp388
sS'inplace'
p389
I01
sS'new_order'
p390
(S'x'
I0
tp391
sS'view_map'
p392
(dp393
I0
(lp394
I0
assbsbsg55
g1
(g107
g3
NtRp395
(dp396
g59
(I01
I00
tp397
sg111
I2
sg16
Nsg112
I11
sg61
g113
sg114
Nsbsbasg314
g316
sg327
(lp398
g1
(g329
g3
NtRp399
(dp400
g23
I0
sg16
Nsg314
g316
sg321
(lp401
(g1
(g323
g3
NtRp402
(dp403
g290
(lp404
g399
ag1
(g70
g3
NtRp405
(dp406
g23
Nsg94
g203
sg16
S'W'
sg314
g316
sg321
(lp407
(g402
I1
tp408
asg21
S'auto_1364'
p409
sg24
g1
(g25
g3
NtRp410
(dp411
g28
g193
sbsg54
Nsg55
g208
sbasg314
g316
sg327
(lp412
g1
(g329
g3
NtRp413
(dp414
g23
I0
sg16
Nsg314
g316
sg321
(lp415
(g1
(g323
g3
NtRp416
(dp417
g290
(lp418
g413
ag1
(g329
g3
NtRp419
(dp420
g23
I0
sg16
Nsg314
g316
sg321
(lp421
(g416
I1
tp422
asg21
S'auto_1436'
p423
sg24
g1
(g25
g3
NtRp424
(dp425
g28
(lp426
sbsg54
g1
(g323
g3
NtRp427
(dp428
g290
(lp429
g1
(g70
g3
NtRp430
(dp431
g23
Nsg94
g176
sg16
S'b'
sg314
g316
sg321
(lp432
(g427
I0
tp433
asg21
S'auto_1365'
p434
sg24
g1
(g25
g3
NtRp435
(dp436
g28
g166
sbsg54
Nsg55
g181
sbasg314
g316
sg327
(lp437
g419
asg24
g1
(g25
g3
NtRp438
(dp439
g371
(lp440
g373
ag374
asbsg375
(dp441
sg377
g1
(g378
g3
NtRp442
(dp443
g381
(I00
tp444
sg383
(lp445
I0
asg385
(lp446
I0
asg387
(lp447
sg389
I01
sg390
(S'x'
I0
tp448
sg392
(dp449
I0
(lp450
I0
assbsbsg55
g1
(g107
g3
NtRp451
(dp452
g59
(I01
I00
tp453
sg111
I2
sg16
Nsg112
I11
sg61
g184
sg114
Nsbsbasg314
g316
sg327
(lp454
g1
(g329
g3
NtRp455
(dp456
g23
I0
sg16
Nsg314
g316
sg321
(lp457
(g1
(g323
g3
NtRp458
(dp459
g290
(lp460
g1
(g329
g3
NtRp461
(dp462
g23
I0
sg16
Nsg314
g316
sg321
(lp463
(g458
I0
tp464
asg21
S'auto_1498'
p465
sg24
g1
(g25
g3
NtRp466
(dp467
S'nan_guard_mode_check'
p468
I00
sS'values_eq_approx'
p469
ctheano.tensor.type
values_eq_approx_always_true
p470
sg28
(lp471
sbsg54
g1
(g323
g3
NtRp472
(dp473
g290
(lp474
g1
(g18
g3
NtRp475
(dp476
g23
I0
sg16
Nsg314
g316
sg321
(lp477
(g472
I0
tp478
asg21
S'auto_1427'
p479
sg24
g1
(g25
g3
NtRp480
(dp481
g114
Nsg28
(lp482
sbsg54
g1
(g323
g3
NtRp483
(dp484
g290
(lp485
g319
asg314
g316
sg327
(lp486
g475
asg24
g1
(g25
g3
NtRp487
(dp488
g371
(lp489
S'local_shape_to_shape_i'
p490
ag373
ag374
asbsg375
(dp491
sg377
g1
(ctheano.compile.ops
Shape_i
p492
g3
NtRp493
(dp494
S'i'
I0
sbsbsg55
g1
(g56
g3
NtRp495
(dp496
g59
(tsg61
S'int64'
p497
sg63
g64
(S'i8'
I0
I1
tRp498
(I3
S'<'
NNNI-1
I-1
I0
tbsg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp499
g461
asg24
g1
(g25
g3
NtRp500
(dp501
g371
(lp502
S'local_gpua_alloc_empty'
p503
ag374
asbsg375
(dp504
sg377
g1
(ctheano.gpuarray.basic_ops
GpuAllocEmpty
p505
g3
NtRp506
(dp507
g61
S'float32'
p508
sg114
Nsbsbsg55
g1
(g107
g3
NtRp509
(dp510
g59
(I00
tp511
sg111
I1
sg16
Nsg112
I11
sg61
g508
sS'filter_checks_isfinite'
p512
I00
sg114
Nsbsbag1
(ctheano.tensor.var
TensorConstant
p513
g3
NtRp514
(dp515
g23
Nsg16
Nsg314
g316
sg55
g1
(g56
g3
NtRp516
(dp517
g59
(tsg61
S'float64'
p518
sg63
g64
(S'f8'
I0
I1
tRp519
(I3
S'<'
NNNI-1
I-1
I0
tbsg66
I00
sg16
Nsbsg321
(lp520
(g458
I1
tp521
asg21
S'auto_1502'
p522
sg24
g1
(g25
g3
NtRp523
(dp524
g28
(lp525
sS'unique_value'
p526
NsbsS'data'
p527
g101
(g102
(I0
tS'b'
tRp528
(I1
(tg519
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsbag455
ag1
(g329
g3
NtRp529
(dp530
g23
I0
sg16
Nsg314
g316
sg321
(lp531
(g458
I3
tp532
asg21
S'auto_1433'
p533
sg24
g1
(g25
g3
NtRp534
(dp535
g28
(lp536
sbsg54
g1
(g323
g3
NtRp537
(dp538
g290
(lp539
g1
(g70
g3
NtRp540
(dp541
g23
Nsg94
g264
sg16
S'W'
sg314
g316
sg321
(lp542
(g537
I0
tp543
asg21
S'auto_1366'
p544
sg24
g1
(g25
g3
NtRp545
(dp546
g28
g254
sbsg54
Nsg55
g269
sbasg314
g316
sg327
(lp547
g529
asg24
g1
(g25
g3
NtRp548
(dp549
g371
(lp550
g373
ag374
asbsg375
(dp551
sg377
g1
(g378
g3
NtRp552
(dp553
g381
(I00
I01
tp554
sg383
(lp555
I0
asg385
(lp556
sg387
(lp557
I1
asg389
I01
sg390
(I0
tp558
sg392
(dp559
I0
(lp560
I0
assbsbsg55
g1
(g107
g3
NtRp561
(dp562
g59
(I00
tp563
sg111
I1
sg16
Nsg112
I11
sg61
g272
sg114
Nsbsbag1
(g513
g3
NtRp564
(dp565
g23
Nsg16
Nsg314
g316
sg55
g1
(g56
g3
NtRp566
(dp567
g59
(tsg61
g518
sg63
g519
sg66
I00
sg16
Nsbsg321
(lp568
(g458
I4
tp569
asg21
S'auto_1505'
p570
sg24
g1
(g25
g3
NtRp571
(dp572
g28
(lp573
sg526
Nsbsg527
g101
(g102
(I0
tS'b'
tRp574
(I1
(tg519
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsbasg314
g316
sg327
(lp575
g1
(g329
g3
NtRp576
(dp577
g23
I0
sg16
Nsg314
g316
sg321
(lp578
(g1
(g323
g3
NtRp579
(dp580
g290
(lp581
g576
asg314
g316
sg327
(lp582
g1
(g329
g3
NtRp583
(dp584
g23
I0
sg16
Nsg314
g316
sg321
(lp585
(g1
(g323
g3
NtRp586
(dp587
g290
(lp588
g583
ag1
(g329
g3
NtRp589
(dp590
g23
I0
sg16
Nsg314
g316
sg321
(lp591
(g586
I1
tp592
asg21
S'auto_1430'
p593
sg24
g1
(g25
g3
NtRp594
(dp595
g28
(lp596
sbsg54
g1
(g323
g3
NtRp597
(dp598
g290
(lp599
g1
(g70
g3
NtRp600
(dp601
g23
Nsg94
g236
sg16
S'b'
sg314
g316
sg321
(lp602
(g597
I0
tp603
asg21
S'auto_1367'
p604
sg24
g1
(g25
g3
NtRp605
(dp606
g28
g226
sbsg54
Nsg55
g241
sbasg314
g316
sg327
(lp607
g589
asg24
g1
(g25
g3
NtRp608
(dp609
g371
(lp610
g373
ag374
asbsg375
(dp611
sg377
g1
(g378
g3
NtRp612
(dp613
g381
(I01
tp614
sg383
(lp615
I0
asg385
(lp616
I0
asg387
(lp617
sg389
I01
sg390
(S'x'
I0
tp618
sg392
(dp619
I0
(lp620
I0
assbsbsg55
g1
(g107
g3
NtRp621
(dp622
g59
(I01
I01
tp623
sg111
I2
sg16
Nsg112
I11
sg61
g244
sg114
Nsbsbasg314
g316
sg327
(lp624
g1
(g329
g3
NtRp625
(dp626
g23
I0
sg16
Nsg314
g316
sg321
(lp627
(g1
(g323
g3
NtRp628
(dp629
g290
(lp630
g625
asg314
g316
sg327
(lp631
g1
(g18
g3
NtRp632
(dp633
g23
I0
sg16
Nsg314
g316
sg321
(lp634
(S'output'
p635
I0
tp636
asg21
S'auto_1479'
p637
sg24
g1
(g25
g3
NtRp638
(dp639
g28
(lp640
sbsg54
g628
sg55
g1
(g56
g3
NtRp641
(dp642
g59
(I00
I01
tp643
sg61
S'float32'
p644
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp645
(dp646
g371
(lp647
g373
ag374
asbsg375
(dp648
sg377
g1
(ctheano.gpuarray.basic_ops
HostFromGpu
p649
g3
NtRp650
sbI0
tp651
asg21
S'auto_1592'
p652
sg24
g1
(g25
g3
NtRp653
(dp654
g28
(lp655
sbsg54
g586
sg55
g1
(g107
g3
NtRp656
(dp657
g59
(I00
I01
tp658
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp659
(dp660
S'fake_node'
p661
g1
(g323
g3
NtRp662
(dp663
g290
(lp664
g1
(ctheano.scalar.basic
ScalarVariable
p665
g3
NtRp666
(dp667
g21
S'auto_1646'
p668
sg23
Nsg24
g1
(g25
g3
NtRp669
sg16
Nsg54
Nsg55
g1
(ctheano.scalar.basic
Scalar
p670
g3
NtRp671
(dp672
g61
g644
sbsbag1
(g665
g3
NtRp673
(dp674
g21
S'auto_1647'
p675
sg23
Nsg24
g1
(g25
g3
NtRp676
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp677
sg327
(lp678
g1
(g665
g3
NtRp679
(dp680
g21
S'auto_1648'
p681
sg23
I0
sg24
g1
(g25
g3
NtRp682
sg16
Nsg54
g662
sg55
g671
sbasg377
g1
(ctheano.scalar.basic
Add
p683
g3
NtRp684
(dp685
S'output_types_preference'
p686
g1
(ctheano.scalar.basic
transfer_type
p687
g3
NtRp688
(dp689
S'transfer'
p690
(I0
tp691
sbsg16
Nsbsbsg371
(lp692
S'inplace_elemwise_optimizer'
p693
ag374
asbsg375
(dp694
sg377
g1
(ctheano.gpuarray.elemwise
GpuElemwise
p695
g3
NtRp696
(dp697
g16
NsS'scalar_op'
p698
g684
sS'destroy_map'
p699
(dp700
I0
(lp701
I0
assS'nfunc_spec'
p702
(S'add'
p703
I2
I1
tp704
sS'inplace_pattern'
p705
g1
(ctheano.misc.frozendict
frozendict
p706
g3
NtRp707
(dp708
S'_hash'
p709
I3713080549408328131
sS'_dict'
p710
(dp711
I0
I0
ssbsS'openmp'
p712
I00
sbsbI0
tp713
asg21
S'auto_1486'
p714
sg24
g1
(g25
g3
NtRp715
(dp716
g28
(lp717
sbsg54
g579
sg55
g1
(g107
g3
NtRp718
(dp719
g59
(I00
I01
tp720
sg111
I2
sg16
Nsg112
I11
sg61
g508
sg114
Nsbsbasg24
g1
(g25
g3
NtRp721
(dp722
g371
(lp723
S'local_gpua_dimshuffle'
p724
ag374
asbsg375
(dp725
sg377
g1
(g378
g3
NtRp726
(dp727
g381
(I00
tp728
sg383
(lp729
I0
asg385
(lp730
I1
asg387
(lp731
sg389
I01
sg390
(I0
S'x'
tp732
sg392
(dp733
I0
(lp734
I0
assbsbI0
tp735
asg21
S'auto_1557'
p736
sg24
g1
(g25
g3
NtRp737
(dp738
g28
(lp739
sbsg54
g458
sg55
g509
sbasg24
g1
(g25
g3
NtRp740
(dp741
g371
(lp742
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p743
ag374
asbsg375
(dp744
sg377
g1
(ctheano.gpuarray.blas
GpuGemv
p745
g3
NtRp746
(dp747
g389
I01
sg699
(dp748
I0
(lp749
I0
assbsbI2
tp750
asg21
S'auto_1585'
p751
sg24
g1
(g25
g3
NtRp752
(dp753
g28
(lp754
sbsg54
g416
sg55
g1
(g107
g3
NtRp755
(dp756
g59
(I00
I00
tp757
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp758
(dp759
g661
g1
(g323
g3
NtRp760
(dp761
g290
(lp762
g1
(g665
g3
NtRp763
(dp764
g21
S'auto_1628'
p765
sg23
Nsg24
g1
(g25
g3
NtRp766
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp767
(dp768
g21
S'auto_1629'
p769
sg23
Nsg24
g1
(g25
g3
NtRp770
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp771
sg327
(lp772
g1
(g665
g3
NtRp773
(dp774
g21
S'auto_1630'
p775
sg23
I0
sg24
g1
(g25
g3
NtRp776
sg16
Nsg54
g760
sg55
g671
sbasg377
g1
(ctheano.scalar.basic
Composite
p777
g3
NtRp778
(dp779
g290
(lp780
g1
(g665
g3
NtRp781
(dp782
g21
S'auto_1574'
p783
sg23
Nsg24
g1
(g25
g3
NtRp784
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp785
(dp786
g21
S'auto_1575'
p787
sg23
Nsg24
g1
(g25
g3
NtRp788
sg16
Nsg54
Nsg55
g671
sbasS'nin'
p789
I2
sg16
NsS'inputs_type'
p790
(g671
g671
tp791
sg327
(lp792
g1
(g665
g3
NtRp793
(dp794
g21
S'auto_1577'
p795
sg23
I0
sg24
g1
(g25
g3
NtRp796
(dp797
g28
(lp798
sbsg16
Nsg54
g1
(g323
g3
NtRp799
(dp800
g290
(lp801
g1
(g665
g3
NtRp802
(dp803
g21
S'auto_1576'
p804
sg23
I0
sg24
g1
(g25
g3
NtRp805
(dp806
g28
(lp807
sbsg16
Nsg54
g1
(g323
g3
NtRp808
(dp809
g290
(lp810
g781
ag785
asg24
g1
(g25
g3
NtRp811
sg327
(lp812
g802
asg377
g1
(g683
g3
NtRp813
(dp814
g686
ctheano.scalar.basic
upcast_out
p815
sg16
g703
sbsbsg55
g671
sbasg24
g1
(g25
g3
NtRp816
sg327
(lp817
g793
asg377
g1
(ctheano.scalar.basic
Tanh
p818
g3
NtRp819
(dp820
g686
ctheano.scalar.basic
upgrade_to_float
p821
sg16
S'tanh'
p822
sbsbsg55
g671
sbasS'_c_code'
p823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p824
sS'outputs_type'
p825
(g671
tp826
sg686
g1
(g687
g3
NtRp827
(dp828
g690
(I0
tp829
sbsS'nodenames'
p830
(lp831
S'%(nodename)s_subnode0'
p832
aS'%(nodename)s_subnode1'
p833
asS'nout'
p834
I1
sbsbsg371
(lp835
g693
ag374
asbsg375
(dp836
sg377
g1
(g695
g3
NtRp837
(dp838
g16
Nsg698
g778
sg699
(dp839
I0
(lp840
I0
assg702
Nsg705
g1
(g706
g3
NtRp841
(dp842
g709
I3713080549408328131
sg710
(dp843
I0
I0
ssbsg712
I00
sbsbI0
tp844
asg21
S'auto_1454'
p845
sg24
g1
(g25
g3
NtRp846
(dp847
g28
(lp848
sbsg54
g402
sg55
g1
(g107
g3
NtRp849
(dp850
g59
(I00
I00
tp851
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp852
(dp853
g371
(lp854
g373
ag374
asbsg375
(dp855
sg377
g1
(ctheano.gpuarray.blas
GpuDot22
p856
g3
NtRp857
sbI0
tp858
asg21
S'auto_1570'
p859
sg24
g1
(g25
g3
NtRp860
(dp861
g28
(lp862
sbsg54
g347
sg55
g1
(g107
g3
NtRp863
(dp864
g59
(I00
I00
tp865
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp866
(dp867
g661
g1
(g323
g3
NtRp868
(dp869
g290
(lp870
g1
(g665
g3
NtRp871
(dp872
g21
S'auto_1615'
p873
sg23
Nsg24
g1
(g25
g3
NtRp874
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp875
(dp876
g21
S'auto_1616'
p877
sg23
Nsg24
g1
(g25
g3
NtRp878
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp879
sg327
(lp880
g1
(g665
g3
NtRp881
(dp882
g21
S'auto_1617'
p883
sg23
I0
sg24
g1
(g25
g3
NtRp884
sg16
Nsg54
g868
sg55
g671
sbasg377
g1
(g777
g3
NtRp885
(dp886
g290
(lp887
g1
(g665
g3
NtRp888
(dp889
g21
S'auto_1559'
p890
sg23
Nsg24
g1
(g25
g3
NtRp891
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp892
(dp893
g21
S'auto_1560'
p894
sg23
Nsg24
g1
(g25
g3
NtRp895
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp896
sg327
(lp897
g1
(g665
g3
NtRp898
(dp899
g21
S'auto_1562'
p900
sg23
I0
sg24
g1
(g25
g3
NtRp901
(dp902
g28
(lp903
sbsg16
Nsg54
g1
(g323
g3
NtRp904
(dp905
g290
(lp906
g1
(g665
g3
NtRp907
(dp908
g21
S'auto_1561'
p909
sg23
I0
sg24
g1
(g25
g3
NtRp910
(dp911
g28
(lp912
sbsg16
Nsg54
g1
(g323
g3
NtRp913
(dp914
g290
(lp915
g888
ag892
asg24
g1
(g25
g3
NtRp916
sg327
(lp917
g907
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp918
sg327
(lp919
g898
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p920
sg825
(g671
tp921
sg686
g1
(g687
g3
NtRp922
(dp923
g690
(I0
tp924
sbsg830
(lp925
S'%(nodename)s_subnode0'
p926
aS'%(nodename)s_subnode1'
p927
asg834
I1
sbsbsg371
(lp928
g693
ag374
asbsg375
(dp929
sg377
g1
(g695
g3
NtRp930
(dp931
g16
Nsg698
g885
sg699
(dp932
I0
(lp933
I0
assg702
Nsg705
g1
(g706
g3
NtRp934
(dp935
g709
I3713080549408328131
sg710
(dp936
I0
I0
ssbsg712
I00
sbsbI0
tp937
asg21
S'auto_1440'
p938
sg24
g1
(g25
g3
NtRp939
(dp940
g28
(lp941
sbsg54
g333
sg55
g1
(g107
g3
NtRp942
(dp943
g59
(I00
I00
tp944
sg111
I2
sg16
Nsg112
I11
sg61
g62
sg114
Nsbsbasg24
g1
(g25
g3
NtRp945
(dp946
g371
(lp947
g373
ag374
asbsg375
(dp948
sg377
g857
sbI0
tp949
asg21
S'auto_1425'
p950
sg24
g1
(g25
g3
NtRp951
(dp952
g28
(lp953
sbsg54
g324
sg55
g1
(g107
g3
NtRp954
(dp955
g59
(I00
I00
tp956
sg111
I2
sg16
Nsg112
I11
sg61
g62
sg114
Nsbsbasg24
g1
(g25
g3
NtRp957
(dp958
g371
(lp959
g373
ag374
asbsg375
(dp960
sg377
g1
(ctheano.gpuarray.basic_ops
GpuFromHost
p961
g3
NtRp962
(dp963
g114
NsbsbI0
tp964
a(g483
I0
tp965
asg21
S'auto_1361'
p966
sg24
g1
(g25
g3
NtRp967
(dp968
g28
g29
sbsg54
Nsg55
g57
sbag336
ag361
ag405
ag430
ag540
ag600
asg327
(lp969
g632
asS'update_mapping'
p970
(dp971
sS'merge_feature'
p972
g1
(ctheano.gof.opt
MergeFeature
p973
g3
NtRp974
(dp975
S'scheduled'
p976
(lp977
sS'nodes_seen'
p978
g146
((lp979
g472
ag458
ag586
ag402
ag347
ag628
ag483
ag537
ag333
ag416
ag579
ag358
ag427
ag597
ag324
atRp980
sS'const_sig_inv'
p981
(itheano.gof.opt
_metadict
p982
(dp983
S'd'
(dp984
g1
(ctheano.tensor.var
TensorConstantSignature
p985
c__builtin__
tuple
p986
(g516
g528
ttRp987
(dp988
S'has_nan'
p989
I00
sS'_sum'
p990
cnumpy.core.multiarray
scalar
p991
(g519
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp992
sS'_no_nan'
p993
g528
sbg514
sg1
(g985
g986
(g566
g574
ttRp994
(dp995
g989
I00
sg990
g991
(g519
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp996
sg993
g574
sbg564
ssS'l'
(lp997
sbsS'noinput_nodes'
p998
g1
(ctheano.misc.ordered_set
OrderedSet
p999
g3
NtRp1000
(dp1001
S'_OrderedSet__root'
p1002
g1
(ctheano.misc.ordered_set
Link
p1003
g3
NtRp1004
(lp1005
g1004
ag1004
absS'_OrderedSet__map'
p1006
(dp1007
sbsS'blacklist'
p1008
(lp1009
sS'seen_constants'
p1010
g146
((lp1011
I140440217804304
aI140440217862416
atRp1012
sS'const_sig'
p1013
(itheano.gof.opt
_metadict
p1014
(dp1015
S'd'
(dp1016
g514
g987
sg564
g994
ssS'l'
(lp1017
sbsbsS'destroy_handler'
p1018
g1
(ctheano.gof.destroyhandler
DestroyHandler
p1019
g3
NtRp1020
(dp1021
S'impact'
p1022
(dp1023
g413
g1
(g999
g3
NtRp1024
(dp1025
g1002
g1
(g1003
g3
NtRp1026
(lp1027
g1
(g1003
g3
NtRp1028
(lp1029
g1026
ag1026
ag413
abag1028
absg1006
(dp1030
g413
g1028
ssbsg576
g1
(g999
g3
NtRp1031
(dp1032
g1002
g1
(g1003
g3
NtRp1033
(lp1034
g1
(g1003
g3
NtRp1035
(lp1036
g1
(g1003
g3
NtRp1037
(lp1038
g1033
ag1035
ag583
abag1033
ag576
abag1037
absg1006
(dp1039
g583
g1037
sg576
g1035
ssbsg461
g1
(g999
g3
NtRp1040
(dp1041
g1002
g1
(g1003
g3
NtRp1042
(lp1043
g1
(g1003
g3
NtRp1044
(lp1045
g1042
ag1042
ag461
abag1044
absg1006
(dp1046
g461
g1044
ssbsg344
g1
(g999
g3
NtRp1047
(dp1048
g1002
g1
(g1003
g3
NtRp1049
(lp1050
g1
(g1003
g3
NtRp1051
(lp1052
g1049
ag1049
ag344
abag1051
absg1006
(dp1053
g344
g1051
ssbssS'droot'
p1054
(dp1055
g413
g413
sg576
g576
sg461
g461
sg583
g576
sg344
g344
ssS'view_o'
p1056
g14
((lp1057
(lp1058
g600
ag1
(g999
g3
NtRp1059
(dp1060
g1002
g1
(g1003
g3
NtRp1061
(lp1062
g1
(g1003
g3
NtRp1063
(lp1064
g1061
ag1061
ag589
abag1063
absg1006
(dp1065
g589
g1063
ssbaa(lp1066
g540
ag1
(g999
g3
NtRp1067
(dp1068
g1002
g1
(g1003
g3
NtRp1069
(lp1070
g1
(g1003
g3
NtRp1071
(lp1072
g1069
ag1069
ag529
abag1071
absg1006
(dp1073
g529
g1071
ssbaa(lp1074
g430
ag1
(g999
g3
NtRp1075
(dp1076
g1002
g1
(g1003
g3
NtRp1077
(lp1078
g1
(g1003
g3
NtRp1079
(lp1080
g1077
ag1077
ag419
abag1079
absg1006
(dp1081
g419
g1079
ssbaa(lp1082
g361
ag1
(g999
g3
NtRp1083
(dp1084
g1002
g1
(g1003
g3
NtRp1085
(lp1086
g1
(g1003
g3
NtRp1087
(lp1088
g1085
ag1085
ag350
abag1087
absg1006
(dp1089
g350
g1087
ssbaa(lp1090
g576
ag1
(g999
g3
NtRp1091
(dp1092
g1002
g1
(g1003
g3
NtRp1093
(lp1094
g1
(g1003
g3
NtRp1095
(lp1096
g1093
ag1093
ag583
abag1095
absg1006
(dp1097
g583
g1095
ssbaatRp1098
sS'view_i'
p1099
g14
((lp1100
(lp1101
g589
ag600
aa(lp1102
g529
ag540
aa(lp1103
g419
ag430
aa(lp1104
g350
ag361
aa(lp1105
g583
ag576
aatRp1106
sg314
g316
sS'do_imports_on_attach'
p1107
I01
sg321
g14
((lp1108
(lp1109
g600
ag14
((lp1110
(lp1111
g597
aI1
aatRp1112
aa(lp1113
g589
ag14
((lp1114
(lp1115
g586
aI1
aatRp1116
aa(lp1117
g540
ag14
((lp1118
(lp1119
g537
aI1
aatRp1120
aa(lp1121
g529
ag14
((lp1122
(lp1123
g458
aI1
aatRp1124
aa(lp1125
g430
ag14
((lp1126
(lp1127
g427
aI1
aatRp1128
aa(lp1129
g419
ag14
((lp1130
(lp1131
g416
aI1
aatRp1132
aa(lp1133
g361
ag14
((lp1134
(lp1135
g358
aI1
aatRp1136
aa(lp1137
g350
ag14
((lp1138
(lp1139
g347
aI1
aatRp1140
aa(lp1141
g319
ag14
((lp1142
(lp1143
g324
aI1
aa(lp1144
g483
aI1
aatRp1145
aa(lp1146
g330
ag14
((lp1147
(lp1148
g333
aI1
aatRp1149
aa(lp1150
g475
ag14
((lp1151
(lp1152
g472
aI1
aatRp1153
aa(lp1154
g336
ag14
((lp1155
(lp1156
g333
aI1
aatRp1157
aa(lp1158
g344
ag14
((lp1159
(lp1160
g347
aI1
aatRp1161
aa(lp1162
g461
ag14
((lp1163
(lp1164
g458
aI1
aatRp1165
aa(lp1166
g1
(g329
g3
NtRp1167
(dp1168
g23
I0
sg16
Nsg314
g316
sg321
(lp1169
sg21
S'auto_1544'
p1170
sg24
g1
(g25
g3
NtRp1171
(dp1172
g28
(lp1173
sbsg54
g1
(g323
g3
NtRp1174
(dp1175
g290
(lp1176
g344
ag350
asg314
g316
sg327
(lp1177
g1167
asg24
g1
(g25
g3
NtRp1178
(dp1179
S'removed_by'
p1180
(lp1181
g693
asg371
(lp1182
S'FusionOptimizer'
p1183
asbsg375
(dp1184
sg377
g1
(g695
g3
NtRp1185
(dp1186
g16
Nsg698
g1
(g777
g3
NtRp1187
(dp1188
g290
(lp1189
g1
(g665
g3
NtRp1190
(dp1191
g21
S'auto_1533'
p1192
sg23
Nsg24
g1
(g25
g3
NtRp1193
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp1194
(dp1195
g21
S'auto_1534'
p1196
sg23
Nsg24
g1
(g25
g3
NtRp1197
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp1198
sg327
(lp1199
g1
(g665
g3
NtRp1200
(dp1201
g21
S'auto_1536'
p1202
sg23
I0
sg24
g1
(g25
g3
NtRp1203
(dp1204
g28
g903
sbsg16
Nsg54
g1
(g323
g3
NtRp1205
(dp1206
g290
(lp1207
g1
(g665
g3
NtRp1208
(dp1209
g21
S'auto_1535'
p1210
sg23
I0
sg24
g1
(g25
g3
NtRp1211
(dp1212
g28
g912
sbsg16
Nsg54
g1
(g323
g3
NtRp1213
(dp1214
g290
(lp1215
g1190
ag1194
asg24
g1
(g25
g3
NtRp1216
sg327
(lp1217
g1208
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp1218
sg327
(lp1219
g1200
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p1220
sg825
(g671
tp1221
sg830
(lp1222
S'%(nodename)s_subnode0'
p1223
aS'%(nodename)s_subnode1'
p1224
asg834
I1
sbsg699
(dp1225
sg702
Nsg705
g1
(g706
g3
NtRp1226
(dp1227
g709
I0
sg710
(dp1228
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp1229
(dp1230
g59
(I00
I00
tp1231
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbag14
((ltRp1232
aa(lp1233
g405
ag14
((lp1234
(lp1235
g402
aI1
aatRp1236
aa(lp1237
g413
ag14
((lp1238
(lp1239
g416
aI1
aatRp1240
aa(lp1241
g1
(g329
g3
NtRp1242
(dp1243
g23
I0
sg16
Nsg314
g316
sg321
(lp1244
sg21
S'auto_1523'
p1245
sg24
g1
(g25
g3
NtRp1246
(dp1247
g28
(lp1248
sbsg54
g1
(g323
g3
NtRp1249
(dp1250
g290
(lp1251
g413
ag419
asg314
g316
sg327
(lp1252
g1242
asg24
g1
(g25
g3
NtRp1253
(dp1254
g1180
(lp1255
g693
asg371
(lp1256
g1183
asbsg375
(dp1257
sg377
g1
(g695
g3
NtRp1258
(dp1259
g16
Nsg698
g1
(g777
g3
NtRp1260
(dp1261
g290
(lp1262
g1
(g665
g3
NtRp1263
(dp1264
g21
S'auto_1512'
p1265
sg23
Nsg24
g1
(g25
g3
NtRp1266
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp1267
(dp1268
g21
S'auto_1513'
p1269
sg23
Nsg24
g1
(g25
g3
NtRp1270
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp1271
sg327
(lp1272
g1
(g665
g3
NtRp1273
(dp1274
g21
S'auto_1515'
p1275
sg23
I0
sg24
g1
(g25
g3
NtRp1276
(dp1277
g28
g798
sbsg16
Nsg54
g1
(g323
g3
NtRp1278
(dp1279
g290
(lp1280
g1
(g665
g3
NtRp1281
(dp1282
g21
S'auto_1514'
p1283
sg23
I0
sg24
g1
(g25
g3
NtRp1284
(dp1285
g28
g807
sbsg16
Nsg54
g1
(g323
g3
NtRp1286
(dp1287
g290
(lp1288
g1263
ag1267
asg24
g1
(g25
g3
NtRp1289
sg327
(lp1290
g1281
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp1291
sg327
(lp1292
g1273
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p1293
sg825
(g671
tp1294
sg830
(lp1295
S'%(nodename)s_subnode0'
p1296
aS'%(nodename)s_subnode1'
p1297
asg834
I1
sbsg699
(dp1298
sg702
Nsg705
g1
(g706
g3
NtRp1299
(dp1300
g709
I0
sg710
(dp1301
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp1302
(dp1303
g59
(I00
I00
tp1304
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbag14
((ltRp1305
aa(lp1306
g514
ag14
((lp1307
(lp1308
g458
aI1
aatRp1309
aa(lp1310
g564
ag14
((lp1311
(lp1312
g458
aI1
aatRp1313
aa(lp1314
g1
(g329
g3
NtRp1315
(dp1316
g23
I0
sg16
Nsg314
g316
sg321
(lp1317
sg21
S'auto_1495'
p1318
sg24
g1
(g25
g3
NtRp1319
(dp1320
g28
(lp1321
sbsg54
g1
(g323
g3
NtRp1322
(dp1323
g290
(lp1324
g461
ag514
ag1242
ag529
ag564
asg314
g316
sg327
(lp1325
g1315
asg24
g1
(g25
g3
NtRp1326
(dp1327
g1180
(lp1328
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p1329
asg371
(lp1330
S'local_gpua_gemv'
p1331
asbsg375
(dp1332
sg377
g1
(g745
g3
NtRp1333
(dp1334
g389
I00
sbsbsg55
g1
(g107
g3
NtRp1335
(dp1336
g59
(I00
tp1337
sg111
I1
sg16
Nsg112
I11
sg61
g508
sg114
Nsbsbag14
((ltRp1338
aa(lp1339
g583
ag14
((lp1340
(lp1341
g586
aI1
aatRp1342
aa(lp1343
g1
(g329
g3
NtRp1344
(dp1345
g23
I0
sg16
Nsg314
g316
sg321
(lp1346
sg21
S'auto_1475'
p1347
sg24
g1
(g25
g3
NtRp1348
(dp1349
g28
(lp1350
sbsg54
g1
(g323
g3
NtRp1351
(dp1352
g290
(lp1353
g583
ag589
asg314
g316
sg327
(lp1354
g1344
asg24
g1
(g25
g3
NtRp1355
(dp1356
g1180
(lp1357
g693
asg371
(lp1358
g373
asbsg375
(dp1359
sg377
g1
(g695
g3
NtRp1360
(dp1361
g16
S'GpuElemwise{add,no_inplace}'
p1362
sg698
g813
sg699
(dp1363
sg702
g704
sg705
g1
(g706
g3
NtRp1364
(dp1365
g709
I0
sg710
(dp1366
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp1367
(dp1368
g59
(I00
I01
tp1369
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbag14
((ltRp1370
aa(lp1371
g632
ag14
((ltRp1372
aa(lp1373
g1
(g18
g3
NtRp1374
(dp1375
g23
I0
sg16
Nsg314
g316
sg321
(lp1376
sg21
S'auto_1556'
p1377
sg24
g1
(g25
g3
NtRp1378
(dp1379
g28
(lp1380
sbsg54
g1
(g323
g3
NtRp1381
(dp1382
g290
(lp1383
g632
asg314
g316
sg327
(lp1384
g1374
asg24
g1
(g25
g3
NtRp1385
(dp1386
g1180
(lp1387
S"('Revert', 'output_guard')"
p1388
asg371
(lp1389
S'output_guard'
p1390
asbsg375
(dp1391
sg377
g1
(ctheano.compile.ops
OutputGuard
p1392
g3
NtRp1393
sbsg55
g641
sbag14
((ltRp1394
aa(lp1395
g576
ag14
((lp1396
(lp1397
g579
aI1
aatRp1398
aa(lp1399
g399
ag14
((lp1400
(lp1401
g402
aI1
aatRp1402
aa(lp1403
g455
ag14
((lp1404
(lp1405
g458
aI1
aatRp1406
aa(lp1407
g625
ag14
((lp1408
(lp1409
g628
aI1
aatRp1410
aatRp1411
sS'root_destroyer'
p1412
(dp1413
g413
g416
sg576
g586
sg461
g458
sg344
g347
ssS'debug_all_apps'
p1414
g1
(g999
g3
NtRp1415
(dp1416
g1002
g1
(g1003
g3
NtRp1417
(lp1418
g1
(g1003
g3
NtRp1419
(lp1420
g1
(g1003
g3
NtRp1421
(lp1422
g1
(g1003
g3
NtRp1423
(lp1424
g1
(g1003
g3
NtRp1425
(lp1426
g1
(g1003
g3
NtRp1427
(lp1428
g1
(g1003
g3
NtRp1429
(lp1430
g1
(g1003
g3
NtRp1431
(lp1432
g1
(g1003
g3
NtRp1433
(lp1434
g1
(g1003
g3
NtRp1435
(lp1436
g1
(g1003
g3
NtRp1437
(lp1438
g1
(g1003
g3
NtRp1439
(lp1440
g1
(g1003
g3
NtRp1441
(lp1442
g1
(g1003
g3
NtRp1443
(lp1444
g1
(g1003
g3
NtRp1445
(lp1446
g1
(g1003
g3
NtRp1447
(lp1448
g1417
ag1445
ag597
abag1443
ag537
abag1441
ag427
abag1439
ag358
abag1437
ag324
abag1435
ag483
abag1433
ag333
abag1431
ag472
abag1429
ag402
abag1427
ag579
abag1425
ag628
abag1423
ag458
abag1421
ag347
abag1419
ag416
abag1417
ag586
abag1447
absg1006
(dp1449
g358
g1441
sg427
g1443
sg416
g1421
sg472
g1433
sg458
g1425
sg537
g1445
sg324
g1439
sg579
g1429
sg597
g1447
sg586
g1419
sg333
g1435
sg628
g1427
sg347
g1423
sg483
g1437
sg402
g1431
ssbsS'destroyers'
p1450
g1
(g999
g3
NtRp1451
(dp1452
g1002
g1
(g1003
g3
NtRp1453
(lp1454
g1
(g1003
g3
NtRp1455
(lp1456
g1
(g1003
g3
NtRp1457
(lp1458
g1
(g1003
g3
NtRp1459
(lp1460
g1
(g1003
g3
NtRp1461
(lp1462
g1453
ag1459
ag458
abag1457
ag347
abag1455
ag416
abag1453
ag586
abag1461
absg1006
(dp1463
g347
g1459
sg586
g1455
sg458
g1461
sg416
g1457
ssbsS'stale_droot'
p1464
I00
sbsg16
S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/neural_network.py:520'
p1465
sS'execute_callbacks_time'
p1466
F0.0047039985656738281
sS'shape_feature'
p1467
g1
(ctheano.tensor.opt
ShapeFeature
p1468
g3
NtRp1469
(dp1470
g976
(dp1471
sS'shape_of'
p1472
(dp1473
g1
(g329
g3
NtRp1474
(dp1475
g23
I0
sg16
Nsg314
g316
sg321
(lp1476
sg21
S'auto_1485'
p1477
sg24
g1
(g25
g3
NtRp1478
(dp1479
g28
(lp1480
sbsg54
g1
(g323
g3
NtRp1481
(dp1482
g290
(lp1483
g1
(g18
g3
NtRp1484
(dp1485
g23
I0
sg16
Nsg314
g316
sg321
(lp1486
sg21
S'auto_1496'
p1487
sg24
g1
(g25
g3
NtRp1488
(dp1489
g28
(lp1490
sbsg54
g1
(g323
g3
NtRp1491
(dp1492
g290
(lp1493
g1315
asg314
g316
sg327
(lp1494
g1484
asg24
g1
(g25
g3
NtRp1495
(dp1496
g1180
(lp1497
S'local_cut_gpu_transfers'
p1498
asg371
(lp1499
g1331
asbsg375
(dp1500
sg377
g650
sbsg55
g1
(g56
g3
NtRp1501
(dp1502
g59
(I00
tp1503
sg61
g508
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1504
g1474
asg24
g1
(g25
g3
NtRp1505
(dp1506
g1180
(lp1507
g1498
asg371
(lp1508
g724
asbsg375
(dp1509
sg377
g1
(g961
g3
NtRp1510
(dp1511
g114
Nsbsbsg55
g1
(g107
g3
NtRp1512
(dp1513
g59
(I00
tp1514
sg111
I1
sg16
Nsg112
I11
sg61
g508
sg114
Nsbsb(g475
tp1515
sg1
(g18
g3
NtRp1516
(dp1517
g23
I0
sg16
Nsg314
g316
sg321
(lp1518
sg21
S'auto_1406'
p1519
sg24
g1
(g25
g3
NtRp1520
(dp1521
g28
(lp1522
sbsg54
g1
(g323
g3
NtRp1523
(dp1524
g290
(lp1525
g1
(g18
g3
NtRp1526
(dp1527
g23
I0
sg16
Nsg314
g316
sg321
(lp1528
sg21
S'auto_1369'
p1529
sg24
g1
(g25
g3
NtRp1530
(dp1531
g28
(lp1532
(lp1533
(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/mlp_network.py'
p1534
I64
S'get_output'
p1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1536
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/helper.py'
p1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1538
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/dense.py'
p1539
I121
S'get_output_for'
p1540
S'activation = T.dot(input, self.W)'
tp1541
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/tensor/basic.py'
p1542
I5960
S'dot'
p1543
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp1544
a(g1542
I155
S'as_tensor_variable'
p1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1546
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/gpuarray/type.py'
p1547
I518
S'_as_TensorVariable'
p1548
S'return host_from_gpu(self)'
tp1549
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/gof/op.py'
p1550
I615
S'__call__'
p1551
S'node = self.make_node(*inputs, **kwargs)'
tp1552
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/gpuarray/basic_ops.py'
p1553
I564
S'make_node'
p1554
S'broadcastable=x.broadcastable)()])'
tp1555
aasbsg54
g1
(g323
g3
NtRp1556
(dp1557
g290
(lp1558
g540
asg314
g316
sg327
(lp1559
g1526
asg24
g1
(g25
g3
NtRp1560
(dp1561
g1180
(lp1562
g373
asg371
(lp1563
g374
asbsg375
(dp1564
sg377
g650
sbsg55
g1
(g56
g3
NtRp1565
(dp1566
g59
(I00
I01
tp1567
sg61
g272
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1568
g1516
asg24
g1
(g25
g3
NtRp1569
(dp1570
g1180
(lp1571
g373
asg371
(lp1572
S'local_dot22_to_ger_or_gemv'
p1573
asbsg375
(dp1574
sg377
g1
(ctheano.tensor.elemwise
DimShuffle
p1575
g3
NtRp1576
(dp1577
g381
g554
sg383
(lp1578
I0
asg385
(lp1579
sg387
(lp1580
I1
asg389
I01
sg390
g558
sg392
(dp1581
I0
(lp1582
I0
assbsbsg55
g1
(g56
g3
NtRp1583
(dp1584
g59
(I00
tp1585
sg61
g272
sg63
g65
sg66
I00
sg16
Nsbsb(g1
(g18
g3
NtRp1586
(dp1587
g21
S'auto_1386'
p1588
sg23
I0
sg24
g1
(g25
g3
NtRp1589
(dp1590
g28
(lp1591
sbsg16
Nsg54
g1
(g323
g3
NtRp1592
(dp1593
g290
(lp1594
g540
asg24
g1
(g25
g3
NtRp1595
sg327
(lp1596
g1586
asg377
g1
(g492
g3
NtRp1597
(dp1598
S'i'
I0
sbsbsg55
g495
sbtp1599
sg1315
(g475
tp1600
sg430
(g1
(g18
g3
NtRp1601
(dp1602
g21
S'auto_1387'
p1603
sg23
I0
sg24
g1
(g25
g3
NtRp1604
(dp1605
g28
(lp1606
sbsg16
Nsg54
g1
(g323
g3
NtRp1607
(dp1608
g290
(lp1609
g430
asg24
g1
(g25
g3
NtRp1610
sg327
(lp1611
g1601
asg377
g1
(g492
g3
NtRp1612
(dp1613
S'i'
I0
sbsbsg55
g495
sbtp1614
sg1
(g513
g3
NtRp1615
(dp1616
g21
S'auto_1404'
p1617
sg23
Nsg24
g1
(g25
g3
NtRp1618
(dp1619
g114
Nsg28
(lp1620
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp1621
(dp1622
g59
(tsg61
S'float32'
p1623
sg63
g65
sg66
I00
sg16
Nsbsg321
(lp1624
sg527
g101
(g102
(I0
tS'b'
tRp1625
(I1
(tg65
I00
S'\x00\x00\x80?'
tbsb(tsg1
(g18
g3
NtRp1626
(dp1627
g23
I0
sg16
Nsg314
g316
sg321
(lp1628
sg21
S'auto_1422'
p1629
sg24
g1
(g25
g3
NtRp1630
(dp1631
g28
(lp1632
sbsg54
g1
(g323
g3
NtRp1633
(dp1634
g290
(lp1635
g1
(g18
g3
NtRp1636
(dp1637
g23
I0
sg16
Nsg314
g316
sg321
(lp1638
sg21
S'auto_1410'
p1639
sg24
g1
(g25
g3
NtRp1640
(dp1641
g468
I00
sg469
g470
sg28
(lp1642
sbsg54
g1
(g323
g3
NtRp1643
(dp1644
g290
(lp1645
g1
(g18
g3
NtRp1646
(dp1647
g23
I0
sg16
Nsg314
g316
sg321
(lp1648
sg21
S'auto_1393'
p1649
sg24
g1
(g25
g3
NtRp1650
(dp1651
g28
g482
sbsg54
g1
(g323
g3
NtRp1652
(dp1653
g290
(lp1654
g319
asg314
g316
sg327
(lp1655
g1646
asg24
g1
(g25
g3
NtRp1656
(dp1657
g1180
(lp1658
g373
asg371
g489
sbsg375
(dp1659
sg377
g493
sbsg55
g495
sbasg314
g316
sg327
(lp1660
g1636
asg24
g1
(g25
g3
NtRp1661
(dp1662
g1180
(lp1663
g373
asg371
(lp1664
g1573
ag373
asbsg375
(dp1665
sg377
g1
(ctheano.tensor.basic
AllocEmpty
p1666
g3
NtRp1667
(dp1668
g61
g508
sbsbsg55
g1
(g56
g3
NtRp1669
(dp1670
g59
(I00
tp1671
sg66
I00
sg16
Nsg61
g508
sg63
g65
sg512
I00
sbsbag1615
ag1
(g18
g3
NtRp1672
(dp1673
g23
I0
sg16
Nsg314
g316
sg321
(lp1674
sg21
S'auto_1382'
p1675
sg24
g1
(g25
g3
NtRp1676
(dp1677
g28
(lp1678
(lp1679
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1680
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1681
a(g81
I39
g51
S'self._set_prediction()'
tp1682
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/neural_network.py'
p1683
I518
S'_set_prediction'
p1684
S'prediction = self.get_output(deterministic=True)'
tp1685
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1686
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1687
a(g1539
I124
g1540
S'return self.nonlinearity(activation)'
tp1688
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p1689
I61
g822
S'return theano.tensor.tanh(x)'
tp1690
aasbsg54
g1
(g323
g3
NtRp1691
(dp1692
g290
(lp1693
g1
(g18
g3
NtRp1694
(dp1695
g23
I0
sg16
Nsg314
g316
sg321
(lp1696
sg21
S'auto_1381'
p1697
sg24
g1
(g25
g3
NtRp1698
(dp1699
g28
(lp1700
(lp1701
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1702
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1703
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1704
a(g81
I39
g51
S'self._set_prediction()'
tp1705
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp1706
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1707
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1708
a(g1539
I123
g1540
S'activation = activation + self.b'
tp1709
aasbsg54
g1
(g323
g3
NtRp1710
(dp1711
g290
(lp1712
g1
(g18
g3
NtRp1713
(dp1714
g23
I0
sg16
Nsg314
g316
sg321
(lp1715
sg21
S'auto_1396'
p1716
sg24
g1
(g25
g3
NtRp1717
(dp1718
g28
(lp1719
sbsg54
g1
(g323
g3
NtRp1720
(dp1721
g290
(lp1722
g1
(g18
g3
NtRp1723
(dp1724
g23
I0
sg16
Nsg314
g316
sg321
(lp1725
sg21
S'auto_1379'
p1726
sg24
g1
(g25
g3
NtRp1727
(dp1728
g28
(lp1729
(lp1730
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1731
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1732
a(g81
I39
g51
S'self._set_prediction()'
tp1733
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp1734
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1735
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1736
a(g1539
I124
g1540
S'return self.nonlinearity(activation)'
tp1737
a(g1689
I61
g822
S'return theano.tensor.tanh(x)'
tp1738
aasbsg54
g1
(g323
g3
NtRp1739
(dp1740
g290
(lp1741
g1
(g18
g3
NtRp1742
(dp1743
g23
I0
sg16
Nsg314
g316
sg321
(lp1744
sg21
S'auto_1378'
p1745
sg24
g1
(g25
g3
NtRp1746
(dp1747
g28
(lp1748
(lp1749
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1750
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1751
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1752
a(g81
I39
g51
S'self._set_prediction()'
tp1753
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp1754
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1755
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1756
a(g1539
I123
g1540
S'activation = activation + self.b'
tp1757
aasbsg54
g1
(g323
g3
NtRp1758
(dp1759
g290
(lp1760
g1
(g18
g3
NtRp1761
(dp1762
g23
I0
sg16
Nsg314
g316
sg321
(lp1763
sg21
S'auto_1395'
p1764
sg24
g1
(g25
g3
NtRp1765
(dp1766
g28
(lp1767
sbsg54
g1
(g323
g3
NtRp1768
(dp1769
g290
(lp1770
g319
ag1
(g18
g3
NtRp1771
(dp1772
g23
I0
sg16
Nsg314
g316
sg321
(lp1773
sg21
S'auto_1373'
p1774
sg24
g1
(g25
g3
NtRp1775
(dp1776
g28
(lp1777
(lp1778
(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1779
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1780
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp1781
a(g1542
I5960
g1543
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp1782
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1783
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp1784
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp1785
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp1786
aasbsg54
g1
(g323
g3
NtRp1787
(dp1788
g290
(lp1789
g336
asg314
g316
sg327
(lp1790
g1771
asg24
g1
(g25
g3
NtRp1791
(dp1792
g1180
(lp1793
g373
asg371
(lp1794
g374
asbsg375
(dp1795
sg377
g650
sbsg55
g1
(g56
g3
NtRp1796
(dp1797
g59
(I00
I00
tp1798
sg61
g145
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1799
g1761
asg24
g1
(g25
g3
NtRp1800
(dp1801
g1180
(lp1802
g373
asg371
(lp1803
S'local_dot_to_dot22'
p1804
asbsg375
(dp1805
sg377
g1
(ctheano.tensor.blas
Dot22
p1806
g3
NtRp1807
sbsg55
g1
(g56
g3
NtRp1808
(dp1809
g59
(I00
I00
tp1810
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp1811
(dp1812
g23
I0
sg16
Nsg314
g316
sg321
(lp1813
sg21
S'auto_1376'
p1814
sg24
g1
(g25
g3
NtRp1815
(dp1816
g28
(lp1817
(lp1818
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1819
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1820
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1821
a(g81
I39
g51
S'self._set_prediction()'
tp1822
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp1823
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1824
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1825
a(g1539
I123
g1540
S'activation = activation + self.b'
tp1826
aasbsg54
g1
(g323
g3
NtRp1827
(dp1828
g290
(lp1829
g1
(g18
g3
NtRp1830
(dp1831
g23
I0
sg16
Nsg314
g316
sg321
(lp1832
sg21
S'auto_1372'
p1833
sg24
g1
(g25
g3
NtRp1834
(dp1835
g28
(lp1836
(lp1837
(g1539
I123
g1540
S'activation = activation + self.b'
tp1838
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/tensor/var.py'
p1839
I128
S'__add__'
p1840
S'return theano.tensor.basic.add(self, other)'
tp1841
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp1842
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p1843
I576
g1554
S'inputs = list(map(as_tensor_variable, inputs))'
tp1844
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1845
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp1846
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp1847
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp1848
aasbsg54
g1
(g323
g3
NtRp1849
(dp1850
g290
(lp1851
g361
asg314
g316
sg327
(lp1852
g1830
asg24
g1
(g25
g3
NtRp1853
(dp1854
g1180
(lp1855
g373
asg371
(lp1856
g374
asbsg375
(dp1857
sg377
g650
sbsg55
g1
(g56
g3
NtRp1858
(dp1859
g59
g382
sg61
g113
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1860
g1811
asg24
g1
(g25
g3
NtRp1861
(dp1862
g1180
(lp1863
g373
asg371
(lp1864
g374
asbsg375
(dp1865
sg377
g1
(g1575
g3
NtRp1866
(dp1867
g381
g382
sg383
(lp1868
I0
asg385
(lp1869
I0
asg387
(lp1870
sg389
I01
sg390
g391
sg392
(dp1871
I0
(lp1872
I0
assbsbsg55
g1
(g56
g3
NtRp1873
(dp1874
g59
(I01
I00
tp1875
sg61
g113
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1876
g1742
asg24
g1
(g25
g3
NtRp1877
(dp1878
g1180
(lp1879
g373
asg371
(lp1880
g374
asbsg375
(dp1881
sg377
g1
(ctheano.tensor.elemwise
Elemwise
p1882
g3
NtRp1883
(dp1884
S'__module__'
p1885
S'tensor'
p1886
sg698
g813
sg16
S'Elemwise{add,no_inplace}'
p1887
sg699
(dp1888
sg702
g704
sg705
g1
(g706
g3
NtRp1889
(dp1890
g709
I0
sg710
(dp1891
sbsg712
I00
sS'__doc__'
p1892
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1893
sbsbsg55
g1
(g56
g3
NtRp1894
(dp1895
g59
(I00
I00
tp1896
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1897
g1723
asg24
g1
(g25
g3
NtRp1898
(dp1899
g1180
(lp1900
g373
asg371
(lp1901
g374
asbsg375
(dp1902
sg377
g1
(g1882
g3
NtRp1903
(dp1904
g1885
g1886
sg698
g819
sg16
S'Elemwise{tanh,no_inplace}'
p1905
sg699
(dp1906
sg702
(g822
I1
I1
tp1907
sg705
g1
(g706
g3
NtRp1908
(dp1909
g709
I0
sg710
(dp1910
sbsg712
I00
sg1892
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1911
sbsbsg55
g1
(g56
g3
NtRp1912
(dp1913
g59
(I00
I00
tp1914
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp1915
(dp1916
g23
I0
sg16
Nsg314
g316
sg321
(lp1917
sg21
S'auto_1371'
p1918
sg24
g1
(g25
g3
NtRp1919
(dp1920
g28
(lp1921
(lp1922
(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1923
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1924
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp1925
a(g1542
I5960
g1543
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp1926
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1927
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp1928
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp1929
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp1930
aasbsg54
g1
(g323
g3
NtRp1931
(dp1932
g290
(lp1933
g405
asg314
g316
sg327
(lp1934
g1915
asg24
g1
(g25
g3
NtRp1935
(dp1936
g1180
(lp1937
g373
asg371
(lp1938
g374
asbsg375
(dp1939
sg377
g650
sbsg55
g1
(g56
g3
NtRp1940
(dp1941
g59
(I00
I00
tp1942
sg61
g211
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1943
g1713
asg24
g1
(g25
g3
NtRp1944
(dp1945
g1180
(lp1946
g373
asg371
(lp1947
g1804
asbsg375
(dp1948
sg377
g1807
sbsg55
g1
(g56
g3
NtRp1949
(dp1950
g59
(I00
I00
tp1951
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp1952
(dp1953
g23
I0
sg16
Nsg314
g316
sg321
(lp1954
sg21
S'auto_1375'
p1955
sg24
g1
(g25
g3
NtRp1956
(dp1957
g28
(lp1958
(lp1959
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1960
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1961
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1962
a(g81
I39
g51
S'self._set_prediction()'
tp1963
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp1964
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1965
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1966
a(g1539
I123
g1540
S'activation = activation + self.b'
tp1967
aasbsg54
g1
(g323
g3
NtRp1968
(dp1969
g290
(lp1970
g1
(g18
g3
NtRp1971
(dp1972
g23
I0
sg16
Nsg314
g316
sg321
(lp1973
sg21
S'auto_1370'
p1974
sg24
g1
(g25
g3
NtRp1975
(dp1976
g28
(lp1977
(lp1978
(g1539
I123
g1540
S'activation = activation + self.b'
tp1979
a(g1839
I128
g1840
S'return theano.tensor.basic.add(self, other)'
tp1980
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp1981
a(g1843
I576
g1554
S'inputs = list(map(as_tensor_variable, inputs))'
tp1982
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1983
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp1984
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp1985
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp1986
aasbsg54
g1
(g323
g3
NtRp1987
(dp1988
g290
(lp1989
g430
asg314
g316
sg327
(lp1990
g1971
asg24
g1
(g25
g3
NtRp1991
(dp1992
g1180
(lp1993
g373
asg371
(lp1994
g374
asbsg375
(dp1995
sg377
g650
sbsg55
g1
(g56
g3
NtRp1996
(dp1997
g59
g444
sg61
g184
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp1998
g1952
asg24
g1
(g25
g3
NtRp1999
(dp2000
g1180
(lp2001
g373
asg371
(lp2002
g374
asbsg375
(dp2003
sg377
g1
(g1575
g3
NtRp2004
(dp2005
g381
g444
sg383
(lp2006
I0
asg385
(lp2007
I0
asg387
(lp2008
sg389
I01
sg390
g448
sg392
(dp2009
I0
(lp2010
I0
assbsbsg55
g1
(g56
g3
NtRp2011
(dp2012
g59
(I01
I00
tp2013
sg61
g184
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp2014
g1694
asg24
g1
(g25
g3
NtRp2015
(dp2016
g1180
(lp2017
g373
asg371
(lp2018
g374
asbsg375
(dp2019
sg377
g1883
sbsg55
g1
(g56
g3
NtRp2020
(dp2021
g59
(I00
I00
tp2022
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp2023
g1672
asg24
g1
(g25
g3
NtRp2024
(dp2025
g1180
(lp2026
g373
asg371
(lp2027
g374
asbsg375
(dp2028
sg377
g1903
sbsg55
g1
(g56
g3
NtRp2029
(dp2030
g59
(I00
I00
tp2031
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag1516
ag1
(g513
g3
NtRp2032
(dp2033
g21
S'auto_1405'
p2034
sg23
Nsg24
g1
(g25
g3
NtRp2035
(dp2036
g114
Nsg28
(lp2037
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp2038
(dp2039
g59
(tsg61
S'float32'
p2040
sg63
g65
sg66
I00
sg16
Nsbsg321
(lp2041
sg527
g101
(g102
(I0
tS'b'
tRp2042
(I1
(tg65
I00
S'\x00\x00\x00\x00'
tbsbasg314
g316
sg327
(lp2043
g1626
asg24
g1
(g25
g3
NtRp2044
(dp2045
g1180
(lp2046
g373
asg371
(lp2047
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p2048
ag373
asbsg375
(dp2049
sg377
g1
(ctheano.tensor.blas_c
CGemv
p2050
g3
NtRp2051
(dp2052
g389
I00
sbsbsg55
g1669
sb(g1646
tp2053
sg576
(g475
tp2054
sg1
(g18
g3
NtRp2055
(dp2056
g23
I0
sg16
Nsg314
g316
sg321
(lp2057
sg21
S'auto_1397'
p2058
sg24
g1
(g25
g3
NtRp2059
(dp2060
g28
(lp2061
sbsg54
g1
(g323
g3
NtRp2062
(dp2063
g290
(lp2064
g1672
ag1526
asg314
g316
sg327
(lp2065
g2055
asg24
g1
(g25
g3
NtRp2066
(dp2067
g1180
(lp2068
g1573
asg371
(lp2069
g1804
asbsg375
(dp2070
sg377
g1807
sbsg55
g1
(g56
g3
NtRp2071
(dp2072
g59
(I00
I01
tp2073
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsb(g1646
g1
(g513
g3
NtRp2074
(dp2075
g21
S'auto_1385'
p2076
sg23
Nsg24
g1
(g25
g3
NtRp2077
(dp2078
g28
(lp2079
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp2080
(dp2081
g59
(tsg61
S'int64'
p2082
sg63
g498
sg66
I00
sg16
Nsbsg527
g101
(g102
(I0
tS'b'
tRp2083
(I1
(tg498
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tbsbtp2084
sg540
(g1586
g2074
tp2085
sg514
(tsg413
(g1
(g18
g3
NtRp2086
(dp2087
g21
S'auto_1482'
p2088
sg23
I0
sg24
g1
(g25
g3
NtRp2089
(dp2090
g28
(lp2091
sbsg16
Nsg54
g1
(g323
g3
NtRp2092
(dp2093
g290
(lp2094
g413
asg24
g1
(g25
g3
NtRp2095
sg327
(lp2096
g2086
asg377
g1
(g492
g3
NtRp2097
(dp2098
S'i'
I0
sbsbsg55
g495
sbg1
(g18
g3
NtRp2099
(dp2100
g21
S'auto_1483'
p2101
sg23
I0
sg24
g1
(g25
g3
NtRp2102
(dp2103
g28
(lp2104
sbsg16
Nsg54
g1
(g323
g3
NtRp2105
(dp2106
g290
(lp2107
g413
asg24
g1
(g25
g3
NtRp2108
sg327
(lp2109
g2099
asg377
g1
(g492
g3
NtRp2110
(dp2111
S'i'
I1
sbsbsg55
g495
sbtp2112
sg1
(g18
g3
NtRp2113
(dp2114
g23
I0
sg16
Nsg314
g316
sg321
(lp2115
sg21
S'auto_1383'
p2116
sg24
g1
(g25
g3
NtRp2117
(dp2118
g28
(lp2119
(lp2120
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2121
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2122
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2123
a(g81
I39
g51
S'self._set_prediction()'
tp2124
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp2125
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2126
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2127
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp2128
aasbsg54
g1
(g323
g3
NtRp2129
(dp2130
g290
(lp2131
g1672
ag1526
asg314
g316
sg327
(lp2132
g2113
asg24
g1
(g25
g3
NtRp2133
(dp2134
g1180
(lp2135
g1804
asg371
(lp2136
g374
asbsg375
(dp2137
sg377
g1
(ctheano.tensor.basic
Dot
p2138
g3
NtRp2139
sbsg55
g1
(g56
g3
NtRp2140
(dp2141
g59
(I00
I01
tp2142
sg61
S'float32'
p2143
sg63
g65
sg66
I00
sg16
Nsbsb(g1646
g2074
tp2144
sg600
(g2074
tp2145
sg1
(g18
g3
NtRp2146
(dp2147
g23
I0
sg16
Nsg314
g316
sg321
(lp2148
sg21
S'auto_1468'
p2149
sg24
g1
(g25
g3
NtRp2150
(dp2151
g114
Nsg28
(lp2152
sbsg54
g1
(g323
g3
NtRp2153
(dp2154
g290
(lp2155
g529
asg314
g316
sg327
(lp2156
g2146
asg24
g1
(g25
g3
NtRp2157
(dp2158
g1180
(lp2159
g1331
asg371
(lp2160
g373
asbsg375
(dp2161
sg377
g650
sbsg55
g1
(g56
g3
NtRp2162
(dp2163
g59
(I00
tp2164
sg61
g272
sg63
g65
sg66
I00
sg16
Nsbsb(g1586
tp2165
sg1
(g18
g3
NtRp2166
(dp2167
g23
I0
sg16
Nsg314
g316
sg321
(lp2168
sg21
S'auto_1384'
p2169
sg24
g1
(g25
g3
NtRp2170
(dp2171
g28
(lp2172
(lp2173
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2174
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2175
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2176
a(g81
I39
g51
S'self._set_prediction()'
tp2177
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp2178
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2179
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2180
a(g1539
I123
g1540
S'activation = activation + self.b'
tp2181
aasbsg54
g1
(g323
g3
NtRp2182
(dp2183
g290
(lp2184
g1
(g18
g3
NtRp2185
(dp2186
g23
I0
sg16
Nsg314
g316
sg321
(lp2187
sg21
S'auto_1412'
p2188
sg24
g1
(g25
g3
NtRp2189
(dp2190
g28
(lp2191
sbsg54
g1
(g323
g3
NtRp2192
(dp2193
g290
(lp2194
g1626
asg314
g316
sg327
(lp2195
g2185
asg24
g1
(g25
g3
NtRp2196
(dp2197
g1180
(lp2198
g373
asg371
(lp2199
g1573
ag373
asbsg375
(dp2200
sg377
g1
(g1575
g3
NtRp2201
(dp2202
g381
g728
sg383
(lp2203
I0
asg385
(lp2204
I1
asg387
(lp2205
sg389
I01
sg390
g732
sg392
(dp2206
I0
(lp2207
I0
assbsbsg55
g1
(g56
g3
NtRp2208
(dp2209
g59
(I00
I01
tp2210
sg61
g508
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp2211
(dp2212
g23
I0
sg16
Nsg314
g316
sg321
(lp2213
sg21
S'auto_1374'
p2214
sg24
g1
(g25
g3
NtRp2215
(dp2216
g28
(lp2217
(lp2218
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2219
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2220
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2221
a(g81
I39
g51
S'self._set_prediction()'
tp2222
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp2223
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2224
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2225
a(g1539
I123
g1540
S'activation = activation + self.b'
tp2226
aasbsg54
g1
(g323
g3
NtRp2227
(dp2228
g290
(lp2229
g1
(g18
g3
NtRp2230
(dp2231
g23
I0
sg16
Nsg314
g316
sg321
(lp2232
sg21
S'auto_1368'
p2233
sg24
g1
(g25
g3
NtRp2234
(dp2235
g28
(lp2236
(lp2237
(g1539
I123
g1540
S'activation = activation + self.b'
tp2238
a(g1839
I128
g1840
S'return theano.tensor.basic.add(self, other)'
tp2239
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp2240
a(g1843
I576
g1554
S'inputs = list(map(as_tensor_variable, inputs))'
tp2241
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp2242
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp2243
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp2244
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp2245
aasbsg54
g1
(g323
g3
NtRp2246
(dp2247
g290
(lp2248
g600
asg314
g316
sg327
(lp2249
g2230
asg24
g1
(g25
g3
NtRp2250
(dp2251
g1180
(lp2252
g373
asg371
(lp2253
g374
asbsg375
(dp2254
sg377
g650
sbsg55
g1
(g56
g3
NtRp2255
(dp2256
g59
g614
sg61
g244
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp2257
g2211
asg24
g1
(g25
g3
NtRp2258
(dp2259
g1180
(lp2260
g373
asg371
(lp2261
g374
asbsg375
(dp2262
sg377
g1
(g1575
g3
NtRp2263
(dp2264
g381
g614
sg383
(lp2265
I0
asg385
(lp2266
I0
asg387
(lp2267
sg389
I01
sg390
g618
sg392
(dp2268
I0
(lp2269
I0
assbsbsg55
g1
(g56
g3
NtRp2270
(dp2271
g59
(I01
I01
tp2272
sg61
g244
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp2273
g2166
asg24
g1
(g25
g3
NtRp2274
(dp2275
g1180
(lp2276
g373
asg371
(lp2277
g374
asbsg375
(dp2278
sg377
g1883
sbsg55
g1
(g56
g3
NtRp2279
(dp2280
g59
(I00
I01
tp2281
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsb(g1646
g2074
tp2282
sg1
(g18
g3
NtRp2283
(dp2284
g23
I0
sg16
Nsg314
g316
sg321
(lp2285
sg21
S'auto_1409'
p2286
sg24
g1
(g25
g3
NtRp2287
(dp2288
g28
(lp2289
sbsg54
g1
(g323
g3
NtRp2290
(dp2291
g290
(lp2292
g1
(g18
g3
NtRp2293
(dp2294
g23
I0
sg16
Nsg314
g316
sg321
(lp2295
sg21
S'auto_1423'
p2296
sg24
g1
(g25
g3
NtRp2297
(dp2298
g28
(lp2299
sbsg54
g1
(g323
g3
NtRp2300
(dp2301
g290
(lp2302
g1646
ag1
(g18
g3
NtRp2303
(dp2304
g23
I0
sg16
Nsg314
g316
sg321
(lp2305
sg21
S'auto_1389'
p2306
sg24
g1
(g25
g3
NtRp2307
(dp2308
g28
(lp2309
sbsg54
g1
(g323
g3
NtRp2310
(dp2311
g290
(lp2312
g405
asg314
g316
sg327
(lp2313
g2303
asg24
g1
(g25
g3
NtRp2314
(dp2315
g1180
(lp2316
S'local_subtensor_make_vector'
p2317
asg371
(lp2318
g490
asbsg375
(dp2319
sg377
g1
(g492
g3
NtRp2320
(dp2321
S'i'
I1
sbsbsg55
g495
sbasg314
g316
sg327
(lp2322
g2293
asg24
g1
(g25
g3
NtRp2323
(dp2324
g1180
(lp2325
g2317
asg371
(lp2326
g490
asbsg375
(dp2327
sg377
g1
(ctheano.tensor.opt
MakeVector
p2328
g3
NtRp2329
(dp2330
g61
g497
sbsbsg55
g1
(g56
g3
NtRp2331
(dp2332
g59
(I00
tp2333
sg61
g497
sg63
g498
sg66
I00
sg16
Nsbsbag1
(ctheano.scalar.basic
ScalarConstant
p2334
g3
NtRp2335
(dp2336
g21
S'auto_1408'
p2337
sg23
Nsg24
g1
(g25
g3
NtRp2338
(dp2339
g28
(lp2340
sbsg16
Nsg55
g1
(g670
g3
NtRp2341
(dp2342
g61
g497
sbsg321
(lp2343
sg527
g991
(g498
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2344
sbasg314
g316
sg327
(lp2345
g2283
asg24
g1
(g25
g3
NtRp2346
(dp2347
g1180
(lp2348
g2317
asg371
(lp2349
g1573
asbsg375
(dp2350
sg377
g1
(ctheano.tensor.subtensor
Subtensor
p2351
g3
NtRp2352
(dp2353
S'idx_list'
p2354
(g2341
tp2355
sbsbsg55
g1
(g56
g3
NtRp2356
(dp2357
g59
(tsg61
g497
sg63
g498
sg66
I00
sg16
Nsbsb(tsg1646
(tsg1636
(g1646
tp2358
sg1713
(g1646
g2303
tp2359
sg1
(g329
g3
NtRp2360
(dp2361
g23
I0
sg16
Nsg314
g316
sg321
(lp2362
sg21
S'auto_1471'
p2363
sg24
g1
(g25
g3
NtRp2364
(dp2365
g28
(lp2366
sbsg54
g1
(g323
g3
NtRp2367
(dp2368
g290
(lp2369
g1
(g18
g3
NtRp2370
(dp2371
g23
I0
sg16
Nsg314
g316
sg321
(lp2372
sg21
S'auto_1487'
p2373
sg24
g1
(g25
g3
NtRp2374
(dp2375
g28
(lp2376
sbsg54
g1
(g323
g3
NtRp2377
(dp2378
g290
(lp2379
g583
asg314
g316
sg327
(lp2380
g2370
asg24
g1
(g25
g3
NtRp2381
(dp2382
g1180
(lp2383
g1498
asg371
(lp2384
g724
asbsg375
(dp2385
sg377
g650
sbsg55
g1
(g56
g3
NtRp2386
(dp2387
g59
(I00
I01
tp2388
sg61
g508
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g316
sg327
(lp2389
g2360
asg24
g1
(g25
g3
NtRp2390
(dp2391
g1180
(lp2392
g1498
asg371
(lp2393
g373
asbsg375
(dp2394
sg377
g1
(g961
g3
NtRp2395
(dp2396
g114
Nsbsbsg55
g1
(g107
g3
NtRp2397
(dp2398
g59
(I00
I01
tp2399
sg111
I2
sg16
Nsg112
I11
sg61
g508
sg114
Nsbsb(g475
g2074
tp2400
sg625
(g475
g2074
tp2401
sg1
(g18
g3
NtRp2402
(dp2403
g23
I0
sg16
Nsg314
g316
sg321
(lp2404
sg21
S'auto_1467'
p2405
sg24
g1
(g25
g3
NtRp2406
(dp2407
g114
Nsg28
(lp2408
sbsg54
g1
(g323
g3
NtRp2409
(dp2410
g290
(lp2411
g1
(g329
g3
NtRp2412
(dp2413
g23
I0
sg16
Nsg314
g316
sg321
(lp2414
sg21
S'auto_1464'
p2415
sg24
g1
(g25
g3
NtRp2416
(dp2417
g28
(lp2418
sbsg54
g1
(g323
g3
NtRp2419
(dp2420
g290
(lp2421
g1
(g329
g3
NtRp2422
(dp2423
g23
I0
sg16
Nsg314
g316
sg321
(lp2424
sg21
S'auto_1458'
p2425
sg24
g1
(g25
g3
NtRp2426
(dp2427
g28
(lp2428
sbsg54
g1
(g323
g3
NtRp2429
(dp2430
g290
(lp2431
g413
ag419
asg314
g316
sg327
(lp2432
g2422
asg24
g1
(g25
g3
NtRp2433
(dp2434
g1180
(lp2435
g1183
asg371
(lp2436
g373
asbsg375
(dp2437
sg377
g1
(g695
g3
NtRp2438
(dp2439
g16
S'GpuElemwise{add,no_inplace}'
p2440
sg698
g813
sg699
(dp2441
sg702
g704
sg705
g1
(g706
g3
NtRp2442
(dp2443
g709
I0
sg710
(dp2444
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp2445
(dp2446
g59
(I00
I00
tp2447
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg314
g316
sg327
(lp2448
g2412
asg24
g1
(g25
g3
NtRp2449
(dp2450
g1180
(lp2451
g1183
asg371
(lp2452
g373
asbsg375
(dp2453
sg377
g1
(g695
g3
NtRp2454
(dp2455
g16
S'GpuElemwise{tanh,no_inplace}'
p2456
sg698
g819
sg699
(dp2457
sg702
g1907
sg705
g1
(g706
g3
NtRp2458
(dp2459
g709
I0
sg710
(dp2460
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp2461
(dp2462
g59
(I00
I00
tp2463
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg314
g316
sg327
(lp2464
g2402
asg24
g1
(g25
g3
NtRp2465
(dp2466
g1180
(lp2467
g1331
asg371
(lp2468
g373
asbsg375
(dp2469
sg377
g650
sbsg55
g1
(g56
g3
NtRp2470
(dp2471
g59
(I00
I00
tp2472
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsb(g2086
g2099
tp2473
sg1
(g18
g3
NtRp2474
(dp2475
g23
I0
sg16
Nsg314
g316
sg321
(lp2476
sg21
S'auto_1407'
p2477
sg24
g1
(g25
g3
NtRp2478
(dp2479
g28
(lp2480
sbsg54
g1
(g323
g3
NtRp2481
(dp2482
g290
(lp2483
g1672
asg314
g316
sg327
(lp2484
g2474
asg24
g1
(g25
g3
NtRp2485
(dp2486
g1180
(lp2487
g490
asg371
(lp2488
g1573
asbsg375
(dp2489
sg377
g1
(ctheano.compile.ops
Shape
p2490
g3
NtRp2491
sbsg55
g1
(g56
g3
NtRp2492
(dp2493
g59
(I00
tp2494
sg61
g497
sg63
g498
sg66
I00
sg16
Nsbsb(g1
(g513
g3
NtRp2495
(dp2496
g21
S'auto_1413'
p2497
sg23
Nsg24
g1
(g25
g3
NtRp2498
(dp2499
g28
(lp2500
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp2501
(dp2502
g59
(tsg61
S'int64'
p2503
sg63
g498
sg66
I00
sg16
Nsbsg527
g101
(g102
(I0
tS'b'
tRp2504
(I1
(tg498
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp2505
sg1
(g18
g3
NtRp2506
(dp2507
g23
I0
sg16
Nsg314
g316
sg321
(lp2508
sg21
S'auto_1499'
p2509
sg24
g1
(g25
g3
NtRp2510
(dp2511
g28
(lp2512
sbsg54
g1
(g323
g3
NtRp2513
(dp2514
g290
(lp2515
g461
asg314
g316
sg327
(lp2516
g2506
asg24
g1
(g25
g3
NtRp2517
(dp2518
g1180
(lp2519
g1498
asg371
(lp2520
g503
asbsg375
(dp2521
sg377
g650
sbsg55
g1
(g56
g3
NtRp2522
(dp2523
g59
(I00
tp2524
sg61
g508
sg63
g65
sg66
I00
sg16
Nsbsb(g475
tp2525
sg1811
(g2074
g1
(g18
g3
NtRp2526
(dp2527
g21
S'auto_1390'
p2528
sg23
I0
sg24
g1
(g25
g3
NtRp2529
(dp2530
g28
(lp2531
sbsg16
Nsg54
g1
(g323
g3
NtRp2532
(dp2533
g290
(lp2534
g361
asg24
g1
(g25
g3
NtRp2535
sg327
(lp2536
g2526
asg377
g1
(g492
g3
NtRp2537
(dp2538
S'i'
I0
sbsbsg55
g495
sbtp2539
sg344
(g1
(g18
g3
NtRp2540
(dp2541
g21
S'auto_1480'
p2542
sg23
I0
sg24
g1
(g25
g3
NtRp2543
(dp2544
g28
(lp2545
sbsg16
Nsg54
g1
(g323
g3
NtRp2546
(dp2547
g290
(lp2548
g344
asg24
g1
(g25
g3
NtRp2549
sg327
(lp2550
g2540
asg377
g1
(g492
g3
NtRp2551
(dp2552
S'i'
I0
sbsbsg55
g495
sbg1
(g18
g3
NtRp2553
(dp2554
g21
S'auto_1481'
p2555
sg23
I0
sg24
g1
(g25
g3
NtRp2556
(dp2557
g28
(lp2558
sbsg16
Nsg54
g1
(g323
g3
NtRp2559
(dp2560
g290
(lp2561
g344
asg24
g1
(g25
g3
NtRp2562
sg327
(lp2563
g2553
asg377
g1
(g492
g3
NtRp2564
(dp2565
S'i'
I1
sbsbsg55
g495
sbtp2566
sg2293
(g1
(g513
g3
NtRp2567
(dp2568
g21
S'auto_1424'
p2569
sg23
Nsg24
g1
(g25
g3
NtRp2570
(dp2571
g28
(lp2572
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp2573
(dp2574
g59
(tsg61
S'int64'
p2575
sg63
g498
sg66
I00
sg16
Nsbsg527
g101
(g102
(I0
tS'b'
tRp2576
(I1
(tg498
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp2577
sg1
(g18
g3
NtRp2578
(dp2579
g23
I0
sg16
Nsg314
g316
sg321
(lp2580
sg21
S'auto_1426'
p2581
sg24
g1
(g25
g3
NtRp2582
(dp2583
g28
(lp2584
sbsg54
g1
(g323
g3
NtRp2585
(dp2586
g290
(lp2587
g330
asg314
g316
sg327
(lp2588
g2578
asg24
g1
(g25
g3
NtRp2589
(dp2590
g1180
(lp2591
g1498
asg371
(lp2592
g373
asbsg375
(dp2593
sg377
g650
sbsg55
g1
(g56
g3
NtRp2594
(dp2595
g59
(I00
I00
tp2596
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsb(g1646
g1
(g18
g3
NtRp2597
(dp2598
g21
S'auto_1394'
p2599
sg23
I0
sg24
g1
(g25
g3
NtRp2600
(dp2601
g28
(lp2602
sbsg16
Nsg54
g1
(g323
g3
NtRp2603
(dp2604
g290
(lp2605
g319
asg24
g1
(g25
g3
NtRp2606
sg327
(lp2607
g2597
asg377
g1
(g492
g3
NtRp2608
(dp2609
S'i'
I1
sbsbsg55
g495
sbtp2610
sg1
(g18
g3
NtRp2611
(dp2612
g23
I0
sg16
Nsg314
g316
sg321
(lp2613
sg21
S'auto_1494'
p2614
sg24
g1
(g25
g3
NtRp2615
(dp2616
g28
(lp2617
sbsg54
g1
(g323
g3
NtRp2618
(dp2619
g290
(lp2620
g2032
asg314
g316
sg327
(lp2621
g2611
asg24
g1
(g25
g3
NtRp2622
(dp2623
g661
g1
(g323
g3
NtRp2624
(dp2625
g290
(lp2626
g1
(g665
g3
NtRp2627
(dp2628
g21
S'auto_1503'
p2629
sg23
Nsg24
g1
(g25
g3
NtRp2630
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp2631
sg327
(lp2632
g1
(g665
g3
NtRp2633
(dp2634
g21
S'auto_1504'
p2635
sg23
I0
sg24
g1
(g25
g3
NtRp2636
sg16
Nsg54
g2624
sg55
g1
(g670
g3
NtRp2637
(dp2638
g61
g518
sbsbasg377
g1
(ctheano.scalar.basic
Cast
p2639
g3
NtRp2640
(dp2641
g686
g1
(ctheano.scalar.basic
specific_out
p2642
g3
NtRp2643
(dp2644
S'spec'
p2645
(g2637
tp2646
sbsS'o_type'
p2647
g2637
sg16
S'convert_to_float64'
p2648
sS'ctor'
p2649
cnumpy
float64
p2650
sbsbsg1180
(lp2651
S'constant_folding'
p2652
asg371
(lp2653
g1331
asbsg375
(dp2654
sg377
g1
(g1882
g3
NtRp2655
(dp2656
g1885
S'tensor.basic'
p2657
sg16
Nsg698
g2640
sg699
(dp2658
sg702
Nsg705
g1
(g706
g3
NtRp2659
(dp2660
g709
I0
sg710
(dp2661
sbsS'__oplist_tags'
p2662
(lp2663
S'casting'
p2664
asg712
I00
sbsbsg55
g566
sb(tsg1167
(g2540
g2553
tp2665
sg2303
(tsg2211
(g2074
g2074
tp2666
sg1672
(g1646
g2303
tp2667
sg2185
(g1646
g2074
tp2668
sg1
(g18
g3
NtRp2669
(dp2670
g23
I0
sg16
Nsg314
g316
sg321
(lp2671
sg21
S'auto_1377'
p2672
sg24
g1
(g25
g3
NtRp2673
(dp2674
g28
(lp2675
(lp2676
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2677
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2678
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2679
a(g81
I39
g51
S'self._set_prediction()'
tp2680
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp2681
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2682
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2683
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp2684
aasbsg54
g1
(g323
g3
NtRp2685
(dp2686
g290
(lp2687
g319
ag1771
asg314
g316
sg327
(lp2688
g2669
asg24
g1
(g25
g3
NtRp2689
(dp2690
g1180
(lp2691
g1804
asg371
(lp2692
g374
asbsg375
(dp2693
sg377
g2139
sbsg55
g1
(g56
g3
NtRp2694
(dp2695
g59
(I00
I00
tp2696
sg61
S'float32'
p2697
sg63
g65
sg66
I00
sg16
Nsbsb(g1646
g1
(g18
g3
NtRp2698
(dp2699
g21
S'auto_1392'
p2700
sg23
I0
sg24
g1
(g25
g3
NtRp2701
(dp2702
g28
(lp2703
sbsg16
Nsg54
g1
(g323
g3
NtRp2704
(dp2705
g290
(lp2706
g336
asg24
g1
(g25
g3
NtRp2707
sg327
(lp2708
g2698
asg377
g1
(g492
g3
NtRp2709
(dp2710
S'i'
I1
sbsbsg55
g495
sbtp2711
sg1952
(g2074
g1601
tp2712
sg350
(g2074
g2526
tp2713
sg419
(g2074
g1601
tp2714
sg455
(g2086
g2099
tp2715
sg583
(g475
g2074
tp2716
sg1344
(g475
g2074
tp2717
sg1
(g329
g3
NtRp2718
(dp2719
g23
I0
sg16
Nsg314
g316
sg321
(lp2720
sg21
S'auto_1488'
p2721
sg24
g1
(g25
g3
NtRp2722
(dp2723
g28
(lp2724
sbsg54
g1
(g323
g3
NtRp2725
(dp2726
g290
(lp2727
g2506
asg314
g316
sg327
(lp2728
g2718
asg24
g1
(g25
g3
NtRp2729
(dp2730
g1180
(lp2731
g1498
asg371
(lp2732
g1331
asbsg375
(dp2733
sg377
g1
(g961
g3
NtRp2734
(dp2735
g114
Nsbsbsg55
g1335
sb(g475
tp2736
sg2335
(tsg1
(g18
g3
NtRp2737
(dp2738
g23
I0
sg16
Nsg314
g316
sg321
(lp2739
sg21
S'auto_1411'
p2740
sg24
g1
(g25
g3
NtRp2741
(dp2742
g28
(lp2743
sbsg54
g1
(g323
g3
NtRp2744
(dp2745
g290
(lp2746
g1636
ag1615
ag1672
ag1516
ag2032
asg314
g316
sg327
(lp2747
g2737
asg24
g1
(g25
g3
NtRp2748
(dp2749
g1180
(lp2750
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p2751
asg371
(lp2752
g1573
asbsg375
(dp2753
sg377
g1
(ctheano.tensor.blas
Gemv
p2754
g3
NtRp2755
(dp2756
g389
I00
sbsbsg55
g1669
sb(g1646
tp2757
sg1742
(g1646
g2698
tp2758
sg2032
(tsg1
(g18
g3
NtRp2759
(dp2760
g23
I0
sg16
Nsg314
g316
sg321
(lp2761
sg21
S'auto_1491'
p2762
sg24
g1
(g25
g3
NtRp2763
(dp2764
g28
(lp2765
sbsg54
g1
(g323
g3
NtRp2766
(dp2767
g290
(lp2768
g1615
asg314
g316
sg327
(lp2769
g2759
asg24
g1
(g25
g3
NtRp2770
(dp2771
g661
g1
(g323
g3
NtRp2772
(dp2773
g290
(lp2774
g1
(g665
g3
NtRp2775
(dp2776
g21
S'auto_1500'
p2777
sg23
Nsg24
g1
(g25
g3
NtRp2778
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp2779
sg327
(lp2780
g1
(g665
g3
NtRp2781
(dp2782
g21
S'auto_1501'
p2783
sg23
I0
sg24
g1
(g25
g3
NtRp2784
sg16
Nsg54
g2772
sg55
g2637
sbasg377
g2640
sbsg1180
(lp2785
g2652
asg371
(lp2786
g1331
asbsg375
(dp2787
sg377
g2655
sbsg55
g516
sb(tsg475
(tsg1374
(g1646
g2074
tp2788
sg1761
(g1646
g2698
tp2789
sg1771
(g1
(g18
g3
NtRp2790
(dp2791
g21
S'auto_1391'
p2792
sg23
I0
sg24
g1
(g25
g3
NtRp2793
(dp2794
g28
(lp2795
sbsg16
Nsg54
g1
(g323
g3
NtRp2796
(dp2797
g290
(lp2798
g336
asg24
g1
(g25
g3
NtRp2799
sg327
(lp2800
g2790
asg377
g1
(g492
g3
NtRp2801
(dp2802
S'i'
I0
sbsbsg55
g495
sbg2698
tp2803
sg1723
(g1646
g2698
tp2804
sg1971
(g1601
tp2805
sg1242
(g2086
g2099
tp2806
sg2422
(g2086
g2099
tp2807
sg461
(g475
tp2808
sg1484
(g475
tp2809
sg2230
(g2074
tp2810
sg1
(g329
g3
NtRp2811
(dp2812
g23
I0
sg16
Nsg314
g316
sg321
(lp2813
sg21
S'auto_1445'
p2814
sg24
g1
(g25
g3
NtRp2815
(dp2816
g28
(lp2817
sbsg54
g1
(g323
g3
NtRp2818
(dp2819
g290
(lp2820
g344
ag350
asg314
g316
sg327
(lp2821
g2811
asg24
g1
(g25
g3
NtRp2822
(dp2823
g1180
(lp2824
g1183
asg371
(lp2825
g373
asbsg375
(dp2826
sg377
g1
(g695
g3
NtRp2827
(dp2828
g16
S'GpuElemwise{add,no_inplace}'
p2829
sg698
g813
sg699
(dp2830
sg702
g704
sg705
g1
(g706
g3
NtRp2831
(dp2832
g709
I0
sg710
(dp2833
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp2834
(dp2835
g59
(I00
I00
tp2836
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsb(g2540
g2553
tp2837
sg589
(g2074
g2074
tp2838
sg1526
(g1586
g2074
tp2839
sg564
(tsg1
(g18
g3
NtRp2840
(dp2841
g23
I0
sg16
Nsg314
g316
sg321
(lp2842
sg21
S'auto_1441'
p2843
sg24
g1
(g25
g3
NtRp2844
(dp2845
g468
I00
sg114
Nsg469
g470
sg28
g1642
sbsg54
g1
(g323
g3
NtRp2846
(dp2847
g290
(lp2848
g475
asg314
g316
sg327
(lp2849
g2840
asg24
g1
(g25
g3
NtRp2850
(dp2851
g1180
(lp2852
g503
asg371
g1664
sbsg375
(dp2853
sg377
g1667
sbsg55
g1669
sb(g475
tp2854
sg1
(g18
g3
NtRp2855
(dp2856
g23
I0
sg16
Nsg314
g316
sg321
(lp2857
sg21
S'auto_1380'
p2858
sg24
g1
(g25
g3
NtRp2859
(dp2860
g28
(lp2861
(lp2862
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2863
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2864
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2865
a(g81
I39
g51
S'self._set_prediction()'
tp2866
a(g1683
I518
g1684
S'prediction = self.get_output(deterministic=True)'
tp2867
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2868
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2869
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp2870
aasbsg54
g1
(g323
g3
NtRp2871
(dp2872
g290
(lp2873
g1723
ag1915
asg314
g316
sg327
(lp2874
g2855
asg24
g1
(g25
g3
NtRp2875
(dp2876
g1180
(lp2877
g1804
asg371
(lp2878
g374
asbsg375
(dp2879
sg377
g2139
sbsg55
g1
(g56
g3
NtRp2880
(dp2881
g59
(I00
I00
tp2882
sg61
S'float32'
p2883
sg63
g65
sg66
I00
sg16
Nsbsb(g1646
g2303
tp2884
sg399
(g2540
g2553
tp2885
sg336
(g2790
g2698
tp2886
sg1830
(g2526
tp2887
sg2370
(g475
g2074
tp2888
sg632
(g1646
g2074
tp2889
sg2412
(g2086
g2099
tp2890
sg1
(g18
g3
NtRp2891
(dp2892
g23
I0
sg16
Nsg314
g316
sg321
(lp2893
sg21
S'auto_1470'
p2894
sg24
g1
(g25
g3
NtRp2895
(dp2896
g28
g2191
sbsg54
g1
(g323
g3
NtRp2897
(dp2898
g290
(lp2899
g1
(g18
g3
NtRp2900
(dp2901
g23
I0
sg16
Nsg314
g316
sg321
(lp2902
sg21
S'auto_1469'
p2903
sg24
g1
(g25
g3
NtRp2904
(dp2905
g114
Nsg28
g1632
sbsg54
g1
(g323
g3
NtRp2906
(dp2907
g290
(lp2908
g2840
ag1615
ag2402
ag2146
ag2032
asg314
g316
sg327
(lp2909
g2900
asg24
g1
(g25
g3
NtRp2910
(dp2911
g1180
(lp2912
g1331
asg371
g2047
sbsg375
(dp2913
sg377
g2051
sbsg55
g1669
sbasg314
g316
sg327
(lp2914
g2891
asg24
g1
(g25
g3
NtRp2915
(dp2916
g1180
(lp2917
g724
asg371
g2199
sbsg375
(dp2918
sg377
g2201
sbsg55
g2208
sb(g475
g2074
tp2919
sg361
(g2526
tp2920
sg529
(g1586
tp2921
sg319
(g1646
g2597
tp2922
sg1694
(g1646
g2303
tp2923
sg2900
(g475
tp2924
sg1915
(g1
(g18
g3
NtRp2925
(dp2926
g21
S'auto_1388'
p2927
sg23
I0
sg24
g1
(g25
g3
NtRp2928
(dp2929
g28
(lp2930
sbsg16
Nsg54
g1
(g323
g3
NtRp2931
(dp2932
g290
(lp2933
g405
asg24
g1
(g25
g3
NtRp2934
sg327
(lp2935
g2925
asg377
g1
(g492
g3
NtRp2936
(dp2937
S'i'
I0
sbsbsg55
g495
sbg2303
tp2938
sg405
(g2925
g2303
tp2939
sg1
(g329
g3
NtRp2940
(dp2941
g23
I0
sg16
Nsg314
g316
sg321
(lp2942
sg21
S'auto_1451'
p2943
sg24
g1
(g25
g3
NtRp2944
(dp2945
g28
(lp2946
sbsg54
g1
(g323
g3
NtRp2947
(dp2948
g290
(lp2949
g2811
asg314
g316
sg327
(lp2950
g2940
asg24
g1
(g25
g3
NtRp2951
(dp2952
g1180
(lp2953
g1183
asg371
(lp2954
g373
asbsg375
(dp2955
sg377
g1
(g695
g3
NtRp2956
(dp2957
g16
S'GpuElemwise{tanh,no_inplace}'
p2958
sg698
g819
sg699
(dp2959
sg702
g1907
sg705
g1
(g706
g3
NtRp2960
(dp2961
g709
I0
sg710
(dp2962
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp2963
(dp2964
g59
(I00
I00
tp2965
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsb(g2540
g2553
tp2966
sg330
(g1646
g2597
tp2967
ssS'lscalar_one'
p2968
g2074
sS'shape_of_reverse_index'
p2969
(dp2970
g2553
g146
((lp2971
g2811
ag1167
ag399
ag344
ag2940
atRp2972
sg2567
g146
((lp2973
g2293
atRp2974
sg1601
g146
((lp2975
g430
ag419
ag1971
ag1952
atRp2976
sg2055
g146
((ltRp2977
sg2360
g146
((ltRp2978
sg2597
g146
((lp2979
g319
ag330
ag2578
atRp2980
sg2113
g146
((ltRp2981
sg2925
g146
((lp2982
g1915
ag405
atRp2983
sg1344
g146
((ltRp2984
sg1646
g146
((lp2985
g1636
ag1713
ag2113
ag2669
ag1742
ag2855
ag1672
ag319
ag632
ag2055
ag1626
ag2578
ag2737
ag1761
ag1694
ag2185
ag1723
ag1374
ag2166
ag330
atRp2986
sg2737
g146
((ltRp2987
sg2578
g146
((ltRp2988
sg2166
g146
((ltRp2989
sg1
(g18
g3
NtRp2990
(dp2991
g21
S'auto_1497'
p2992
sg23
I0
sg24
g1
(g25
g3
NtRp2993
(dp2994
g28
(lp2995
sbsg16
Nsg54
g1
(g323
g3
NtRp2996
(dp2997
g290
(lp2998
g1315
asg24
g1
(g25
g3
NtRp2999
sg327
(lp3000
g2990
asg377
g1
(g492
g3
NtRp3001
(dp3002
S'i'
I0
sbsbsg55
g495
sbg146
((lp3003
g1315
ag1484
atRp3004
sg2303
g146
((lp3005
g1694
ag1672
ag1713
ag1915
ag405
ag2855
atRp3006
sg2495
g146
((lp3007
g2474
atRp3008
sg1315
g146
((ltRp3009
sg2669
g146
((ltRp3010
sg2540
g146
((lp3011
g2811
ag1167
ag399
ag344
ag2940
atRp3012
sg2086
g146
((lp3013
g1242
ag2402
ag2422
ag413
ag2412
ag455
atRp3014
sg2526
g146
((lp3015
g1811
ag361
ag350
ag1830
atRp3016
sg475
g146
((lp3017
g583
ag2840
ag461
ag2506
ag2891
ag2718
ag632
ag2360
ag625
ag1474
ag576
ag2900
ag1315
ag2370
ag1484
ag1344
atRp3018
sg2759
g146
((ltRp3019
sg1474
g146
((ltRp3020
sg2790
g146
((lp3021
g1771
ag336
atRp3022
sg2891
g146
((ltRp3023
sg1242
g146
((ltRp3024
sg2611
g146
((ltRp3025
sg2074
g146
((lp3026
g2185
ag419
ag540
ag2360
ag600
ag2113
ag1374
ag625
ag2166
ag2211
ag589
ag583
ag1344
ag350
ag2230
ag1526
ag2891
ag2055
ag2370
ag632
ag1811
ag1952
atRp3027
sg2840
g146
((ltRp3028
sg2855
g146
((ltRp3029
sg2698
g146
((lp3030
g2669
ag1742
ag336
ag1761
ag1723
ag1771
atRp3031
sg1
(g18
g3
NtRp3032
(dp3033
g21
S'auto_1558'
p3034
sg23
I0
sg24
g1
(g25
g3
NtRp3035
(dp3036
g28
(lp3037
sbsg16
Nsg54
g1
(g323
g3
NtRp3038
(dp3039
g290
(lp3040
g576
asg24
g1
(g25
g3
NtRp3041
sg327
(lp3042
g3032
asg377
g1
(g492
g3
NtRp3043
(dp3044
S'i'
I0
sbsbsg55
g495
sbg146
((lp3045
g576
atRp3046
sg2283
g146
((ltRp3047
sg632
g146
((ltRp3048
sg1167
g146
((ltRp3049
sg1586
g146
((lp3050
g540
ag2146
ag1526
ag529
ag1516
atRp3051
sg2412
g146
((ltRp3052
sg2099
g146
((lp3053
g1242
ag2402
ag2422
ag413
ag2412
ag455
atRp3054
sg2474
g146
((ltRp3055
sg2900
g146
((ltRp3056
sg1374
g146
((ltRp3057
sg2940
g146
((ltRp3058
sg2718
g146
((ltRp3059
ssbsS'apply_nodes'
p3060
g146
((lp3061
g472
ag458
ag586
ag347
ag402
ag628
ag483
ag333
ag537
ag416
ag358
ag427
ag579
ag597
ag324
atRp3062
sS'variables'
p3063
g146
((lp3064
g430
ag540
ag600
ag529
ag583
ag350
ag461
ag564
ag399
ag419
ag576
ag344
ag413
ag475
ag625
ag455
ag589
ag330
ag514
ag319
ag336
ag632
ag361
ag405
atRp3065
sS'_features'
p3066
(lp3067
g1
(ctheano.gof.toolbox
ReplaceValidate
p3068
g3
NtRp3069
(dp3070
S'fail_validate'
p3071
I00
sS'_nodes_removed'
p3072
g146
((ltRp3073
sba(itheano.compile.function_module
Supervisor
p3074
(dp3075
S'protected'
p3076
(lp3077
g319
ag336
ag361
ag405
ag430
ag540
ag600
asbag1
(ctheano.gof.toolbox
PreserveVariableAttributes
p3078
g3
NtRp3079
ag974
ag1469
ag1020
asbsg327
g1
(ctheano.compile.io
SymbolicOutput
p3080
g3
NtRp3081
(dp3082
g300
g1
(g18
g3
NtRp3083
(dp3084
g21
S'auto_1360'
p3085
sg23
I0
sg24
g1
(g25
g3
NtRp3086
(dp3087
g28
g2172
sbsg16
Nsg54
g1
(g323
g3
NtRp3088
(dp3089
g290
(lp3090
g1
(g18
g3
NtRp3091
(dp3092
g21
S'auto_1357'
p3093
sg23
I0
sg24
g1
(g25
g3
NtRp3094
(dp3095
g28
g2119
sbsg16
Nsg54
g1
(g323
g3
NtRp3096
(dp3097
g290
(lp3098
g1
(g18
g3
NtRp3099
(dp3100
g21
S'auto_1355'
p3101
sg23
I0
sg24
g1
(g25
g3
NtRp3102
(dp3103
g28
g1678
sbsg16
Nsg54
g1
(g323
g3
NtRp3104
(dp3105
g290
(lp3106
g1
(g18
g3
NtRp3107
(dp3108
g21
S'auto_1354'
p3109
sg23
I0
sg24
g1
(g25
g3
NtRp3110
(dp3111
g28
g1700
sbsg16
Nsg54
g1
(g323
g3
NtRp3112
(dp3113
g290
(lp3114
g1
(g18
g3
NtRp3115
(dp3116
g21
S'auto_1351'
p3117
sg23
I0
sg24
g1
(g25
g3
NtRp3118
(dp3119
g28
g2861
sbsg16
Nsg54
g1
(g323
g3
NtRp3120
(dp3121
g290
(lp3122
g1
(g18
g3
NtRp3123
(dp3124
g21
S'auto_1349'
p3125
sg23
I0
sg24
g1
(g25
g3
NtRp3126
(dp3127
g28
g1729
sbsg16
Nsg54
g1
(g323
g3
NtRp3128
(dp3129
g290
(lp3130
g1
(g18
g3
NtRp3131
(dp3132
g21
S'auto_1348'
p3133
sg23
I0
sg24
g1
(g25
g3
NtRp3134
(dp3135
g28
g1748
sbsg16
Nsg54
g1
(g323
g3
NtRp3136
(dp3137
g290
(lp3138
g1
(g18
g3
NtRp3139
(dp3140
g21
S'auto_1345'
p3141
sg23
I0
sg24
g1
(g25
g3
NtRp3142
(dp3143
g28
g2675
sbsg16
Nsg54
g1
(g323
g3
NtRp3144
(dp3145
g290
(lp3146
g19
ag1
(g18
g3
NtRp3147
(dp3148
g21
S'auto_1344'
p3149
sg23
I0
sg24
g1
(g25
g3
NtRp3150
(dp3151
g28
g1777
sbsg16
Nsg54
g1
(g323
g3
NtRp3152
(dp3153
g290
(lp3154
g122
asg24
g1
(g25
g3
NtRp3155
sg327
(lp3156
g3147
asg377
g650
sbsg55
g1796
sbasg24
g1
(g25
g3
NtRp3157
sg327
(lp3158
g3139
asg377
g2139
sbsg55
g2694
sbag1
(g18
g3
NtRp3159
(dp3160
g21
S'auto_1347'
p3161
sg23
I0
sg24
g1
(g25
g3
NtRp3162
(dp3163
g28
g1817
sbsg16
Nsg54
g1
(g323
g3
NtRp3164
(dp3165
g290
(lp3166
g1
(g18
g3
NtRp3167
(dp3168
g21
S'auto_1346'
p3169
sg23
I0
sg24
g1
(g25
g3
NtRp3170
(dp3171
g28
g1836
sbsg16
Nsg54
g1
(g323
g3
NtRp3172
(dp3173
g290
(lp3174
g71
asg24
g1
(g25
g3
NtRp3175
sg327
(lp3176
g3167
asg377
g650
sbsg55
g1858
sbasg24
g1
(g25
g3
NtRp3177
sg327
(lp3178
g3159
asg377
g1866
sbsg55
g1873
sbasg24
g1
(g25
g3
NtRp3179
sg327
(lp3180
g3131
asg377
g1883
sbsg55
g1894
sbasg24
g1
(g25
g3
NtRp3181
sg327
(lp3182
g3123
asg377
g1903
sbsg55
g1912
sbag1
(g18
g3
NtRp3183
(dp3184
g21
S'auto_1350'
p3185
sg23
I0
sg24
g1
(g25
g3
NtRp3186
(dp3187
g28
g1921
sbsg16
Nsg54
g1
(g323
g3
NtRp3188
(dp3189
g290
(lp3190
g188
asg24
g1
(g25
g3
NtRp3191
sg327
(lp3192
g3183
asg377
g650
sbsg55
g1940
sbasg24
g1
(g25
g3
NtRp3193
sg327
(lp3194
g3115
asg377
g2139
sbsg55
g2880
sbag1
(g18
g3
NtRp3195
(dp3196
g21
S'auto_1353'
p3197
sg23
I0
sg24
g1
(g25
g3
NtRp3198
(dp3199
g28
g1958
sbsg16
Nsg54
g1
(g323
g3
NtRp3200
(dp3201
g290
(lp3202
g1
(g18
g3
NtRp3203
(dp3204
g21
S'auto_1352'
p3205
sg23
I0
sg24
g1
(g25
g3
NtRp3206
(dp3207
g28
g1977
sbsg16
Nsg54
g1
(g323
g3
NtRp3208
(dp3209
g290
(lp3210
g161
asg24
g1
(g25
g3
NtRp3211
sg327
(lp3212
g3203
asg377
g650
sbsg55
g1996
sbasg24
g1
(g25
g3
NtRp3213
sg327
(lp3214
g3195
asg377
g2004
sbsg55
g2011
sbasg24
g1
(g25
g3
NtRp3215
sg327
(lp3216
g3107
asg377
g1883
sbsg55
g2020
sbasg24
g1
(g25
g3
NtRp3217
sg327
(lp3218
g3099
asg377
g1903
sbsg55
g2029
sbag1
(g18
g3
NtRp3219
(dp3220
g21
S'auto_1356'
p3221
sg23
I0
sg24
g1
(g25
g3
NtRp3222
(dp3223
g28
g1532
sbsg16
Nsg54
g1
(g323
g3
NtRp3224
(dp3225
g290
(lp3226
g249
asg24
g1
(g25
g3
NtRp3227
sg327
(lp3228
g3219
asg377
g650
sbsg55
g1565
sbasg24
g1
(g25
g3
NtRp3229
sg327
(lp3230
g3091
asg377
g2139
sbsg55
g2140
sbag1
(g18
g3
NtRp3231
(dp3232
g21
S'auto_1359'
p3233
sg23
I0
sg24
g1
(g25
g3
NtRp3234
(dp3235
g28
g2217
sbsg16
Nsg54
g1
(g323
g3
NtRp3236
(dp3237
g290
(lp3238
g1
(g18
g3
NtRp3239
(dp3240
g21
S'auto_1358'
p3241
sg23
I0
sg24
g1
(g25
g3
NtRp3242
(dp3243
g28
g2236
sbsg16
Nsg54
g1
(g323
g3
NtRp3244
(dp3245
g290
(lp3246
g221
asg24
g1
(g25
g3
NtRp3247
sg327
(lp3248
g3239
asg377
g650
sbsg55
g2255
sbasg24
g1
(g25
g3
NtRp3249
sg327
(lp3250
g3231
asg377
g2263
sbsg55
g2270
sbasg24
g1
(g25
g3
NtRp3251
sg327
(lp3252
g3083
asg377
g1883
sbsg55
g2279
sbsg297
I00
sbsS'on_unused_input'
p3253
NsS'accept_inplace'
p3254
I00
sS'mode'
p3255
g1
(ctheano.compile.mode
Mode
p3256
g3
NtRp3257
(S'cvm'
p3258
g1
(ctheano.gof.optdb
Query
p3259
g3
NtRp3260
(dp3261
g16
S'OPT_FAST_RUN'
p3262
sS'require'
p3263
g1
(g999
g3
NtRp3264
(dp3265
g1002
g1
(g1003
g3
NtRp3266
(lp3267
g3266
ag3266
absg1006
(dp3268
sbsS'subquery'
p3269
(dp3270
sS'position_cutoff'
p3271
Finf
sS'exclude'
p3272
g1
(g999
g3
NtRp3273
(dp3274
g1002
g1
(g1003
g3
NtRp3275
(lp3276
g3275
ag3275
absg1006
(dp3277
sbsS'include'
p3278
g1
(g999
g3
NtRp3279
(dp3280
g1002
g1
(g1003
g3
NtRp3281
(lp3282
g1
(g1003
g3
NtRp3283
(lp3284
g3281
ag3281
aS'fast_run'
p3285
abag3283
absg1006
(dp3286
g3285
g3283
ssbsS'extra_optimizations'
p3287
(lp3288
sbtbstRp3289
(lp3290
g1
(g95
g3
NtRp3291
(dp3292
S'provided'
p3293
I1
sg16
g53
sS'required'
p3294
I01
sg98
(lp3295
Nasg298
I00
sg105
I00
sg106
I00
sg55
g57
sg115
I01
sbag1
(g95
g3
NtRp3296
(dp3297
g3293
I0
sg16
S'W'
sg3294
I00
sg98
g139
sg298
I01
sg105
I00
sg106
I00
sg55
g142
sg115
Nsbag1
(g95
g3
NtRp3298
(dp3299
g3293
I0
sg16
S'b'
sg3294
I00
sg98
g99
sg298
I01
sg105
I00
sg106
I00
sg55
g108
sg115
Nsbag1
(g95
g3
NtRp3300
(dp3301
g3293
I0
sg16
S'W'
sg3294
I00
sg98
g205
sg298
I01
sg105
I00
sg106
I00
sg55
g208
sg115
Nsbag1
(g95
g3
NtRp3302
(dp3303
g3293
I0
sg16
S'b'
sg3294
I00
sg98
g178
sg298
I01
sg105
I00
sg106
I00
sg55
g181
sg115
Nsbag1
(g95
g3
NtRp3304
(dp3305
g3293
I0
sg16
S'W'
sg3294
I00
sg98
g266
sg298
I01
sg105
I00
sg106
I00
sg55
g269
sg115
Nsbag1
(g95
g3
NtRp3306
(dp3307
g3293
I0
sg16
S'b'
sg3294
I00
sg98
g238
sg298
I01
sg105
I00
sg106
I00
sg55
g241
sg115
Nsba(lp3308
Nag141
ag104
ag207
ag180
ag268
ag240
atRp3309
sS'lr_var'
p3310
NsS'_predict_stochastic'
p3311
g284
(g285
((dp3312
g287
Nsg288
g289
sg290
(lp3313
g1
(g292
g3
NtRp3314
(dp3315
g16
g53
sg295
Nsg296
Nsg297
Nsg105
I00
sg298
I00
sg299
I00
sg300
g19
sg301
I00
sg115
I01
sbag1
(g292
g3
NtRp3316
(dp3317
g16
S'W'
sg295
Nsg296
g137
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g122
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp3318
(dp3319
g16
S'b'
sg295
Nsg296
g96
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g71
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp3320
(dp3321
g16
S'W'
sg295
Nsg296
g203
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g188
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp3322
(dp3323
g16
S'b'
sg295
Nsg296
g176
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g161
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp3324
(dp3325
g16
S'W'
sg295
Nsg296
g264
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g249
sg301
I01
sg115
Nsbag1
(g292
g3
NtRp3326
(dp3327
g16
S'b'
sg295
Nsg296
g236
sg297
I01
sg105
I00
sg298
I01
sg299
I00
sg300
g221
sg301
I01
sg115
Nsbasg314
g1
(g315
g3
NtRp3328
(dp3329
g287
Nsg290
(lp3330
g1
(g18
g3
NtRp3331
(dp3332
g23
Nsg16
g53
sg314
g3328
sg321
(lp3333
(g1
(g323
g3
NtRp3334
(dp3335
g290
(lp3336
g3331
asg314
g3328
sg327
(lp3337
g1
(g329
g3
NtRp3338
(dp3339
g23
I0
sg16
Nsg314
g3328
sg321
(lp3340
(g1
(g323
g3
NtRp3341
(dp3342
g290
(lp3343
g3338
ag1
(g70
g3
NtRp3344
(dp3345
g23
Nsg94
g137
sg16
S'W'
sg314
g3328
sg321
(lp3346
(g3341
I1
tp3347
asg21
S'auto_1706'
p3348
sg24
g1
(g25
g3
NtRp3349
(dp3350
g28
g127
sbsg54
Nsg55
g142
sbasg314
g3328
sg327
(lp3351
g1
(g329
g3
NtRp3352
(dp3353
g23
I0
sg16
Nsg314
g3328
sg321
(lp3354
(g1
(g323
g3
NtRp3355
(dp3356
g290
(lp3357
g3352
ag1
(g329
g3
NtRp3358
(dp3359
g23
I0
sg16
Nsg314
g3328
sg321
(lp3360
(g3355
I1
tp3361
asg21
S'auto_1783'
p3362
sg24
g1
(g25
g3
NtRp3363
(dp3364
g28
(lp3365
sbsg54
g1
(g323
g3
NtRp3366
(dp3367
g290
(lp3368
g1
(g70
g3
NtRp3369
(dp3370
g23
Nsg94
g96
sg16
S'b'
sg314
g3328
sg321
(lp3371
(g3366
I0
tp3372
asg21
S'auto_1707'
p3373
sg24
g1
(g25
g3
NtRp3374
(dp3375
g28
g76
sbsg54
Nsg55
g108
sbasg314
g3328
sg327
(lp3376
g3358
asg24
g1
(g25
g3
NtRp3377
(dp3378
g371
(lp3379
g373
ag374
asbsg375
(dp3380
sg377
g1
(g378
g3
NtRp3381
(dp3382
g381
(I00
tp3383
sg383
(lp3384
I0
asg385
(lp3385
I0
asg387
(lp3386
sg389
I01
sg390
(S'x'
I0
tp3387
sg392
(dp3388
I0
(lp3389
I0
assbsbsg55
g1
(g107
g3
NtRp3390
(dp3391
g59
(I01
I00
tp3392
sg111
I2
sg16
Nsg112
I11
sg61
g113
sg114
Nsbsbasg314
g3328
sg327
(lp3393
g1
(g329
g3
NtRp3394
(dp3395
g23
I0
sg16
Nsg314
g3328
sg321
(lp3396
(g1
(g323
g3
NtRp3397
(dp3398
g290
(lp3399
g3394
ag1
(g70
g3
NtRp3400
(dp3401
g23
Nsg94
g203
sg16
S'W'
sg314
g3328
sg321
(lp3402
(g3397
I1
tp3403
asg21
S'auto_1708'
p3404
sg24
g1
(g25
g3
NtRp3405
(dp3406
g28
g193
sbsg54
Nsg55
g208
sbasg314
g3328
sg327
(lp3407
g1
(g329
g3
NtRp3408
(dp3409
g23
I0
sg16
Nsg314
g3328
sg321
(lp3410
(g1
(g323
g3
NtRp3411
(dp3412
g290
(lp3413
g3408
ag1
(g329
g3
NtRp3414
(dp3415
g23
I0
sg16
Nsg314
g3328
sg321
(lp3416
(g3411
I1
tp3417
asg21
S'auto_1780'
p3418
sg24
g1
(g25
g3
NtRp3419
(dp3420
g28
(lp3421
sbsg54
g1
(g323
g3
NtRp3422
(dp3423
g290
(lp3424
g1
(g70
g3
NtRp3425
(dp3426
g23
Nsg94
g176
sg16
S'b'
sg314
g3328
sg321
(lp3427
(g3422
I0
tp3428
asg21
S'auto_1709'
p3429
sg24
g1
(g25
g3
NtRp3430
(dp3431
g28
g166
sbsg54
Nsg55
g181
sbasg314
g3328
sg327
(lp3432
g3414
asg24
g1
(g25
g3
NtRp3433
(dp3434
g371
(lp3435
g373
ag374
asbsg375
(dp3436
sg377
g1
(g378
g3
NtRp3437
(dp3438
g381
(I00
tp3439
sg383
(lp3440
I0
asg385
(lp3441
I0
asg387
(lp3442
sg389
I01
sg390
(S'x'
I0
tp3443
sg392
(dp3444
I0
(lp3445
I0
assbsbsg55
g1
(g107
g3
NtRp3446
(dp3447
g59
(I01
I00
tp3448
sg111
I2
sg16
Nsg112
I11
sg61
g184
sg114
Nsbsbasg314
g3328
sg327
(lp3449
g1
(g329
g3
NtRp3450
(dp3451
g23
I0
sg16
Nsg314
g3328
sg321
(lp3452
(g1
(g323
g3
NtRp3453
(dp3454
g290
(lp3455
g1
(g329
g3
NtRp3456
(dp3457
g23
I0
sg16
Nsg314
g3328
sg321
(lp3458
(g3453
I0
tp3459
asg21
S'auto_1842'
p3460
sg24
g1
(g25
g3
NtRp3461
(dp3462
g468
I00
sg469
g470
sg28
(lp3463
sbsg54
g1
(g323
g3
NtRp3464
(dp3465
g290
(lp3466
g1
(g18
g3
NtRp3467
(dp3468
g23
I0
sg16
Nsg314
g3328
sg321
(lp3469
(g3464
I0
tp3470
asg21
S'auto_1771'
p3471
sg24
g1
(g25
g3
NtRp3472
(dp3473
g114
Nsg28
(lp3474
sbsg54
g1
(g323
g3
NtRp3475
(dp3476
g290
(lp3477
g3331
asg314
g3328
sg327
(lp3478
g3467
asg24
g1
(g25
g3
NtRp3479
(dp3480
g371
(lp3481
g490
ag373
ag374
asbsg375
(dp3482
sg377
g1
(g492
g3
NtRp3483
(dp3484
S'i'
I0
sbsbsg55
g495
sbasg314
g3328
sg327
(lp3485
g3456
asg24
g1
(g25
g3
NtRp3486
(dp3487
g371
(lp3488
g503
ag374
asbsg375
(dp3489
sg377
g506
sbsg55
g1
(g107
g3
NtRp3490
(dp3491
g59
(I00
tp3492
sg111
I1
sg16
Nsg112
I11
sg61
g508
sg512
I00
sg114
Nsbsbag1
(g513
g3
NtRp3493
(dp3494
g23
Nsg16
Nsg314
g3328
sg55
g1
(g56
g3
NtRp3495
(dp3496
g59
(tsg61
g518
sg63
g519
sg66
I00
sg16
Nsbsg321
(lp3497
(g3453
I1
tp3498
asg21
S'auto_1846'
p3499
sg24
g1
(g25
g3
NtRp3500
(dp3501
g28
(lp3502
sg526
Nsbsg527
g101
(g102
(I0
tS'b'
tRp3503
(I1
(tg519
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsbag3450
ag1
(g329
g3
NtRp3504
(dp3505
g23
I0
sg16
Nsg314
g3328
sg321
(lp3506
(g3453
I3
tp3507
asg21
S'auto_1777'
p3508
sg24
g1
(g25
g3
NtRp3509
(dp3510
g28
(lp3511
sbsg54
g1
(g323
g3
NtRp3512
(dp3513
g290
(lp3514
g1
(g70
g3
NtRp3515
(dp3516
g23
Nsg94
g264
sg16
S'W'
sg314
g3328
sg321
(lp3517
(g3512
I0
tp3518
asg21
S'auto_1710'
p3519
sg24
g1
(g25
g3
NtRp3520
(dp3521
g28
g254
sbsg54
Nsg55
g269
sbasg314
g3328
sg327
(lp3522
g3504
asg24
g1
(g25
g3
NtRp3523
(dp3524
g371
(lp3525
g373
ag374
asbsg375
(dp3526
sg377
g1
(g378
g3
NtRp3527
(dp3528
g381
(I00
I01
tp3529
sg383
(lp3530
I0
asg385
(lp3531
sg387
(lp3532
I1
asg389
I01
sg390
(I0
tp3533
sg392
(dp3534
I0
(lp3535
I0
assbsbsg55
g1
(g107
g3
NtRp3536
(dp3537
g59
(I00
tp3538
sg111
I1
sg16
Nsg112
I11
sg61
g272
sg114
Nsbsbag1
(g513
g3
NtRp3539
(dp3540
g23
Nsg16
Nsg314
g3328
sg55
g1
(g56
g3
NtRp3541
(dp3542
g59
(tsg61
g518
sg63
g519
sg66
I00
sg16
Nsbsg321
(lp3543
(g3453
I4
tp3544
asg21
S'auto_1849'
p3545
sg24
g1
(g25
g3
NtRp3546
(dp3547
g28
(lp3548
sg526
Nsbsg527
g101
(g102
(I0
tS'b'
tRp3549
(I1
(tg519
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsbasg314
g3328
sg327
(lp3550
g1
(g329
g3
NtRp3551
(dp3552
g23
I0
sg16
Nsg314
g3328
sg321
(lp3553
(g1
(g323
g3
NtRp3554
(dp3555
g290
(lp3556
g3551
asg314
g3328
sg327
(lp3557
g1
(g329
g3
NtRp3558
(dp3559
g23
I0
sg16
Nsg314
g3328
sg321
(lp3560
(g1
(g323
g3
NtRp3561
(dp3562
g290
(lp3563
g3558
ag1
(g329
g3
NtRp3564
(dp3565
g23
I0
sg16
Nsg314
g3328
sg321
(lp3566
(g3561
I1
tp3567
asg21
S'auto_1774'
p3568
sg24
g1
(g25
g3
NtRp3569
(dp3570
g28
(lp3571
sbsg54
g1
(g323
g3
NtRp3572
(dp3573
g290
(lp3574
g1
(g70
g3
NtRp3575
(dp3576
g23
Nsg94
g236
sg16
S'b'
sg314
g3328
sg321
(lp3577
(g3572
I0
tp3578
asg21
S'auto_1711'
p3579
sg24
g1
(g25
g3
NtRp3580
(dp3581
g28
g226
sbsg54
Nsg55
g241
sbasg314
g3328
sg327
(lp3582
g3564
asg24
g1
(g25
g3
NtRp3583
(dp3584
g371
(lp3585
g373
ag374
asbsg375
(dp3586
sg377
g1
(g378
g3
NtRp3587
(dp3588
g381
(I01
tp3589
sg383
(lp3590
I0
asg385
(lp3591
I0
asg387
(lp3592
sg389
I01
sg390
(S'x'
I0
tp3593
sg392
(dp3594
I0
(lp3595
I0
assbsbsg55
g1
(g107
g3
NtRp3596
(dp3597
g59
(I01
I01
tp3598
sg111
I2
sg16
Nsg112
I11
sg61
g244
sg114
Nsbsbasg314
g3328
sg327
(lp3599
g1
(g329
g3
NtRp3600
(dp3601
g23
I0
sg16
Nsg314
g3328
sg321
(lp3602
(g1
(g323
g3
NtRp3603
(dp3604
g290
(lp3605
g3600
asg314
g3328
sg327
(lp3606
g1
(g18
g3
NtRp3607
(dp3608
g23
I0
sg16
Nsg314
g3328
sg321
(lp3609
(g635
I0
tp3610
asg21
S'auto_1823'
p3611
sg24
g1
(g25
g3
NtRp3612
(dp3613
g28
(lp3614
sbsg54
g3603
sg55
g1
(g56
g3
NtRp3615
(dp3616
g59
(I00
I01
tp3617
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp3618
(dp3619
g371
(lp3620
g373
ag374
asbsg375
(dp3621
sg377
g650
sbI0
tp3622
asg21
S'auto_1936'
p3623
sg24
g1
(g25
g3
NtRp3624
(dp3625
g28
(lp3626
sbsg54
g3561
sg55
g1
(g107
g3
NtRp3627
(dp3628
g59
(I00
I01
tp3629
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3630
(dp3631
g661
g1
(g323
g3
NtRp3632
(dp3633
g290
(lp3634
g1
(g665
g3
NtRp3635
(dp3636
g21
S'auto_1990'
p3637
sg23
Nsg24
g1
(g25
g3
NtRp3638
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp3639
(dp3640
g21
S'auto_1991'
p3641
sg23
Nsg24
g1
(g25
g3
NtRp3642
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp3643
sg327
(lp3644
g1
(g665
g3
NtRp3645
(dp3646
g21
S'auto_1992'
p3647
sg23
I0
sg24
g1
(g25
g3
NtRp3648
sg16
Nsg54
g3632
sg55
g671
sbasg377
g1
(g683
g3
NtRp3649
(dp3650
g686
g1
(g687
g3
NtRp3651
(dp3652
g690
(I0
tp3653
sbsg16
Nsbsbsg371
(lp3654
g693
ag374
asbsg375
(dp3655
sg377
g1
(g695
g3
NtRp3656
(dp3657
g16
Nsg698
g3649
sg699
(dp3658
I0
(lp3659
I0
assg702
g704
sg705
g1
(g706
g3
NtRp3660
(dp3661
g709
I3713080549408328131
sg710
(dp3662
I0
I0
ssbsg712
I00
sbsbI0
tp3663
asg21
S'auto_1830'
p3664
sg24
g1
(g25
g3
NtRp3665
(dp3666
g28
(lp3667
sbsg54
g3554
sg55
g1
(g107
g3
NtRp3668
(dp3669
g59
(I00
I01
tp3670
sg111
I2
sg16
Nsg112
I11
sg61
S'float32'
p3671
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3672
(dp3673
g371
(lp3674
g724
ag374
asbsg375
(dp3675
sg377
g1
(g378
g3
NtRp3676
(dp3677
g381
(I00
tp3678
sg383
(lp3679
I0
asg385
(lp3680
I1
asg387
(lp3681
sg389
I01
sg390
(I0
S'x'
tp3682
sg392
(dp3683
I0
(lp3684
I0
assbsbI0
tp3685
asg21
S'auto_1901'
p3686
sg24
g1
(g25
g3
NtRp3687
(dp3688
g28
(lp3689
sbsg54
g3453
sg55
g3490
sbasg24
g1
(g25
g3
NtRp3690
(dp3691
g371
(lp3692
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p3693
ag374
asbsg375
(dp3694
sg377
g746
sbI2
tp3695
asg21
S'auto_1929'
p3696
sg24
g1
(g25
g3
NtRp3697
(dp3698
g28
(lp3699
sbsg54
g3411
sg55
g1
(g107
g3
NtRp3700
(dp3701
g59
(I00
I00
tp3702
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3703
(dp3704
g661
g1
(g323
g3
NtRp3705
(dp3706
g290
(lp3707
g1
(g665
g3
NtRp3708
(dp3709
g21
S'auto_1972'
p3710
sg23
Nsg24
g1
(g25
g3
NtRp3711
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp3712
(dp3713
g21
S'auto_1973'
p3714
sg23
Nsg24
g1
(g25
g3
NtRp3715
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp3716
sg327
(lp3717
g1
(g665
g3
NtRp3718
(dp3719
g21
S'auto_1974'
p3720
sg23
I0
sg24
g1
(g25
g3
NtRp3721
sg16
Nsg54
g3705
sg55
g671
sbasg377
g1
(g777
g3
NtRp3722
(dp3723
g290
(lp3724
g1
(g665
g3
NtRp3725
(dp3726
g21
S'auto_1918'
p3727
sg23
Nsg24
g1
(g25
g3
NtRp3728
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp3729
(dp3730
g21
S'auto_1919'
p3731
sg23
Nsg24
g1
(g25
g3
NtRp3732
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp3733
sg327
(lp3734
g1
(g665
g3
NtRp3735
(dp3736
g21
S'auto_1921'
p3737
sg23
I0
sg24
g1
(g25
g3
NtRp3738
(dp3739
g28
(lp3740
sbsg16
Nsg54
g1
(g323
g3
NtRp3741
(dp3742
g290
(lp3743
g1
(g665
g3
NtRp3744
(dp3745
g21
S'auto_1920'
p3746
sg23
I0
sg24
g1
(g25
g3
NtRp3747
(dp3748
g28
(lp3749
sbsg16
Nsg54
g1
(g323
g3
NtRp3750
(dp3751
g290
(lp3752
g3725
ag3729
asg24
g1
(g25
g3
NtRp3753
sg327
(lp3754
g3744
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp3755
sg327
(lp3756
g3735
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p3757
sg825
(g671
tp3758
sg686
g1
(g687
g3
NtRp3759
(dp3760
g690
(I0
tp3761
sbsg830
(lp3762
S'%(nodename)s_subnode0'
p3763
aS'%(nodename)s_subnode1'
p3764
asg834
I1
sbsbsg371
(lp3765
g693
ag374
asbsg375
(dp3766
sg377
g1
(g695
g3
NtRp3767
(dp3768
g16
Nsg698
g3722
sg699
(dp3769
I0
(lp3770
I0
assg702
Nsg705
g1
(g706
g3
NtRp3771
(dp3772
g709
I3713080549408328131
sg710
(dp3773
I0
I0
ssbsg712
I00
sbsbI0
tp3774
asg21
S'auto_1798'
p3775
sg24
g1
(g25
g3
NtRp3776
(dp3777
g28
(lp3778
sbsg54
g3397
sg55
g1
(g107
g3
NtRp3779
(dp3780
g59
(I00
I00
tp3781
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3782
(dp3783
g371
(lp3784
g373
ag374
asbsg375
(dp3785
sg377
g857
sbI0
tp3786
asg21
S'auto_1914'
p3787
sg24
g1
(g25
g3
NtRp3788
(dp3789
g28
(lp3790
sbsg54
g3355
sg55
g1
(g107
g3
NtRp3791
(dp3792
g59
(I00
I00
tp3793
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3794
(dp3795
g661
g1
(g323
g3
NtRp3796
(dp3797
g290
(lp3798
g1
(g665
g3
NtRp3799
(dp3800
g21
S'auto_1959'
p3801
sg23
Nsg24
g1
(g25
g3
NtRp3802
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp3803
(dp3804
g21
S'auto_1960'
p3805
sg23
Nsg24
g1
(g25
g3
NtRp3806
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp3807
sg327
(lp3808
g1
(g665
g3
NtRp3809
(dp3810
g21
S'auto_1961'
p3811
sg23
I0
sg24
g1
(g25
g3
NtRp3812
sg16
Nsg54
g3796
sg55
g671
sbasg377
g1
(g777
g3
NtRp3813
(dp3814
g290
(lp3815
g1
(g665
g3
NtRp3816
(dp3817
g21
S'auto_1903'
p3818
sg23
Nsg24
g1
(g25
g3
NtRp3819
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp3820
(dp3821
g21
S'auto_1904'
p3822
sg23
Nsg24
g1
(g25
g3
NtRp3823
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp3824
sg327
(lp3825
g1
(g665
g3
NtRp3826
(dp3827
g21
S'auto_1906'
p3828
sg23
I0
sg24
g1
(g25
g3
NtRp3829
(dp3830
g28
(lp3831
sbsg16
Nsg54
g1
(g323
g3
NtRp3832
(dp3833
g290
(lp3834
g1
(g665
g3
NtRp3835
(dp3836
g21
S'auto_1905'
p3837
sg23
I0
sg24
g1
(g25
g3
NtRp3838
(dp3839
g28
(lp3840
sbsg16
Nsg54
g1
(g323
g3
NtRp3841
(dp3842
g290
(lp3843
g3816
ag3820
asg24
g1
(g25
g3
NtRp3844
sg327
(lp3845
g3835
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp3846
sg327
(lp3847
g3826
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p3848
sg825
(g671
tp3849
sg686
g1
(g687
g3
NtRp3850
(dp3851
g690
(I0
tp3852
sbsg830
(lp3853
S'%(nodename)s_subnode0'
p3854
aS'%(nodename)s_subnode1'
p3855
asg834
I1
sbsbsg371
(lp3856
g693
ag374
asbsg375
(dp3857
sg377
g1
(g695
g3
NtRp3858
(dp3859
g16
Nsg698
g3813
sg699
(dp3860
I0
(lp3861
I0
assg702
Nsg705
g1
(g706
g3
NtRp3862
(dp3863
g709
I3713080549408328131
sg710
(dp3864
I0
I0
ssbsg712
I00
sbsbI0
tp3865
asg21
S'auto_1784'
p3866
sg24
g1
(g25
g3
NtRp3867
(dp3868
g28
(lp3869
sbsg54
g3341
sg55
g1
(g107
g3
NtRp3870
(dp3871
g59
(I00
I00
tp3872
sg111
I2
sg16
Nsg112
I11
sg61
g62
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3873
(dp3874
g371
(lp3875
g373
ag374
asbsg375
(dp3876
sg377
g857
sbI0
tp3877
asg21
S'auto_1769'
p3878
sg24
g1
(g25
g3
NtRp3879
(dp3880
g28
(lp3881
sbsg54
g3334
sg55
g1
(g107
g3
NtRp3882
(dp3883
g59
(I00
I00
tp3884
sg111
I2
sg16
Nsg112
I11
sg61
g62
sg114
Nsbsbasg24
g1
(g25
g3
NtRp3885
(dp3886
g371
(lp3887
g373
ag374
asbsg375
(dp3888
sg377
g1
(g961
g3
NtRp3889
(dp3890
g114
NsbsbI0
tp3891
a(g3475
I0
tp3892
asg21
S'auto_1705'
p3893
sg24
g1
(g25
g3
NtRp3894
(dp3895
g28
g29
sbsg54
Nsg55
g57
sbag3344
ag3369
ag3400
ag3425
ag3515
ag3575
asg327
(lp3896
g3607
asg970
(dp3897
sg972
g1
(g973
g3
NtRp3898
(dp3899
g976
(lp3900
sg978
g146
((lp3901
g3366
ag3422
ag3603
ag3355
ag3341
ag3572
ag3334
ag3464
ag3397
ag3554
ag3561
ag3411
ag3453
ag3512
ag3475
atRp3902
sg981
(itheano.gof.opt
_metadict
p3903
(dp3904
S'd'
(dp3905
g1
(g985
g986
(g3495
g3503
ttRp3906
(dp3907
g989
I00
sg990
g991
(g519
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp3908
sg993
g3503
sbg3493
sg1
(g985
g986
(g3541
g3549
ttRp3909
(dp3910
g989
I00
sg990
g991
(g519
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3911
sg993
g3549
sbg3539
ssS'l'
(lp3912
sbsg998
g1
(g999
g3
NtRp3913
(dp3914
g1002
g1
(g1003
g3
NtRp3915
(lp3916
g3915
ag3915
absg1006
(dp3917
sbsg1008
(lp3918
sg1010
g146
((lp3919
I140440184955408
aI140440184956112
atRp3920
sg1013
(itheano.gof.opt
_metadict
p3921
(dp3922
S'd'
(dp3923
g3493
g3906
sg3539
g3909
ssS'l'
(lp3924
sbsbsg1018
g1
(g1019
g3
NtRp3925
(dp3926
g1022
(dp3927
g3456
g1
(g999
g3
NtRp3928
(dp3929
g1002
g1
(g1003
g3
NtRp3930
(lp3931
g1
(g1003
g3
NtRp3932
(lp3933
g3930
ag3930
ag3456
abag3932
absg1006
(dp3934
g3456
g3932
ssbsg3352
g1
(g999
g3
NtRp3935
(dp3936
g1002
g1
(g1003
g3
NtRp3937
(lp3938
g1
(g1003
g3
NtRp3939
(lp3940
g3937
ag3937
ag3352
abag3939
absg1006
(dp3941
g3352
g3939
ssbsg3551
g1
(g999
g3
NtRp3942
(dp3943
g1002
g1
(g1003
g3
NtRp3944
(lp3945
g1
(g1003
g3
NtRp3946
(lp3947
g1
(g1003
g3
NtRp3948
(lp3949
g3944
ag3946
ag3558
abag3944
ag3551
abag3948
absg1006
(dp3950
g3551
g3946
sg3558
g3948
ssbsg3408
g1
(g999
g3
NtRp3951
(dp3952
g1002
g1
(g1003
g3
NtRp3953
(lp3954
g1
(g1003
g3
NtRp3955
(lp3956
g3953
ag3953
ag3408
abag3955
absg1006
(dp3957
g3408
g3955
ssbssg1054
(dp3958
g3456
g3456
sg3558
g3551
sg3352
g3352
sg3551
g3551
sg3408
g3408
ssg1056
g14
((lp3959
(lp3960
g3575
ag1
(g999
g3
NtRp3961
(dp3962
g1002
g1
(g1003
g3
NtRp3963
(lp3964
g1
(g1003
g3
NtRp3965
(lp3966
g3963
ag3963
ag3564
abag3965
absg1006
(dp3967
g3564
g3965
ssbaa(lp3968
g3515
ag1
(g999
g3
NtRp3969
(dp3970
g1002
g1
(g1003
g3
NtRp3971
(lp3972
g1
(g1003
g3
NtRp3973
(lp3974
g3971
ag3971
ag3504
abag3973
absg1006
(dp3975
g3504
g3973
ssbaa(lp3976
g3425
ag1
(g999
g3
NtRp3977
(dp3978
g1002
g1
(g1003
g3
NtRp3979
(lp3980
g1
(g1003
g3
NtRp3981
(lp3982
g3979
ag3979
ag3414
abag3981
absg1006
(dp3983
g3414
g3981
ssbaa(lp3984
g3369
ag1
(g999
g3
NtRp3985
(dp3986
g1002
g1
(g1003
g3
NtRp3987
(lp3988
g1
(g1003
g3
NtRp3989
(lp3990
g3987
ag3987
ag3358
abag3989
absg1006
(dp3991
g3358
g3989
ssbaa(lp3992
g3551
ag1
(g999
g3
NtRp3993
(dp3994
g1002
g1
(g1003
g3
NtRp3995
(lp3996
g1
(g1003
g3
NtRp3997
(lp3998
g3995
ag3995
ag3558
abag3997
absg1006
(dp3999
g3558
g3997
ssbaatRp4000
sg1099
g14
((lp4001
(lp4002
g3564
ag3575
aa(lp4003
g3504
ag3515
aa(lp4004
g3414
ag3425
aa(lp4005
g3358
ag3369
aa(lp4006
g3558
ag3551
aatRp4007
sg314
g3328
sg1107
I01
sg321
g14
((lp4008
(lp4009
g3575
ag14
((lp4010
(lp4011
g3572
aI1
aatRp4012
aa(lp4013
g3564
ag14
((lp4014
(lp4015
g3561
aI1
aatRp4016
aa(lp4017
g3515
ag14
((lp4018
(lp4019
g3512
aI1
aatRp4020
aa(lp4021
g3504
ag14
((lp4022
(lp4023
g3453
aI1
aatRp4024
aa(lp4025
g3425
ag14
((lp4026
(lp4027
g3422
aI1
aatRp4028
aa(lp4029
g3414
ag14
((lp4030
(lp4031
g3411
aI1
aatRp4032
aa(lp4033
g3369
ag14
((lp4034
(lp4035
g3366
aI1
aatRp4036
aa(lp4037
g3358
ag14
((lp4038
(lp4039
g3355
aI1
aatRp4040
aa(lp4041
g3331
ag14
((lp4042
(lp4043
g3334
aI1
aa(lp4044
g3475
aI1
aatRp4045
aa(lp4046
g3338
ag14
((lp4047
(lp4048
g3341
aI1
aatRp4049
aa(lp4050
g3467
ag14
((lp4051
(lp4052
g3464
aI1
aatRp4053
aa(lp4054
g3344
ag14
((lp4055
(lp4056
g3341
aI1
aatRp4057
aa(lp4058
g3352
ag14
((lp4059
(lp4060
g3355
aI1
aatRp4061
aa(lp4062
g3456
ag14
((lp4063
(lp4064
g3453
aI1
aatRp4065
aa(lp4066
g1
(g329
g3
NtRp4067
(dp4068
g23
I0
sg16
Nsg314
g3328
sg321
(lp4069
sg21
S'auto_1888'
p4070
sg24
g1
(g25
g3
NtRp4071
(dp4072
g28
(lp4073
sbsg54
g1
(g323
g3
NtRp4074
(dp4075
g290
(lp4076
g3352
ag3358
asg314
g3328
sg327
(lp4077
g4067
asg24
g1
(g25
g3
NtRp4078
(dp4079
g1180
(lp4080
g693
asg371
(lp4081
g1183
asbsg375
(dp4082
sg377
g1
(g695
g3
NtRp4083
(dp4084
g16
Nsg698
g1
(g777
g3
NtRp4085
(dp4086
g290
(lp4087
g1
(g665
g3
NtRp4088
(dp4089
g21
S'auto_1877'
p4090
sg23
Nsg24
g1
(g25
g3
NtRp4091
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp4092
(dp4093
g21
S'auto_1878'
p4094
sg23
Nsg24
g1
(g25
g3
NtRp4095
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp4096
sg327
(lp4097
g1
(g665
g3
NtRp4098
(dp4099
g21
S'auto_1880'
p4100
sg23
I0
sg24
g1
(g25
g3
NtRp4101
(dp4102
g28
g3831
sbsg16
Nsg54
g1
(g323
g3
NtRp4103
(dp4104
g290
(lp4105
g1
(g665
g3
NtRp4106
(dp4107
g21
S'auto_1879'
p4108
sg23
I0
sg24
g1
(g25
g3
NtRp4109
(dp4110
g28
g3840
sbsg16
Nsg54
g1
(g323
g3
NtRp4111
(dp4112
g290
(lp4113
g4088
ag4092
asg24
g1
(g25
g3
NtRp4114
sg327
(lp4115
g4106
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp4116
sg327
(lp4117
g4098
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p4118
sg825
(g671
tp4119
sg830
(lp4120
S'%(nodename)s_subnode0'
p4121
aS'%(nodename)s_subnode1'
p4122
asg834
I1
sbsg699
(dp4123
sg702
Nsg705
g1
(g706
g3
NtRp4124
(dp4125
g709
I0
sg710
(dp4126
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp4127
(dp4128
g59
(I00
I00
tp4129
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbag14
((ltRp4130
aa(lp4131
g3400
ag14
((lp4132
(lp4133
g3397
aI1
aatRp4134
aa(lp4135
g3408
ag14
((lp4136
(lp4137
g3411
aI1
aatRp4138
aa(lp4139
g1
(g329
g3
NtRp4140
(dp4141
g23
I0
sg16
Nsg314
g3328
sg321
(lp4142
sg21
S'auto_1867'
p4143
sg24
g1
(g25
g3
NtRp4144
(dp4145
g28
(lp4146
sbsg54
g1
(g323
g3
NtRp4147
(dp4148
g290
(lp4149
g3408
ag3414
asg314
g3328
sg327
(lp4150
g4140
asg24
g1
(g25
g3
NtRp4151
(dp4152
g1180
(lp4153
g693
asg371
(lp4154
g1183
asbsg375
(dp4155
sg377
g1
(g695
g3
NtRp4156
(dp4157
g16
Nsg698
g1
(g777
g3
NtRp4158
(dp4159
g290
(lp4160
g1
(g665
g3
NtRp4161
(dp4162
g21
S'auto_1856'
p4163
sg23
Nsg24
g1
(g25
g3
NtRp4164
sg16
Nsg54
Nsg55
g671
sbag1
(g665
g3
NtRp4165
(dp4166
g21
S'auto_1857'
p4167
sg23
Nsg24
g1
(g25
g3
NtRp4168
sg16
Nsg54
Nsg55
g671
sbasg789
I2
sg16
Nsg790
(g671
g671
tp4169
sg327
(lp4170
g1
(g665
g3
NtRp4171
(dp4172
g21
S'auto_1859'
p4173
sg23
I0
sg24
g1
(g25
g3
NtRp4174
(dp4175
g28
g3740
sbsg16
Nsg54
g1
(g323
g3
NtRp4176
(dp4177
g290
(lp4178
g1
(g665
g3
NtRp4179
(dp4180
g21
S'auto_1858'
p4181
sg23
I0
sg24
g1
(g25
g3
NtRp4182
(dp4183
g28
g3749
sbsg16
Nsg54
g1
(g323
g3
NtRp4184
(dp4185
g290
(lp4186
g4161
ag4165
asg24
g1
(g25
g3
NtRp4187
sg327
(lp4188
g4179
asg377
g813
sbsg55
g671
sbasg24
g1
(g25
g3
NtRp4189
sg327
(lp4190
g4171
asg377
g819
sbsg55
g671
sbasg823
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p4191
sg825
(g671
tp4192
sg830
(lp4193
S'%(nodename)s_subnode0'
p4194
aS'%(nodename)s_subnode1'
p4195
asg834
I1
sbsg699
(dp4196
sg702
Nsg705
g1
(g706
g3
NtRp4197
(dp4198
g709
I0
sg710
(dp4199
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp4200
(dp4201
g59
(I00
I00
tp4202
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbag14
((ltRp4203
aa(lp4204
g3493
ag14
((lp4205
(lp4206
g3453
aI1
aatRp4207
aa(lp4208
g3539
ag14
((lp4209
(lp4210
g3453
aI1
aatRp4211
aa(lp4212
g1
(g329
g3
NtRp4213
(dp4214
g23
I0
sg16
Nsg314
g3328
sg321
(lp4215
sg21
S'auto_1839'
p4216
sg24
g1
(g25
g3
NtRp4217
(dp4218
g28
(lp4219
sbsg54
g1
(g323
g3
NtRp4220
(dp4221
g290
(lp4222
g3456
ag3493
ag4140
ag3504
ag3539
asg314
g3328
sg327
(lp4223
g4213
asg24
g1
(g25
g3
NtRp4224
(dp4225
g1180
(lp4226
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p4227
asg371
(lp4228
g1331
asbsg375
(dp4229
sg377
g1333
sbsg55
g1
(g107
g3
NtRp4230
(dp4231
g59
(I00
tp4232
sg111
I1
sg16
Nsg112
I11
sg61
g3671
sg114
Nsbsbag14
((ltRp4233
aa(lp4234
g3558
ag14
((lp4235
(lp4236
g3561
aI1
aatRp4237
aa(lp4238
g1
(g329
g3
NtRp4239
(dp4240
g23
I0
sg16
Nsg314
g3328
sg321
(lp4241
sg21
S'auto_1819'
p4242
sg24
g1
(g25
g3
NtRp4243
(dp4244
g28
(lp4245
sbsg54
g1
(g323
g3
NtRp4246
(dp4247
g290
(lp4248
g3558
ag3564
asg314
g3328
sg327
(lp4249
g4239
asg24
g1
(g25
g3
NtRp4250
(dp4251
g1180
(lp4252
g693
asg371
(lp4253
g373
asbsg375
(dp4254
sg377
g1
(g695
g3
NtRp4255
(dp4256
g16
S'GpuElemwise{add,no_inplace}'
p4257
sg698
g813
sg699
(dp4258
sg702
g704
sg705
g1
(g706
g3
NtRp4259
(dp4260
g709
I0
sg710
(dp4261
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp4262
(dp4263
g59
(I00
I01
tp4264
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbag14
((ltRp4265
aa(lp4266
g3607
ag14
((ltRp4267
aa(lp4268
g1
(g18
g3
NtRp4269
(dp4270
g23
I0
sg16
Nsg314
g3328
sg321
(lp4271
sg21
S'auto_1900'
p4272
sg24
g1
(g25
g3
NtRp4273
(dp4274
g28
(lp4275
sbsg54
g1
(g323
g3
NtRp4276
(dp4277
g290
(lp4278
g3607
asg314
g3328
sg327
(lp4279
g4269
asg24
g1
(g25
g3
NtRp4280
(dp4281
g1180
(lp4282
S"('Revert', 'output_guard')"
p4283
asg371
(lp4284
g1390
asbsg375
(dp4285
sg377
g1393
sbsg55
g3615
sbag14
((ltRp4286
aa(lp4287
g3551
ag14
((lp4288
(lp4289
g3554
aI1
aatRp4290
aa(lp4291
g3394
ag14
((lp4292
(lp4293
g3397
aI1
aatRp4294
aa(lp4295
g3450
ag14
((lp4296
(lp4297
g3453
aI1
aatRp4298
aa(lp4299
g3600
ag14
((lp4300
(lp4301
g3603
aI1
aatRp4302
aatRp4303
sg1412
(dp4304
g3456
g3453
sg3352
g3355
sg3551
g3561
sg3408
g3411
ssg1414
g1
(g999
g3
NtRp4305
(dp4306
g1002
g1
(g1003
g3
NtRp4307
(lp4308
g1
(g1003
g3
NtRp4309
(lp4310
g1
(g1003
g3
NtRp4311
(lp4312
g1
(g1003
g3
NtRp4313
(lp4314
g1
(g1003
g3
NtRp4315
(lp4316
g1
(g1003
g3
NtRp4317
(lp4318
g1
(g1003
g3
NtRp4319
(lp4320
g1
(g1003
g3
NtRp4321
(lp4322
g1
(g1003
g3
NtRp4323
(lp4324
g1
(g1003
g3
NtRp4325
(lp4326
g1
(g1003
g3
NtRp4327
(lp4328
g1
(g1003
g3
NtRp4329
(lp4330
g1
(g1003
g3
NtRp4331
(lp4332
g1
(g1003
g3
NtRp4333
(lp4334
g1
(g1003
g3
NtRp4335
(lp4336
g1
(g1003
g3
NtRp4337
(lp4338
g4307
ag4335
ag3572
abag4333
ag3512
abag4331
ag3422
abag4329
ag3366
abag4327
ag3334
abag4325
ag3475
abag4323
ag3341
abag4321
ag3464
abag4319
ag3397
abag4317
ag3554
abag4315
ag3603
abag4313
ag3453
abag4311
ag3355
abag4309
ag3411
abag4307
ag3561
abag4337
absg1006
(dp4339
g3334
g4329
sg3464
g4323
sg3422
g4333
sg3561
g4309
sg3366
g4331
sg3453
g4315
sg3411
g4311
sg3341
g4325
sg3475
g4327
sg3355
g4313
sg3603
g4317
sg3397
g4321
sg3512
g4335
sg3554
g4319
sg3572
g4337
ssbsg1450
g1
(g999
g3
NtRp4340
(dp4341
g1002
g1
(g1003
g3
NtRp4342
(lp4343
g1
(g1003
g3
NtRp4344
(lp4345
g1
(g1003
g3
NtRp4346
(lp4347
g1
(g1003
g3
NtRp4348
(lp4349
g1
(g1003
g3
NtRp4350
(lp4351
g4342
ag4348
ag3453
abag4346
ag3355
abag4344
ag3411
abag4342
ag3561
abag4350
absg1006
(dp4352
g3453
g4350
sg3561
g4344
sg3411
g4346
sg3355
g4348
ssbsg1464
I00
sbsg16
S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/neural_network.py:524'
p4353
sg1466
F0.0045464038848876953
sg1467
g1
(g1468
g3
NtRp4354
(dp4355
g976
(dp4356
sg1472
(dp4357
g3358
(g1
(g513
g3
NtRp4358
(dp4359
g21
S'auto_1729'
p4360
sg23
Nsg24
g1
(g25
g3
NtRp4361
(dp4362
g28
(lp4363
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp4364
(dp4365
g59
(tsg61
S'int64'
p4366
sg63
g498
sg66
I00
sg16
Nsbsg527
g101
(g102
(I0
tS'b'
tRp4367
(I1
(tg498
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tbsbg1
(g18
g3
NtRp4368
(dp4369
g21
S'auto_1734'
p4370
sg23
I0
sg24
g1
(g25
g3
NtRp4371
(dp4372
g28
(lp4373
sbsg16
Nsg54
g1
(g323
g3
NtRp4374
(dp4375
g290
(lp4376
g3369
asg24
g1
(g25
g3
NtRp4377
sg327
(lp4378
g4368
asg377
g1
(g492
g3
NtRp4379
(dp4380
S'i'
I0
sbsbsg55
g495
sbtp4381
sg1
(g18
g3
NtRp4382
(dp4383
g23
I0
sg16
Nsg314
g3328
sg321
(lp4384
sg21
S'auto_1724'
p4385
sg24
g1
(g25
g3
NtRp4386
(dp4387
g28
(lp4388
(lp4389
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4390
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4391
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4392
a(g81
I39
g51
S'self._set_prediction()'
tp4393
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4394
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4395
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4396
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp4397
aasbsg54
g1
(g323
g3
NtRp4398
(dp4399
g290
(lp4400
g1
(g18
g3
NtRp4401
(dp4402
g23
I0
sg16
Nsg314
g3328
sg321
(lp4403
sg21
S'auto_1723'
p4404
sg24
g1
(g25
g3
NtRp4405
(dp4406
g28
(lp4407
(lp4408
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4409
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4410
a(g81
I39
g51
S'self._set_prediction()'
tp4411
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4412
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4413
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4414
a(g1539
I124
g1540
S'return self.nonlinearity(activation)'
tp4415
a(g1689
I61
g822
S'return theano.tensor.tanh(x)'
tp4416
aasbsg54
g1
(g323
g3
NtRp4417
(dp4418
g290
(lp4419
g1
(g18
g3
NtRp4420
(dp4421
g23
I0
sg16
Nsg314
g3328
sg321
(lp4422
sg21
S'auto_1722'
p4423
sg24
g1
(g25
g3
NtRp4424
(dp4425
g28
(lp4426
(lp4427
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4428
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4429
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4430
a(g81
I39
g51
S'self._set_prediction()'
tp4431
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4432
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4433
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4434
a(g1539
I123
g1540
S'activation = activation + self.b'
tp4435
aasbsg54
g1
(g323
g3
NtRp4436
(dp4437
g290
(lp4438
g1
(g18
g3
NtRp4439
(dp4440
g23
I0
sg16
Nsg314
g3328
sg321
(lp4441
sg21
S'auto_1739'
p4442
sg24
g1
(g25
g3
NtRp4443
(dp4444
g28
(lp4445
sbsg54
g1
(g323
g3
NtRp4446
(dp4447
g290
(lp4448
g3331
ag1
(g18
g3
NtRp4449
(dp4450
g23
I0
sg16
Nsg314
g3328
sg321
(lp4451
sg21
S'auto_1717'
p4452
sg24
g1
(g25
g3
NtRp4453
(dp4454
g28
(lp4455
(lp4456
(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4457
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4458
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp4459
a(g1542
I5960
g1543
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp4460
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4461
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp4462
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4463
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp4464
aasbsg54
g1
(g323
g3
NtRp4465
(dp4466
g290
(lp4467
g3344
asg314
g3328
sg327
(lp4468
g4449
asg24
g1
(g25
g3
NtRp4469
(dp4470
g1180
(lp4471
g373
asg371
(lp4472
g374
asbsg375
(dp4473
sg377
g650
sbsg55
g1
(g56
g3
NtRp4474
(dp4475
g59
(I00
I00
tp4476
sg61
g145
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4477
g4439
asg24
g1
(g25
g3
NtRp4478
(dp4479
g1180
(lp4480
g373
asg371
(lp4481
g1804
asbsg375
(dp4482
sg377
g1807
sbsg55
g1
(g56
g3
NtRp4483
(dp4484
g59
(I00
I00
tp4485
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp4486
(dp4487
g23
I0
sg16
Nsg314
g3328
sg321
(lp4488
sg21
S'auto_1720'
p4489
sg24
g1
(g25
g3
NtRp4490
(dp4491
g28
(lp4492
(lp4493
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4494
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4495
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4496
a(g81
I39
g51
S'self._set_prediction()'
tp4497
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4498
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4499
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4500
a(g1539
I123
g1540
S'activation = activation + self.b'
tp4501
aasbsg54
g1
(g323
g3
NtRp4502
(dp4503
g290
(lp4504
g1
(g18
g3
NtRp4505
(dp4506
g23
I0
sg16
Nsg314
g3328
sg321
(lp4507
sg21
S'auto_1716'
p4508
sg24
g1
(g25
g3
NtRp4509
(dp4510
g28
(lp4511
(lp4512
(g1539
I123
g1540
S'activation = activation + self.b'
tp4513
a(g1839
I128
g1840
S'return theano.tensor.basic.add(self, other)'
tp4514
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4515
a(g1843
I576
g1554
S'inputs = list(map(as_tensor_variable, inputs))'
tp4516
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4517
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp4518
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4519
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp4520
aasbsg54
g1
(g323
g3
NtRp4521
(dp4522
g290
(lp4523
g3369
asg314
g3328
sg327
(lp4524
g4505
asg24
g1
(g25
g3
NtRp4525
(dp4526
g1180
(lp4527
g373
asg371
(lp4528
g374
asbsg375
(dp4529
sg377
g650
sbsg55
g1
(g56
g3
NtRp4530
(dp4531
g59
g3383
sg61
g113
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4532
g4486
asg24
g1
(g25
g3
NtRp4533
(dp4534
g1180
(lp4535
g373
asg371
(lp4536
g374
asbsg375
(dp4537
sg377
g1
(g1575
g3
NtRp4538
(dp4539
g381
g3383
sg383
(lp4540
I0
asg385
(lp4541
I0
asg387
(lp4542
sg389
I01
sg390
g3387
sg392
(dp4543
I0
(lp4544
I0
assbsbsg55
g1
(g56
g3
NtRp4545
(dp4546
g59
(I01
I00
tp4547
sg61
g113
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4548
g4420
asg24
g1
(g25
g3
NtRp4549
(dp4550
g1180
(lp4551
g373
asg371
(lp4552
g374
asbsg375
(dp4553
sg377
g1883
sbsg55
g1
(g56
g3
NtRp4554
(dp4555
g59
(I00
I00
tp4556
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4557
g4401
asg24
g1
(g25
g3
NtRp4558
(dp4559
g1180
(lp4560
g373
asg371
(lp4561
g374
asbsg375
(dp4562
sg377
g1903
sbsg55
g1
(g56
g3
NtRp4563
(dp4564
g59
(I00
I00
tp4565
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp4566
(dp4567
g23
I0
sg16
Nsg314
g3328
sg321
(lp4568
sg21
S'auto_1715'
p4569
sg24
g1
(g25
g3
NtRp4570
(dp4571
g28
(lp4572
(lp4573
(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4574
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4575
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp4576
a(g1542
I5960
g1543
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp4577
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4578
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp4579
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4580
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp4581
aasbsg54
g1
(g323
g3
NtRp4582
(dp4583
g290
(lp4584
g3400
asg314
g3328
sg327
(lp4585
g4566
asg24
g1
(g25
g3
NtRp4586
(dp4587
g1180
(lp4588
g373
asg371
(lp4589
g374
asbsg375
(dp4590
sg377
g650
sbsg55
g1
(g56
g3
NtRp4591
(dp4592
g59
(I00
I00
tp4593
sg61
g211
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4594
g4382
asg24
g1
(g25
g3
NtRp4595
(dp4596
g1180
(lp4597
g1804
asg371
(lp4598
g374
asbsg375
(dp4599
sg377
g2139
sbsg55
g1
(g56
g3
NtRp4600
(dp4601
g59
(I00
I00
tp4602
sg61
S'float32'
p4603
sg63
g65
sg66
I00
sg16
Nsbsb(g1
(g18
g3
NtRp4604
(dp4605
g23
I0
sg16
Nsg314
g3328
sg321
(lp4606
sg21
S'auto_1737'
p4607
sg24
g1
(g25
g3
NtRp4608
(dp4609
g28
g3474
sbsg54
g1
(g323
g3
NtRp4610
(dp4611
g290
(lp4612
g3331
asg314
g3328
sg327
(lp4613
g4604
asg24
g1
(g25
g3
NtRp4614
(dp4615
g1180
(lp4616
g373
asg371
g3481
sbsg375
(dp4617
sg377
g3483
sbsg55
g495
sbg1
(g18
g3
NtRp4618
(dp4619
g23
I0
sg16
Nsg314
g3328
sg321
(lp4620
sg21
S'auto_1733'
p4621
sg24
g1
(g25
g3
NtRp4622
(dp4623
g28
(lp4624
sbsg54
g1
(g323
g3
NtRp4625
(dp4626
g290
(lp4627
g3400
asg314
g3328
sg327
(lp4628
g4618
asg24
g1
(g25
g3
NtRp4629
(dp4630
g1180
(lp4631
g2317
asg371
(lp4632
g490
asbsg375
(dp4633
sg377
g1
(g492
g3
NtRp4634
(dp4635
S'i'
I1
sbsbsg55
g495
sbtp4636
sg3515
(g1
(g18
g3
NtRp4637
(dp4638
g21
S'auto_1730'
p4639
sg23
I0
sg24
g1
(g25
g3
NtRp4640
(dp4641
g28
(lp4642
sbsg16
Nsg54
g1
(g323
g3
NtRp4643
(dp4644
g290
(lp4645
g3515
asg24
g1
(g25
g3
NtRp4646
sg327
(lp4647
g4637
asg377
g1
(g492
g3
NtRp4648
(dp4649
S'i'
I0
sbsbsg55
g495
sbg4358
tp4650
sg1
(g329
g3
NtRp4651
(dp4652
g23
I0
sg16
Nsg314
g3328
sg321
(lp4653
sg21
S'auto_1808'
p4654
sg24
g1
(g25
g3
NtRp4655
(dp4656
g28
(lp4657
sbsg54
g1
(g323
g3
NtRp4658
(dp4659
g290
(lp4660
g1
(g329
g3
NtRp4661
(dp4662
g23
I0
sg16
Nsg314
g3328
sg321
(lp4663
sg21
S'auto_1802'
p4664
sg24
g1
(g25
g3
NtRp4665
(dp4666
g28
(lp4667
sbsg54
g1
(g323
g3
NtRp4668
(dp4669
g290
(lp4670
g3408
ag3414
asg314
g3328
sg327
(lp4671
g4661
asg24
g1
(g25
g3
NtRp4672
(dp4673
g1180
(lp4674
g1183
asg371
(lp4675
g373
asbsg375
(dp4676
sg377
g1
(g695
g3
NtRp4677
(dp4678
g16
S'GpuElemwise{add,no_inplace}'
p4679
sg698
g813
sg699
(dp4680
sg702
g704
sg705
g1
(g706
g3
NtRp4681
(dp4682
g709
I0
sg710
(dp4683
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp4684
(dp4685
g59
(I00
I00
tp4686
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsbasg314
g3328
sg327
(lp4687
g4651
asg24
g1
(g25
g3
NtRp4688
(dp4689
g1180
(lp4690
g1183
asg371
(lp4691
g373
asbsg375
(dp4692
sg377
g1
(g695
g3
NtRp4693
(dp4694
g16
S'GpuElemwise{tanh,no_inplace}'
p4695
sg698
g819
sg699
(dp4696
sg702
g1907
sg705
g1
(g706
g3
NtRp4697
(dp4698
g709
I0
sg710
(dp4699
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp4700
(dp4701
g59
(I00
I00
tp4702
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsb(g1
(g18
g3
NtRp4703
(dp4704
g21
S'auto_1826'
p4705
sg23
I0
sg24
g1
(g25
g3
NtRp4706
(dp4707
g28
(lp4708
sbsg16
Nsg54
g1
(g323
g3
NtRp4709
(dp4710
g290
(lp4711
g3408
asg24
g1
(g25
g3
NtRp4712
sg327
(lp4713
g4703
asg377
g1
(g492
g3
NtRp4714
(dp4715
S'i'
I0
sbsbsg55
g495
sbg1
(g18
g3
NtRp4716
(dp4717
g21
S'auto_1827'
p4718
sg23
I0
sg24
g1
(g25
g3
NtRp4719
(dp4720
g28
(lp4721
sbsg16
Nsg54
g1
(g323
g3
NtRp4722
(dp4723
g290
(lp4724
g3408
asg24
g1
(g25
g3
NtRp4725
sg327
(lp4726
g4716
asg377
g1
(g492
g3
NtRp4727
(dp4728
S'i'
I1
sbsbsg55
g495
sbtp4729
sg1
(g18
g3
NtRp4730
(dp4731
g23
I0
sg16
Nsg314
g3328
sg321
(lp4732
sg21
S'auto_1750'
p4733
sg24
g1
(g25
g3
NtRp4734
(dp4735
g28
(lp4736
sbsg54
g1
(g323
g3
NtRp4737
(dp4738
g290
(lp4739
g1
(g18
g3
NtRp4740
(dp4741
g23
I0
sg16
Nsg314
g3328
sg321
(lp4742
sg21
S'auto_1713'
p4743
sg24
g1
(g25
g3
NtRp4744
(dp4745
g28
(lp4746
(lp4747
(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4748
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4749
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp4750
a(g1542
I5960
g1543
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp4751
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4752
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp4753
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4754
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp4755
aasbsg54
g1
(g323
g3
NtRp4756
(dp4757
g290
(lp4758
g3515
asg314
g3328
sg327
(lp4759
g4740
asg24
g1
(g25
g3
NtRp4760
(dp4761
g1180
(lp4762
g373
asg371
(lp4763
g374
asbsg375
(dp4764
sg377
g650
sbsg55
g1
(g56
g3
NtRp4765
(dp4766
g59
(I00
I01
tp4767
sg61
g272
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4768
g4730
asg24
g1
(g25
g3
NtRp4769
(dp4770
g1180
(lp4771
g373
asg371
(lp4772
g1573
asbsg375
(dp4773
sg377
g1
(g1575
g3
NtRp4774
(dp4775
g381
g3529
sg383
(lp4776
I0
asg385
(lp4777
sg387
(lp4778
I1
asg389
I01
sg390
g3533
sg392
(dp4779
I0
(lp4780
I0
assbsbsg55
g1
(g56
g3
NtRp4781
(dp4782
g59
(I00
tp4783
sg61
g272
sg63
g65
sg66
I00
sg16
Nsbsb(g4637
tp4784
sg1
(g18
g3
NtRp4785
(dp4786
g23
I0
sg16
Nsg314
g3328
sg321
(lp4787
sg21
S'auto_1812'
p4788
sg24
g1
(g25
g3
NtRp4789
(dp4790
g114
Nsg28
(lp4791
sbsg54
g1
(g323
g3
NtRp4792
(dp4793
g290
(lp4794
g3504
asg314
g3328
sg327
(lp4795
g4785
asg24
g1
(g25
g3
NtRp4796
(dp4797
g1180
(lp4798
g1331
asg371
(lp4799
g373
asbsg375
(dp4800
sg377
g650
sbsg55
g1
(g56
g3
NtRp4801
(dp4802
g59
(I00
tp4803
sg61
g272
sg63
g65
sg66
I00
sg16
Nsbsb(g4637
tp4804
sg1
(g18
g3
NtRp4805
(dp4806
g23
I0
sg16
Nsg314
g3328
sg321
(lp4807
sg21
S'auto_1719'
p4808
sg24
g1
(g25
g3
NtRp4809
(dp4810
g28
(lp4811
(lp4812
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4813
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4814
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4815
a(g81
I39
g51
S'self._set_prediction()'
tp4816
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4817
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4818
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4819
a(g1539
I123
g1540
S'activation = activation + self.b'
tp4820
aasbsg54
g1
(g323
g3
NtRp4821
(dp4822
g290
(lp4823
g1
(g18
g3
NtRp4824
(dp4825
g23
I0
sg16
Nsg314
g3328
sg321
(lp4826
sg21
S'auto_1714'
p4827
sg24
g1
(g25
g3
NtRp4828
(dp4829
g28
(lp4830
(lp4831
(g1539
I123
g1540
S'activation = activation + self.b'
tp4832
a(g1839
I128
g1840
S'return theano.tensor.basic.add(self, other)'
tp4833
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4834
a(g1843
I576
g1554
S'inputs = list(map(as_tensor_variable, inputs))'
tp4835
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4836
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp4837
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp4838
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp4839
aasbsg54
g1
(g323
g3
NtRp4840
(dp4841
g290
(lp4842
g3425
asg314
g3328
sg327
(lp4843
g4824
asg24
g1
(g25
g3
NtRp4844
(dp4845
g1180
(lp4846
g373
asg371
(lp4847
g374
asbsg375
(dp4848
sg377
g650
sbsg55
g1
(g56
g3
NtRp4849
(dp4850
g59
g3439
sg61
g184
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp4851
g4805
asg24
g1
(g25
g3
NtRp4852
(dp4853
g1180
(lp4854
g373
asg371
(lp4855
g374
asbsg375
(dp4856
sg377
g1
(g1575
g3
NtRp4857
(dp4858
g381
g3439
sg383
(lp4859
I0
asg385
(lp4860
I0
asg387
(lp4861
sg389
I01
sg390
g3443
sg392
(dp4862
I0
(lp4863
I0
assbsbsg55
g1
(g56
g3
NtRp4864
(dp4865
g59
(I01
I00
tp4866
sg61
g184
sg63
g65
sg66
I00
sg16
Nsbsb(g4358
g1
(g18
g3
NtRp4867
(dp4868
g21
S'auto_1731'
p4869
sg23
I0
sg24
g1
(g25
g3
NtRp4870
(dp4871
g28
(lp4872
sbsg16
Nsg54
g1
(g323
g3
NtRp4873
(dp4874
g290
(lp4875
g3425
asg24
g1
(g25
g3
NtRp4876
sg327
(lp4877
g4867
asg377
g1
(g492
g3
NtRp4878
(dp4879
S'i'
I0
sbsbsg55
g495
sbtp4880
sg1
(g18
g3
NtRp4881
(dp4882
g23
I0
sg16
Nsg314
g3328
sg321
(lp4883
sg21
S'auto_1840'
p4884
sg24
g1
(g25
g3
NtRp4885
(dp4886
g28
(lp4887
sbsg54
g1
(g323
g3
NtRp4888
(dp4889
g290
(lp4890
g4213
asg314
g3328
sg327
(lp4891
g4881
asg24
g1
(g25
g3
NtRp4892
(dp4893
g1180
(lp4894
g1498
asg371
(lp4895
g1331
asbsg375
(dp4896
sg377
g650
sbsg55
g1
(g56
g3
NtRp4897
(dp4898
g59
(I00
tp4899
sg61
g3671
sg63
g65
sg66
I00
sg16
Nsbsb(g3467
tp4900
sg1
(g18
g3
NtRp4901
(dp4902
g23
I0
sg16
Nsg314
g3328
sg321
(lp4903
sg21
S'auto_1721'
p4904
sg24
g1
(g25
g3
NtRp4905
(dp4906
g28
(lp4907
(lp4908
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4909
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4910
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4911
a(g81
I39
g51
S'self._set_prediction()'
tp4912
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4913
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4914
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4915
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp4916
aasbsg54
g1
(g323
g3
NtRp4917
(dp4918
g290
(lp4919
g3331
ag4449
asg314
g3328
sg327
(lp4920
g4901
asg24
g1
(g25
g3
NtRp4921
(dp4922
g1180
(lp4923
g1804
asg371
(lp4924
g374
asbsg375
(dp4925
sg377
g2139
sbsg55
g1
(g56
g3
NtRp4926
(dp4927
g59
(I00
I00
tp4928
sg61
S'float32'
p4929
sg63
g65
sg66
I00
sg16
Nsbsb(g4604
g1
(g18
g3
NtRp4930
(dp4931
g21
S'auto_1736'
p4932
sg23
I0
sg24
g1
(g25
g3
NtRp4933
(dp4934
g28
(lp4935
sbsg16
Nsg54
g1
(g323
g3
NtRp4936
(dp4937
g290
(lp4938
g3344
asg24
g1
(g25
g3
NtRp4939
sg327
(lp4940
g4930
asg377
g1
(g492
g3
NtRp4941
(dp4942
S'i'
I1
sbsbsg55
g495
sbtp4943
sg1
(g18
g3
NtRp4944
(dp4945
g23
I0
sg16
Nsg314
g3328
sg321
(lp4946
sg21
S'auto_1727'
p4947
sg24
g1
(g25
g3
NtRp4948
(dp4949
g28
(lp4950
(lp4951
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4952
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4953
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4954
a(g81
I39
g51
S'self._set_prediction()'
tp4955
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4956
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4957
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4958
a(g1539
I121
g1540
S'activation = T.dot(input, self.W)'
tp4959
aasbsg54
g1
(g323
g3
NtRp4960
(dp4961
g290
(lp4962
g1
(g18
g3
NtRp4963
(dp4964
g23
I0
sg16
Nsg314
g3328
sg321
(lp4965
sg21
S'auto_1726'
p4966
sg24
g1
(g25
g3
NtRp4967
(dp4968
g28
(lp4969
(lp4970
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4971
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4972
a(g81
I39
g51
S'self._set_prediction()'
tp4973
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4974
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4975
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4976
a(g1539
I124
g1540
S'return self.nonlinearity(activation)'
tp4977
a(g1689
I61
g822
S'return theano.tensor.tanh(x)'
tp4978
aasbsg54
g1
(g323
g3
NtRp4979
(dp4980
g290
(lp4981
g1
(g18
g3
NtRp4982
(dp4983
g23
I0
sg16
Nsg314
g3328
sg321
(lp4984
sg21
S'auto_1725'
p4985
sg24
g1
(g25
g3
NtRp4986
(dp4987
g28
(lp4988
(lp4989
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4990
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4991
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4992
a(g81
I39
g51
S'self._set_prediction()'
tp4993
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4994
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4995
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4996
a(g1539
I123
g1540
S'activation = activation + self.b'
tp4997
aasbsg54
g1
(g323
g3
NtRp4998
(dp4999
g290
(lp5000
g1
(g18
g3
NtRp5001
(dp5002
g23
I0
sg16
Nsg314
g3328
sg321
(lp5003
sg21
S'auto_1740'
p5004
sg24
g1
(g25
g3
NtRp5005
(dp5006
g28
(lp5007
sbsg54
g1
(g323
g3
NtRp5008
(dp5009
g290
(lp5010
g4401
ag4566
asg314
g3328
sg327
(lp5011
g5001
asg24
g1
(g25
g3
NtRp5012
(dp5013
g1180
(lp5014
g373
asg371
(lp5015
g1804
asbsg375
(dp5016
sg377
g1807
sbsg55
g1
(g56
g3
NtRp5017
(dp5018
g59
(I00
I00
tp5019
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag4805
asg314
g3328
sg327
(lp5020
g4982
asg24
g1
(g25
g3
NtRp5021
(dp5022
g1180
(lp5023
g373
asg371
(lp5024
g374
asbsg375
(dp5025
sg377
g1883
sbsg55
g1
(g56
g3
NtRp5026
(dp5027
g59
(I00
I00
tp5028
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp5029
g4963
asg24
g1
(g25
g3
NtRp5030
(dp5031
g1180
(lp5032
g373
asg371
(lp5033
g374
asbsg375
(dp5034
sg377
g1903
sbsg55
g1
(g56
g3
NtRp5035
(dp5036
g59
(I00
I00
tp5037
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag4740
asg314
g3328
sg327
(lp5038
g4944
asg24
g1
(g25
g3
NtRp5039
(dp5040
g1180
(lp5041
g1804
asg371
(lp5042
g374
asbsg375
(dp5043
sg377
g2139
sbsg55
g1
(g56
g3
NtRp5044
(dp5045
g59
(I00
I01
tp5046
sg61
S'float32'
p5047
sg63
g65
sg66
I00
sg16
Nsbsb(g4604
g4358
tp5048
sg1
(g18
g3
NtRp5049
(dp5050
g23
I0
sg16
Nsg314
g3328
sg321
(lp5051
sg21
S'auto_1754'
p5052
sg24
g1
(g25
g3
NtRp5053
(dp5054
g468
I00
sg469
g470
sg28
(lp5055
sbsg54
g1
(g323
g3
NtRp5056
(dp5057
g290
(lp5058
g4604
asg314
g3328
sg327
(lp5059
g5049
asg24
g1
(g25
g3
NtRp5060
(dp5061
g1180
(lp5062
g373
asg371
(lp5063
g1573
ag373
asbsg375
(dp5064
sg377
g1
(g1666
g3
NtRp5065
(dp5066
g61
g3671
sbsbsg55
g1
(g56
g3
NtRp5067
(dp5068
g59
(I00
tp5069
sg66
I00
sg16
Nsg61
g3671
sg63
g65
sg512
I00
sbsb(g4604
tp5070
sg3539
(tsg3607
(g4604
g4358
tp5071
sg4239
(g3467
g4358
tp5072
sg1
(g329
g3
NtRp5073
(dp5074
g23
I0
sg16
Nsg314
g3328
sg321
(lp5075
sg21
S'auto_1789'
p5076
sg24
g1
(g25
g3
NtRp5077
(dp5078
g28
(lp5079
sbsg54
g1
(g323
g3
NtRp5080
(dp5081
g290
(lp5082
g3352
ag3358
asg314
g3328
sg327
(lp5083
g5073
asg24
g1
(g25
g3
NtRp5084
(dp5085
g1180
(lp5086
g1183
asg371
(lp5087
g373
asbsg375
(dp5088
sg377
g1
(g695
g3
NtRp5089
(dp5090
g16
S'GpuElemwise{add,no_inplace}'
p5091
sg698
g813
sg699
(dp5092
sg702
g704
sg705
g1
(g706
g3
NtRp5093
(dp5094
g709
I0
sg710
(dp5095
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp5096
(dp5097
g59
(I00
I00
tp5098
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsb(g1
(g18
g3
NtRp5099
(dp5100
g21
S'auto_1824'
p5101
sg23
I0
sg24
g1
(g25
g3
NtRp5102
(dp5103
g28
(lp5104
sbsg16
Nsg54
g1
(g323
g3
NtRp5105
(dp5106
g290
(lp5107
g3352
asg24
g1
(g25
g3
NtRp5108
sg327
(lp5109
g5099
asg377
g1
(g492
g3
NtRp5110
(dp5111
S'i'
I0
sbsbsg55
g495
sbg1
(g18
g3
NtRp5112
(dp5113
g21
S'auto_1825'
p5114
sg23
I0
sg24
g1
(g25
g3
NtRp5115
(dp5116
g28
(lp5117
sbsg16
Nsg54
g1
(g323
g3
NtRp5118
(dp5119
g290
(lp5120
g3352
asg24
g1
(g25
g3
NtRp5121
sg327
(lp5122
g5112
asg377
g1
(g492
g3
NtRp5123
(dp5124
S'i'
I1
sbsbsg55
g495
sbtp5125
sg4486
(g4358
g4368
tp5126
sg4566
(g1
(g18
g3
NtRp5127
(dp5128
g21
S'auto_1732'
p5129
sg23
I0
sg24
g1
(g25
g3
NtRp5130
(dp5131
g28
(lp5132
sbsg16
Nsg54
g1
(g323
g3
NtRp5133
(dp5134
g290
(lp5135
g3400
asg24
g1
(g25
g3
NtRp5136
sg327
(lp5137
g5127
asg377
g1
(g492
g3
NtRp5138
(dp5139
S'i'
I0
sbsbsg55
g495
sbg4618
tp5140
sg1
(g329
g3
NtRp5141
(dp5142
g23
I0
sg16
Nsg314
g3328
sg321
(lp5143
sg21
S'auto_1832'
p5144
sg24
g1
(g25
g3
NtRp5145
(dp5146
g28
(lp5147
sbsg54
g1
(g323
g3
NtRp5148
(dp5149
g290
(lp5150
g1
(g18
g3
NtRp5151
(dp5152
g23
I0
sg16
Nsg314
g3328
sg321
(lp5153
sg21
S'auto_1843'
p5154
sg24
g1
(g25
g3
NtRp5155
(dp5156
g28
(lp5157
sbsg54
g1
(g323
g3
NtRp5158
(dp5159
g290
(lp5160
g3456
asg314
g3328
sg327
(lp5161
g5151
asg24
g1
(g25
g3
NtRp5162
(dp5163
g1180
(lp5164
g1498
asg371
(lp5165
g503
asbsg375
(dp5166
sg377
g650
sbsg55
g1
(g56
g3
NtRp5167
(dp5168
g59
(I00
tp5169
sg61
g508
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp5170
g5141
asg24
g1
(g25
g3
NtRp5171
(dp5172
g1180
(lp5173
g1498
asg371
(lp5174
g1331
asbsg375
(dp5175
sg377
g1
(g961
g3
NtRp5176
(dp5177
g114
Nsbsbsg55
g4230
sb(g3467
tp5178
sg1
(g18
g3
NtRp5179
(dp5180
g23
I0
sg16
Nsg314
g3328
sg321
(lp5181
sg21
S'auto_1728'
p5182
sg24
g1
(g25
g3
NtRp5183
(dp5184
g28
(lp5185
(lp5186
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5187
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5188
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5189
a(g81
I39
g51
S'self._set_prediction()'
tp5190
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5191
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5192
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5193
a(g1539
I123
g1540
S'activation = activation + self.b'
tp5194
aasbsg54
g1
(g323
g3
NtRp5195
(dp5196
g290
(lp5197
g1
(g18
g3
NtRp5198
(dp5199
g23
I0
sg16
Nsg314
g3328
sg321
(lp5200
sg21
S'auto_1756'
p5201
sg24
g1
(g25
g3
NtRp5202
(dp5203
g28
(lp5204
sbsg54
g1
(g323
g3
NtRp5205
(dp5206
g290
(lp5207
g1
(g18
g3
NtRp5208
(dp5209
g23
I0
sg16
Nsg314
g3328
sg321
(lp5210
sg21
S'auto_1766'
p5211
sg24
g1
(g25
g3
NtRp5212
(dp5213
g28
(lp5214
sbsg54
g1
(g323
g3
NtRp5215
(dp5216
g290
(lp5217
g5049
ag1
(g513
g3
NtRp5218
(dp5219
g21
S'auto_1748'
p5220
sg23
Nsg24
g1
(g25
g3
NtRp5221
(dp5222
g114
Nsg28
(lp5223
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp5224
(dp5225
g59
(tsg61
S'float32'
p5226
sg63
g65
sg66
I00
sg16
Nsbsg321
(lp5227
sg527
g101
(g102
(I0
tS'b'
tRp5228
(I1
(tg65
I00
S'\x00\x00\x80?'
tbsbag4963
ag4730
ag1
(g513
g3
NtRp5229
(dp5230
g21
S'auto_1749'
p5231
sg23
Nsg24
g1
(g25
g3
NtRp5232
(dp5233
g114
Nsg28
(lp5234
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp5235
(dp5236
g59
(tsg61
S'float32'
p5237
sg63
g65
sg66
I00
sg16
Nsbsg321
(lp5238
sg527
g101
(g102
(I0
tS'b'
tRp5239
(I1
(tg65
I00
S'\x00\x00\x00\x00'
tbsbasg314
g3328
sg327
(lp5240
g5208
asg24
g1
(g25
g3
NtRp5241
(dp5242
g1180
(lp5243
g373
asg371
(lp5244
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p5245
ag373
asbsg375
(dp5246
sg377
g2051
sbsg55
g5067
sbasg314
g3328
sg327
(lp5247
g5198
asg24
g1
(g25
g3
NtRp5248
(dp5249
g1180
(lp5250
g373
asg371
(lp5251
g1573
ag373
asbsg375
(dp5252
sg377
g1
(g1575
g3
NtRp5253
(dp5254
g381
g3678
sg383
(lp5255
I0
asg385
(lp5256
I1
asg387
(lp5257
sg389
I01
sg390
g3682
sg392
(dp5258
I0
(lp5259
I0
assbsbsg55
g1
(g56
g3
NtRp5260
(dp5261
g59
(I00
I01
tp5262
sg61
g3671
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp5263
(dp5264
g23
I0
sg16
Nsg314
g3328
sg321
(lp5265
sg21
S'auto_1718'
p5266
sg24
g1
(g25
g3
NtRp5267
(dp5268
g28
(lp5269
(lp5270
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5271
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5272
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5273
a(g81
I39
g51
S'self._set_prediction()'
tp5274
a(g1683
I522
g1684
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5275
a(g1534
I64
g1535
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5276
a(g1537
I190
g1535
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5277
a(g1539
I123
g1540
S'activation = activation + self.b'
tp5278
aasbsg54
g1
(g323
g3
NtRp5279
(dp5280
g290
(lp5281
g1
(g18
g3
NtRp5282
(dp5283
g23
I0
sg16
Nsg314
g3328
sg321
(lp5284
sg21
S'auto_1712'
p5285
sg24
g1
(g25
g3
NtRp5286
(dp5287
g28
(lp5288
(lp5289
(g1539
I123
g1540
S'activation = activation + self.b'
tp5290
a(g1839
I128
g1840
S'return theano.tensor.basic.add(self, other)'
tp5291
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp5292
a(g1843
I576
g1554
S'inputs = list(map(as_tensor_variable, inputs))'
tp5293
a(g1542
I155
g1545
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp5294
a(g1547
I518
g1548
S'return host_from_gpu(self)'
tp5295
a(g1550
I615
g1551
S'node = self.make_node(*inputs, **kwargs)'
tp5296
a(g1553
I564
g1554
S'broadcastable=x.broadcastable)()])'
tp5297
aasbsg54
g1
(g323
g3
NtRp5298
(dp5299
g290
(lp5300
g3575
asg314
g3328
sg327
(lp5301
g5282
asg24
g1
(g25
g3
NtRp5302
(dp5303
g1180
(lp5304
g373
asg371
(lp5305
g374
asbsg375
(dp5306
sg377
g650
sbsg55
g1
(g56
g3
NtRp5307
(dp5308
g59
g3589
sg61
g244
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp5309
g5263
asg24
g1
(g25
g3
NtRp5310
(dp5311
g1180
(lp5312
g373
asg371
(lp5313
g374
asbsg375
(dp5314
sg377
g1
(g1575
g3
NtRp5315
(dp5316
g381
g3589
sg383
(lp5317
I0
asg385
(lp5318
I0
asg387
(lp5319
sg389
I01
sg390
g3593
sg392
(dp5320
I0
(lp5321
I0
assbsbsg55
g1
(g56
g3
NtRp5322
(dp5323
g59
(I01
I01
tp5324
sg61
g244
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp5325
g5179
asg24
g1
(g25
g3
NtRp5326
(dp5327
g1180
(lp5328
g373
asg371
(lp5329
g374
asbsg375
(dp5330
sg377
g1883
sbsg55
g1
(g56
g3
NtRp5331
(dp5332
g59
(I00
I01
tp5333
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsb(g4604
g4358
tp5334
sg4824
(g4867
tp5335
sg4604
(tsg1
(g18
g3
NtRp5336
(dp5337
g23
I0
sg16
Nsg314
g3328
sg321
(lp5338
sg21
S'auto_1755'
p5339
sg24
g1
(g25
g3
NtRp5340
(dp5341
g28
(lp5342
sbsg54
g1
(g323
g3
NtRp5343
(dp5344
g290
(lp5345
g5049
ag5218
ag4963
ag4730
ag5229
asg314
g3328
sg327
(lp5346
g5336
asg24
g1
(g25
g3
NtRp5347
(dp5348
g1180
(lp5349
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p5350
asg371
(lp5351
g1573
asbsg375
(dp5352
sg377
g2755
sbsg55
g5067
sb(g4604
tp5353
sg1
(g18
g3
NtRp5354
(dp5355
g23
I0
sg16
Nsg314
g3328
sg321
(lp5356
sg21
S'auto_1753'
p5357
sg24
g1
(g25
g3
NtRp5358
(dp5359
g28
(lp5360
sbsg54
g1
(g323
g3
NtRp5361
(dp5362
g290
(lp5363
g1
(g18
g3
NtRp5364
(dp5365
g23
I0
sg16
Nsg314
g3328
sg321
(lp5366
sg21
S'auto_1767'
p5367
sg24
g1
(g25
g3
NtRp5368
(dp5369
g28
(lp5370
sbsg54
g1
(g323
g3
NtRp5371
(dp5372
g290
(lp5373
g4604
ag4618
asg314
g3328
sg327
(lp5374
g5364
asg24
g1
(g25
g3
NtRp5375
(dp5376
g1180
(lp5377
g2317
asg371
(lp5378
g490
asbsg375
(dp5379
sg377
g2329
sbsg55
g1
(g56
g3
NtRp5380
(dp5381
g59
(I00
tp5382
sg61
g497
sg63
g498
sg66
I00
sg16
Nsbsbag1
(g2334
g3
NtRp5383
(dp5384
g21
S'auto_1752'
p5385
sg23
Nsg24
g1
(g25
g3
NtRp5386
(dp5387
g28
(lp5388
sbsg16
Nsg55
g2341
sg321
(lp5389
sg527
g991
(g498
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp5390
sbasg314
g3328
sg327
(lp5391
g5354
asg24
g1
(g25
g3
NtRp5392
(dp5393
g1180
(lp5394
g2317
asg371
(lp5395
g1573
asbsg375
(dp5396
sg377
g1
(g2351
g3
NtRp5397
(dp5398
g2354
(g2341
tp5399
sbsbsg55
g1
(g56
g3
NtRp5400
(dp5401
g59
(tsg61
g497
sg63
g498
sg66
I00
sg16
Nsbsb(tsg3408
(g4703
g4716
tp5402
sg3558
(g3467
g4358
tp5403
sg3467
(tsg4740
(g4637
g4358
tp5404
sg4505
(g4368
tp5405
sg5383
(tsg5001
(g4604
g4618
tp5406
sg3564
(g4358
g4358
tp5407
sg5364
(g1
(g513
g3
NtRp5408
(dp5409
g21
S'auto_1768'
p5410
sg23
Nsg24
g1
(g25
g3
NtRp5411
(dp5412
g28
(lp5413
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp5414
(dp5415
g59
(tsg61
S'int64'
p5416
sg63
g498
sg66
I00
sg16
Nsbsg527
g101
(g102
(I0
tS'b'
tRp5417
(I1
(tg498
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp5418
sg5198
(g4604
g4358
tp5419
sg4420
(g4604
g4930
tp5420
sg1
(g329
g3
NtRp5421
(dp5422
g23
I0
sg16
Nsg314
g3328
sg321
(lp5423
sg21
S'auto_1795'
p5424
sg24
g1
(g25
g3
NtRp5425
(dp5426
g28
(lp5427
sbsg54
g1
(g323
g3
NtRp5428
(dp5429
g290
(lp5430
g5073
asg314
g3328
sg327
(lp5431
g5421
asg24
g1
(g25
g3
NtRp5432
(dp5433
g1180
(lp5434
g1183
asg371
(lp5435
g373
asbsg375
(dp5436
sg377
g1
(g695
g3
NtRp5437
(dp5438
g16
S'GpuElemwise{tanh,no_inplace}'
p5439
sg698
g819
sg699
(dp5440
sg702
g1907
sg705
g1
(g706
g3
NtRp5441
(dp5442
g709
I0
sg710
(dp5443
sbsg712
I00
sbsbsg55
g1
(g107
g3
NtRp5444
(dp5445
g59
(I00
I00
tp5446
sg111
I2
sg16
Nsg112
I11
sg61
g644
sg114
Nsbsb(g5099
g5112
tp5447
sg3600
(g3467
g4358
tp5448
sg3456
(g3467
tp5449
sg1
(g18
g3
NtRp5450
(dp5451
g23
I0
sg16
Nsg314
g3328
sg321
(lp5452
sg21
S'auto_1813'
p5453
sg24
g1
(g25
g3
NtRp5454
(dp5455
g114
Nsg28
g5214
sbsg54
g1
(g323
g3
NtRp5456
(dp5457
g290
(lp5458
g1
(g18
g3
NtRp5459
(dp5460
g23
I0
sg16
Nsg314
g3328
sg321
(lp5461
sg21
S'auto_1785'
p5462
sg24
g1
(g25
g3
NtRp5463
(dp5464
g468
I00
sg114
Nsg469
g470
sg28
g5055
sbsg54
g1
(g323
g3
NtRp5465
(dp5466
g290
(lp5467
g3467
asg314
g3328
sg327
(lp5468
g5459
asg24
g1
(g25
g3
NtRp5469
(dp5470
g1180
(lp5471
g503
asg371
g5063
sbsg375
(dp5472
sg377
g5065
sbsg55
g5067
sbag5218
ag1
(g18
g3
NtRp5473
(dp5474
g23
I0
sg16
Nsg314
g3328
sg321
(lp5475
sg21
S'auto_1811'
p5476
sg24
g1
(g25
g3
NtRp5477
(dp5478
g114
Nsg28
(lp5479
sbsg54
g1
(g323
g3
NtRp5480
(dp5481
g290
(lp5482
g4651
asg314
g3328
sg327
(lp5483
g5473
asg24
g1
(g25
g3
NtRp5484
(dp5485
g1180
(lp5486
g1331
asg371
(lp5487
g373
asbsg375
(dp5488
sg377
g650
sbsg55
g1
(g56
g3
NtRp5489
(dp5490
g59
(I00
I00
tp5491
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsbag4785
ag5229
asg314
g3328
sg327
(lp5492
g5450
asg24
g1
(g25
g3
NtRp5493
(dp5494
g1180
(lp5495
g1331
asg371
g5244
sbsg375
(dp5496
sg377
g2051
sbsg55
g5067
sb(g3467
tp5497
sg3414
(g4358
g4867
tp5498
sg5218
(tsg4439
(g4604
g4930
tp5499
sg1
(g18
g3
NtRp5500
(dp5501
g23
I0
sg16
Nsg314
g3328
sg321
(lp5502
sg21
S'auto_1751'
p5503
sg24
g1
(g25
g3
NtRp5504
(dp5505
g28
(lp5506
sbsg54
g1
(g323
g3
NtRp5507
(dp5508
g290
(lp5509
g4963
asg314
g3328
sg327
(lp5510
g5500
asg24
g1
(g25
g3
NtRp5511
(dp5512
g1180
(lp5513
g490
asg371
(lp5514
g1573
asbsg375
(dp5515
sg377
g2491
sbsg55
g2492
sb(g1
(g513
g3
NtRp5516
(dp5517
g21
S'auto_1757'
p5518
sg23
Nsg24
g1
(g25
g3
NtRp5519
(dp5520
g28
(lp5521
sg526
Nsbsg16
Nsg55
g1
(g56
g3
NtRp5522
(dp5523
g59
(tsg61
S'int64'
p5524
sg63
g498
sg66
I00
sg16
Nsbsg527
g101
(g102
(I0
tS'b'
tRp5525
(I1
(tg498
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp5526
sg1
(g18
g3
NtRp5527
(dp5528
g23
I0
sg16
Nsg314
g3328
sg321
(lp5529
sg21
S'auto_1741'
p5530
sg24
g1
(g25
g3
NtRp5531
(dp5532
g28
(lp5533
sbsg54
g1
(g323
g3
NtRp5534
(dp5535
g290
(lp5536
g4963
ag4740
asg314
g3328
sg327
(lp5537
g5527
asg24
g1
(g25
g3
NtRp5538
(dp5539
g1180
(lp5540
g1573
asg371
(lp5541
g1804
asbsg375
(dp5542
sg377
g1807
sbsg55
g1
(g56
g3
NtRp5543
(dp5544
g59
(I00
I01
tp5545
sg61
g644
sg63
g65
sg66
I00
sg16
Nsbsb(g4604
g4358
tp5546
sg3493
(tsg4401
(g4604
g4930
tp5547
sg3575
(g4358
tp5548
sg4618
(tsg1
(g329
g3
NtRp5549
(dp5550
g23
I0
sg16
Nsg314
g3328
sg321
(lp5551
sg21
S'auto_1829'
p5552
sg24
g1
(g25
g3
NtRp5553
(dp5554
g28
(lp5555
sbsg54
g1
(g323
g3
NtRp5556
(dp5557
g290
(lp5558
g4881
asg314
g3328
sg327
(lp5559
g5549
asg24
g1
(g25
g3
NtRp5560
(dp5561
g1180
(lp5562
g1498
asg371
(lp5563
g724
asbsg375
(dp5564
sg377
g1
(g961
g3
NtRp5565
(dp5566
g114
Nsbsbsg55
g1
(g107
g3
NtRp5567
(dp5568
g59
(I00
tp5569
sg111
I1
sg16
Nsg112
I11
sg61
g3671
sg114
Nsbsb(g3467
tp5570
sg4213
(g3467
tp5571
sg1
(g18
g3
NtRp5572
(dp5573
g23
I0
sg16
Nsg314
g3328
sg321
(lp5574
sg21
S'auto_1814'
p5575
sg24
g1
(g25
g3
NtRp5576
(dp5577
g28
g5204
sbsg54
g1
(g323
g3
NtRp5578
(dp5579
g290
(lp5580
g5450
asg314
g3328
sg327
(lp5581
g5572
asg24
g1
(g25
g3
NtRp5582
(dp5583
g1180
(lp5584
g724
asg371
g5251
sbsg375
(dp5585
sg377
g5253
sbsg55
g5260
sb(g3467
g4358
tp5586
sg4140
(g4703
g4716
tp5587
sg3338
(g4604
g1
(g18
g3
NtRp5588
(dp5589
g21
S'auto_1738'
p5590
sg23
I0
sg24
g1
(g25
g3
NtRp5591
(dp5592
g28
(lp5593
sbsg16
Nsg54
g1
(g323
g3
NtRp5594
(dp5595
g290
(lp5596
g3331
asg24
g1
(g25
g3
NtRp5597
sg327
(lp5598
g5588
asg377
g1
(g492
g3
NtRp5599
(dp5600
S'i'
I1
sbsbsg55
g495
sbtp5601
sg5208
(g4604
tp5602
sg3551
(g3467
tp5603
sg4067
(g5099
g5112
tp5604
sg3450
(g4703
g4716
tp5605
sg3331
(g4604
g5588
tp5606
sg1
(g329
g3
NtRp5607
(dp5608
g23
I0
sg16
Nsg314
g3328
sg321
(lp5609
sg21
S'auto_1815'
p5610
sg24
g1
(g25
g3
NtRp5611
(dp5612
g28
(lp5613
sbsg54
g1
(g323
g3
NtRp5614
(dp5615
g290
(lp5616
g1
(g18
g3
NtRp5617
(dp5618
g23
I0
sg16
Nsg314
g3328
sg321
(lp5619
sg21
S'auto_1831'
p5620
sg24
g1
(g25
g3
NtRp5621
(dp5622
g28
(lp5623
sbsg54
g1
(g323
g3
NtRp5624
(dp5625
g290
(lp5626
g3558
asg314
g3328
sg327
(lp5627
g5617
asg24
g1
(g25
g3
NtRp5628
(dp5629
g1180
(lp5630
g1498
asg371
(lp5631
g724
asbsg375
(dp5632
sg377
g650
sbsg55
g1
(g56
g3
NtRp5633
(dp5634
g59
(I00
I01
tp5635
sg61
g3671
sg63
g65
sg66
I00
sg16
Nsbsbasg314
g3328
sg327
(lp5636
g5607
asg24
g1
(g25
g3
NtRp5637
(dp5638
g1180
(lp5639
g1498
asg371
(lp5640
g373
asbsg375
(dp5641
sg377
g1
(g961
g3
NtRp5642
(dp5643
g114
Nsbsbsg55
g1
(g107
g3
NtRp5644
(dp5645
g59
(I00
I01
tp5646
sg111
I2
sg16
Nsg112
I11
sg61
g3671
sg114
Nsbsb(g3467
g4358
tp5647
sg4449
(g1
(g18
g3
NtRp5648
(dp5649
g21
S'auto_1735'
p5650
sg23
I0
sg24
g1
(g25
g3
NtRp5651
(dp5652
g28
(lp5653
sbsg16
Nsg54
g1
(g323
g3
NtRp5654
(dp5655
g290
(lp5656
g3344
asg24
g1
(g25
g3
NtRp5657
sg327
(lp5658
g5648
asg377
g1
(g492
g3
NtRp5659
(dp5660
S'i'
I0
sbsbsg55
g495
sbg4930
tp5661
sg4661
(g4703
g4716
tp5662
sg3344
(g5648
g4930
tp5663
sg3394
(g5099
g5112
tp5664
sg5617
(g3467
g4358
tp5665
sg5473
(g4703
g4716
tp5666
sg5151
(g3467
tp5667
sg3369
(g4368
tp5668
sg4269
(g4604
g4358
tp5669
sg1
(g18
g3
NtRp5670
(dp5671
g23
I0
sg16
Nsg314
g3328
sg321
(lp5672
sg21
S'auto_1838'
p5673
sg24
g1
(g25
g3
NtRp5674
(dp5675
g28
(lp5676
sbsg54
g1
(g323
g3
NtRp5677
(dp5678
g290
(lp5679
g5229
asg314
g3328
sg327
(lp5680
g5670
asg24
g1
(g25
g3
NtRp5681
(dp5682
g661
g1
(g323
g3
NtRp5683
(dp5684
g290
(lp5685
g1
(g665
g3
NtRp5686
(dp5687
g21
S'auto_1847'
p5688
sg23
Nsg24
g1
(g25
g3
NtRp5689
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp5690
sg327
(lp5691
g1
(g665
g3
NtRp5692
(dp5693
g21
S'auto_1848'
p5694
sg23
I0
sg24
g1
(g25
g3
NtRp5695
sg16
Nsg54
g5683
sg55
g2637
sbasg377
g2640
sbsg1180
(lp5696
g2652
asg371
(lp5697
g1331
asbsg375
(dp5698
sg377
g2655
sbsg55
g3541
sb(tsg4982
(g4604
g4618
tp5699
sg5263
(g4358
g4358
tp5700
sg1
(g18
g3
NtRp5701
(dp5702
g23
I0
sg16
Nsg314
g3328
sg321
(lp5703
sg21
S'auto_1835'
p5704
sg24
g1
(g25
g3
NtRp5705
(dp5706
g28
(lp5707
sbsg54
g1
(g323
g3
NtRp5708
(dp5709
g290
(lp5710
g5218
asg314
g3328
sg327
(lp5711
g5701
asg24
g1
(g25
g3
NtRp5712
(dp5713
g661
g1
(g323
g3
NtRp5714
(dp5715
g290
(lp5716
g1
(g665
g3
NtRp5717
(dp5718
g21
S'auto_1844'
p5719
sg23
Nsg24
g1
(g25
g3
NtRp5720
sg16
Nsg54
Nsg55
g671
sbasg24
g1
(g25
g3
NtRp5721
sg327
(lp5722
g1
(g665
g3
NtRp5723
(dp5724
g21
S'auto_1845'
p5725
sg23
I0
sg24
g1
(g25
g3
NtRp5726
sg16
Nsg54
g5714
sg55
g2637
sbasg377
g2640
sbsg1180
(lp5727
g2652
asg371
(lp5728
g1331
asbsg375
(dp5729
sg377
g2655
sbsg55
g3495
sb(tsg3400
(g5127
g4618
tp5730
sg3504
(g4637
tp5731
sg5229
(tsg5459
(g3467
tp5732
sg3425
(g4867
tp5733
sg5282
(g4358
tp5734
sg4963
(g4604
g4618
tp5735
sg1
(g18
g3
NtRp5736
(dp5737
g23
I0
sg16
Nsg314
g3328
sg321
(lp5738
sg21
S'auto_1770'
p5739
sg24
g1
(g25
g3
NtRp5740
(dp5741
g28
(lp5742
sbsg54
g1
(g323
g3
NtRp5743
(dp5744
g290
(lp5745
g3338
asg314
g3328
sg327
(lp5746
g5736
asg24
g1
(g25
g3
NtRp5747
(dp5748
g1180
(lp5749
g1498
asg371
(lp5750
g373
asbsg375
(dp5751
sg377
g650
sbsg55
g1
(g56
g3
NtRp5752
(dp5753
g59
(I00
I00
tp5754
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsb(g4604
g5588
tp5755
sg3352
(g5099
g5112
tp5756
ssg2968
g4358
sg2969
(dp5757
g4651
g146
((ltRp5758
sg5141
g146
((ltRp5759
sg4358
g146
((lp5760
g3358
ag3515
ag4805
ag3564
ag4944
ag4239
ag3607
ag3575
ag4486
ag5179
ag4740
ag5282
ag3600
ag3414
ag5527
ag3558
ag4269
ag5572
ag5607
ag5617
ag5198
ag5263
atRp5761
sg4368
g146
((lp5762
g3358
ag3369
ag4505
ag4486
atRp5763
sg4944
g146
((ltRp5764
sg4213
g146
((ltRp5765
sg3607
g146
((ltRp5766
sg4703
g146
((lp5767
g4140
ag4651
ag4661
ag5473
ag3450
ag3408
atRp5768
sg1
(g18
g3
NtRp5769
(dp5770
g21
S'auto_1902'
p5771
sg23
I0
sg24
g1
(g25
g3
NtRp5772
(dp5773
g28
(lp5774
sbsg16
Nsg54
g1
(g323
g3
NtRp5775
(dp5776
g290
(lp5777
g3551
asg24
g1
(g25
g3
NtRp5778
sg327
(lp5779
g5769
asg377
g1
(g492
g3
NtRp5780
(dp5781
S'i'
I0
sbsbsg55
g495
sbg146
((lp5782
g3551
atRp5783
sg5500
g146
((ltRp5784
sg5179
g146
((ltRp5785
sg5336
g146
((ltRp5786
sg5112
g146
((lp5787
g5073
ag4067
ag3352
ag3394
ag5421
atRp5788
sg1
(g18
g3
NtRp5789
(dp5790
g21
S'auto_1841'
p5791
sg23
I0
sg24
g1
(g25
g3
NtRp5792
(dp5793
g28
(lp5794
sbsg16
Nsg54
g1
(g323
g3
NtRp5795
(dp5796
g290
(lp5797
g4213
asg24
g1
(g25
g3
NtRp5798
sg327
(lp5799
g5789
asg377
g1
(g492
g3
NtRp5800
(dp5801
S'i'
I0
sbsbsg55
g495
sbg146
((lp5802
g4881
ag4213
atRp5803
sg4618
g146
((lp5804
g4382
ag4982
ag4566
ag3400
ag5001
ag4963
atRp5805
sg5450
g146
((ltRp5806
sg4867
g146
((lp5807
g3425
ag3414
ag4824
ag4805
atRp5808
sg5099
g146
((lp5809
g5073
ag4067
ag3352
ag3394
ag5421
atRp5810
sg5701
g146
((ltRp5811
sg4140
g146
((ltRp5812
sg5670
g146
((ltRp5813
sg4239
g146
((ltRp5814
sg5648
g146
((lp5815
g3344
ag4449
atRp5816
sg5421
g146
((ltRp5817
sg5527
g146
((ltRp5818
sg5127
g146
((lp5819
g3400
ag4566
atRp5820
sg5607
g146
((ltRp5821
sg4930
g146
((lp5822
g3344
ag4439
ag4401
ag4449
ag4901
ag4420
atRp5823
sg4901
g146
((ltRp5824
sg4067
g146
((ltRp5825
sg4382
g146
((ltRp5826
sg4637
g146
((lp5827
g4730
ag3504
ag4785
ag3515
ag4740
atRp5828
sg4716
g146
((lp5829
g4140
ag4651
ag4661
ag5473
ag3450
ag3408
atRp5830
sg5516
g146
((lp5831
g5500
atRp5832
sg4269
g146
((ltRp5833
sg3467
g146
((lp5834
g3456
ag5617
ag3551
ag5549
ag3558
ag5459
ag5607
ag4881
ag5151
ag4213
ag5572
ag4239
ag3600
ag3607
ag5450
ag5141
atRp5835
sg5549
g146
((ltRp5836
sg5354
g146
((ltRp5837
sg5408
g146
((lp5838
g5364
atRp5839
sg4604
g146
((lp5840
g4901
ag4382
ag4963
ag5336
ag5179
ag5198
ag5527
ag4269
ag4982
ag4401
ag3607
ag4944
ag5001
ag3338
ag5208
ag3331
ag4439
ag4420
ag5736
ag5049
atRp5841
sg5459
g146
((ltRp5842
sg5588
g146
((lp5843
g3338
ag3331
ag5736
atRp5844
sg5736
g146
((ltRp5845
sg5572
g146
((ltRp5846
ssbsg3060
g146
((lp5847
g3366
ag3475
ag3397
ag3422
ag3355
ag3603
ag3341
ag3572
ag3334
ag3464
ag3554
ag3561
ag3411
ag3453
ag3512
atRp5848
sg3063
g146
((lp5849
g3358
ag3515
ag3394
ag3575
ag3607
ag3456
ag3400
ag3450
ag3564
ag3331
ag3600
ag3338
ag3408
ag3493
ag3539
ag3558
ag3551
ag3344
ag3369
ag3467
ag3504
ag3425
ag3414
ag3352
atRp5850
sg3066
(lp5851
g1
(g3068
g3
NtRp5852
(dp5853
g3071
I00
sg3072
g146
((ltRp5854
sba(itheano.compile.function_module
Supervisor
p5855
(dp5856
g3076
(lp5857
g3331
ag3344
ag3369
ag3400
ag3425
ag3515
ag3575
asbag1
(g3078
g3
NtRp5858
ag3898
ag4354
ag3925
asbsg327
g1
(g3080
g3
NtRp5859
(dp5860
g300
g1
(g18
g3
NtRp5861
(dp5862
g21
S'auto_1704'
p5863
sg23
I0
sg24
g1
(g25
g3
NtRp5864
(dp5865
g28
g5185
sbsg16
Nsg54
g1
(g323
g3
NtRp5866
(dp5867
g290
(lp5868
g1
(g18
g3
NtRp5869
(dp5870
g21
S'auto_1701'
p5871
sg23
I0
sg24
g1
(g25
g3
NtRp5872
(dp5873
g28
g4950
sbsg16
Nsg54
g1
(g323
g3
NtRp5874
(dp5875
g290
(lp5876
g1
(g18
g3
NtRp5877
(dp5878
g21
S'auto_1699'
p5879
sg23
I0
sg24
g1
(g25
g3
NtRp5880
(dp5881
g28
g4969
sbsg16
Nsg54
g1
(g323
g3
NtRp5882
(dp5883
g290
(lp5884
g1
(g18
g3
NtRp5885
(dp5886
g21
S'auto_1698'
p5887
sg23
I0
sg24
g1
(g25
g3
NtRp5888
(dp5889
g28
g4988
sbsg16
Nsg54
g1
(g323
g3
NtRp5890
(dp5891
g290
(lp5892
g1
(g18
g3
NtRp5893
(dp5894
g21
S'auto_1695'
p5895
sg23
I0
sg24
g1
(g25
g3
NtRp5896
(dp5897
g28
g4388
sbsg16
Nsg54
g1
(g323
g3
NtRp5898
(dp5899
g290
(lp5900
g1
(g18
g3
NtRp5901
(dp5902
g21
S'auto_1693'
p5903
sg23
I0
sg24
g1
(g25
g3
NtRp5904
(dp5905
g28
g4407
sbsg16
Nsg54
g1
(g323
g3
NtRp5906
(dp5907
g290
(lp5908
g1
(g18
g3
NtRp5909
(dp5910
g21
S'auto_1692'
p5911
sg23
I0
sg24
g1
(g25
g3
NtRp5912
(dp5913
g28
g4426
sbsg16
Nsg54
g1
(g323
g3
NtRp5914
(dp5915
g290
(lp5916
g1
(g18
g3
NtRp5917
(dp5918
g21
S'auto_1689'
p5919
sg23
I0
sg24
g1
(g25
g3
NtRp5920
(dp5921
g28
g4907
sbsg16
Nsg54
g1
(g323
g3
NtRp5922
(dp5923
g290
(lp5924
g19
ag1
(g18
g3
NtRp5925
(dp5926
g21
S'auto_1688'
p5927
sg23
I0
sg24
g1
(g25
g3
NtRp5928
(dp5929
g28
g4455
sbsg16
Nsg54
g1
(g323
g3
NtRp5930
(dp5931
g290
(lp5932
g122
asg24
g1
(g25
g3
NtRp5933
sg327
(lp5934
g5925
asg377
g650
sbsg55
g4474
sbasg24
g1
(g25
g3
NtRp5935
sg327
(lp5936
g5917
asg377
g2139
sbsg55
g4926
sbag1
(g18
g3
NtRp5937
(dp5938
g21
S'auto_1691'
p5939
sg23
I0
sg24
g1
(g25
g3
NtRp5940
(dp5941
g28
g4492
sbsg16
Nsg54
g1
(g323
g3
NtRp5942
(dp5943
g290
(lp5944
g1
(g18
g3
NtRp5945
(dp5946
g21
S'auto_1690'
p5947
sg23
I0
sg24
g1
(g25
g3
NtRp5948
(dp5949
g28
g4511
sbsg16
Nsg54
g1
(g323
g3
NtRp5950
(dp5951
g290
(lp5952
g71
asg24
g1
(g25
g3
NtRp5953
sg327
(lp5954
g5945
asg377
g650
sbsg55
g4530
sbasg24
g1
(g25
g3
NtRp5955
sg327
(lp5956
g5937
asg377
g4538
sbsg55
g4545
sbasg24
g1
(g25
g3
NtRp5957
sg327
(lp5958
g5909
asg377
g1883
sbsg55
g4554
sbasg24
g1
(g25
g3
NtRp5959
sg327
(lp5960
g5901
asg377
g1903
sbsg55
g4563
sbag1
(g18
g3
NtRp5961
(dp5962
g21
S'auto_1694'
p5963
sg23
I0
sg24
g1
(g25
g3
NtRp5964
(dp5965
g28
g4572
sbsg16
Nsg54
g1
(g323
g3
NtRp5966
(dp5967
g290
(lp5968
g188
asg24
g1
(g25
g3
NtRp5969
sg327
(lp5970
g5961
asg377
g650
sbsg55
g4591
sbasg24
g1
(g25
g3
NtRp5971
sg327
(lp5972
g5893
asg377
g2139
sbsg55
g4600
sbag1
(g18
g3
NtRp5973
(dp5974
g21
S'auto_1697'
p5975
sg23
I0
sg24
g1
(g25
g3
NtRp5976
(dp5977
g28
g4811
sbsg16
Nsg54
g1
(g323
g3
NtRp5978
(dp5979
g290
(lp5980
g1
(g18
g3
NtRp5981
(dp5982
g21
S'auto_1696'
p5983
sg23
I0
sg24
g1
(g25
g3
NtRp5984
(dp5985
g28
g4830
sbsg16
Nsg54
g1
(g323
g3
NtRp5986
(dp5987
g290
(lp5988
g161
asg24
g1
(g25
g3
NtRp5989
sg327
(lp5990
g5981
asg377
g650
sbsg55
g4849
sbasg24
g1
(g25
g3
NtRp5991
sg327
(lp5992
g5973
asg377
g4857
sbsg55
g4864
sbasg24
g1
(g25
g3
NtRp5993
sg327
(lp5994
g5885
asg377
g1883
sbsg55
g5026
sbasg24
g1
(g25
g3
NtRp5995
sg327
(lp5996
g5877
asg377
g1903
sbsg55
g5035
sbag1
(g18
g3
NtRp5997
(dp5998
g21
S'auto_1700'
p5999
sg23
I0
sg24
g1
(g25
g3
NtRp6000
(dp6001
g28
g4746
sbsg16
Nsg54
g1
(g323
g3
NtRp6002
(dp6003
g290
(lp6004
g249
asg24
g1
(g25
g3
NtRp6005
sg327
(lp6006
g5997
asg377
g650
sbsg55
g4765
sbasg24
g1
(g25
g3
NtRp6007
sg327
(lp6008
g5869
asg377
g2139
sbsg55
g5044
sbag1
(g18
g3
NtRp6009
(dp6010
g21
S'auto_1703'
p6011
sg23
I0
sg24
g1
(g25
g3
NtRp6012
(dp6013
g28
g5269
sbsg16
Nsg54
g1
(g323
g3
NtRp6014
(dp6015
g290
(lp6016
g1
(g18
g3
NtRp6017
(dp6018
g21
S'auto_1702'
p6019
sg23
I0
sg24
g1
(g25
g3
NtRp6020
(dp6021
g28
g5288
sbsg16
Nsg54
g1
(g323
g3
NtRp6022
(dp6023
g290
(lp6024
g221
asg24
g1
(g25
g3
NtRp6025
sg327
(lp6026
g6017
asg377
g650
sbsg55
g5307
sbasg24
g1
(g25
g3
NtRp6027
sg327
(lp6028
g6009
asg377
g5315
sbsg55
g5322
sbasg24
g1
(g25
g3
NtRp6029
sg327
(lp6030
g5861
asg377
g1883
sbsg55
g5331
sbsg297
I00
sbsg3253
Nsg3254
I00
sg3255
g3257
stRp6031
(lp6032
g1
(g95
g3
NtRp6033
(dp6034
g3293
I0
sg16
g53
sg3294
I01
sg98
(lp6035
Nasg298
I00
sg105
I00
sg106
I00
sg55
g57
sg115
I01
sbag1
(g95
g3
NtRp6036
(dp6037
g3293
I0
sg16
S'W'
sg3294
I00
sg98
g139
sg298
I01
sg105
I00
sg106
I00
sg55
g142
sg115
Nsbag1
(g95
g3
NtRp6038
(dp6039
g3293
I0
sg16
S'b'
sg3294
I00
sg98
g99
sg298
I01
sg105
I00
sg106
I00
sg55
g108
sg115
Nsbag1
(g95
g3
NtRp6040
(dp6041
g3293
I0
sg16
S'W'
sg3294
I00
sg98
g205
sg298
I01
sg105
I00
sg106
I00
sg55
g208
sg115
Nsbag1
(g95
g3
NtRp6042
(dp6043
g3293
I0
sg16
S'b'
sg3294
I00
sg98
g178
sg298
I01
sg105
I00
sg106
I00
sg55
g181
sg115
Nsbag1
(g95
g3
NtRp6044
(dp6045
g3293
I0
sg16
S'W'
sg3294
I00
sg98
g266
sg298
I01
sg105
I00
sg106
I00
sg55
g269
sg115
Nsbag1
(g95
g3
NtRp6046
(dp6047
g3293
I0
sg16
S'b'
sg3294
I00
sg98
g238
sg298
I01
sg105
I00
sg106
I00
sg55
g241
sg115
Nsba(lp6048
Nag141
ag104
ag207
ag180
ag268
ag240
atRp6049
sS'stochastic'
p6050
I00
sb.