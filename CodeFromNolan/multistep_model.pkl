ccopy_reg
_reconstructor
p1
(cmachine_learning_acds.regressors.nn.mlp_network
MLPNetwork
p2
c__builtin__
object
p3
NtRp4
(dp5
S'layers'
p6
(lp7
g1
(clasagne.layers.input
InputLayer
p8
g3
NtRp9
(dp10
S'shape'
p11
(NI3
tp12
sS'params'
p13
ccollections
OrderedDict
p14
((ltRp15
sS'name'
p16
NsS'input_var'
p17
g1
(ctheano.tensor.var
TensorVariable
p18
g3
NtRp19
(dp20
S'auto_name'
p21
S'auto_1307'
p22
sS'index'
p23
NsS'tag'
p24
g1
(ctheano.gof.utils
scratchpad
p25
g3
NtRp26
(dp27
S'trace'
p28
(lp29
(lp30
(S'/home/nolan/anaconda2/lib/python2.7/site-packages/IPython/core/shellapp.py'
p31
I273
S'init_code'
p32
S'self._run_cmd_line_code()'
tp33
a(g31
I394
S'_run_cmd_line_code'
p34
S'self._exec_file(fname, shell_futures=True)'
tp35
a(g31
I328
S'_exec_file'
p36
S'raise_exceptions=True)'
tp37
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/IPython/core/interactiveshell.py'
p38
I2481
S'safe_execfile'
p39
S"self.compile if kw['shell_futures'] else None)"
tp40
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/IPython/utils/py3compat.py'
p41
I292
S'execfile'
p42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp43
a(S'/home/nolan/Downloads/InvertedPendulumData/main.py'
p44
I23
S'<module>'
p45
S'layers = [layer_functions.inputlayer(STATE_DIM+CONTROL_DIM),'
tp46
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/layers/layer_functions.py'
p47
I11
S'inputlayer'
p48
S'return lasagne_layers.InputLayer(shape=(None, input_dim), **kwargs)'
tp49
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/input.py'
p50
I64
S'__init__'
p51
S'input_var = input_var_type(var_name)'
tp52
aasbsg16
S'input'
p53
sS'owner'
p54
NsS'type'
p55
g1
(ctheano.tensor.type
TensorType
p56
g3
NtRp57
(dp58
S'broadcastable'
p59
(I00
I00
tp60
sS'dtype'
p61
S'float32'
p62
sS'numpy_dtype'
p63
cnumpy
dtype
p64
(S'f4'
I0
I1
tRp65
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p66
I00
sg16
Nsbsbsbag1
(clasagne.layers.dense
DenseLayer
p67
g3
NtRp68
(dp69
S'b'
g1
(ctheano.gpuarray.type
GpuArraySharedVariable
p70
g3
NtRp71
(dp72
g21
S'auto_1309'
p73
sg23
Nsg24
g1
(g25
g3
NtRp74
(dp75
g28
(lp76
(lp77
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp78
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp79
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp80
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/mlp_network.py'
p81
I35
g51
S'x = layer(self.layers)'
tp82
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/layers/layer_functions.py'
p83
I35
S'<lambda>'
p84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp85
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/dense.py'
p86
I108
g51
S'regularizable=False)'
tp87
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/base.py'
p88
I234
S'add_param'
p89
S'param = utils.create_param(spec, shape, name)'
tp90
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/utils.py'
p91
I381
S'create_param'
p92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp93
aasbsS'container'
p94
g1
(ctheano.gof.link
Container
p95
g3
NtRp96
(dp97
g16
NsS'storage'
p98
(lp99
ctheano.gpuarray.type
GpuArray_unpickler
p100
(cnumpy.core.multiarray
_reconstruct
p101
(cnumpy
ndarray
p102
(I0
tS'b'
tRp103
(I1
(I8
tg64
(S'f4'
I0
I1
tRp104
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x81M\x9f?\x10?2@0\xe5\x1d\xbfz\x1a\xa0\xbeYoU=\xc1\x8f\x83>\xb7%\xce\xbe\xf1Mn\xbf'
tbNtRp105
asS'strict'
p106
I00
sS'readonly'
p107
I00
sg55
g1
(ctheano.gpuarray.type
GpuArrayType
p108
g3
NtRp109
(dp110
g59
(I00
tp111
sS'ndim'
p112
I1
sg16
NsS'typecode'
p113
I11
sS'context_name'
p114
Nsg61
S'float32'
p115
sbsS'allow_downcast'
p116
Nsbsg16
S'b'
sg54
Nsg55
g109
sbsg16
NsS'nonlinearity'
p117
clasagne.nonlinearities
tanh
p118
sS'num_leading_axes'
p119
I1
sS'input_shape'
p120
g12
sS'input_layer'
p121
g9
sg13
g14
((lp122
(lp123
g1
(g70
g3
NtRp124
(dp125
g21
S'auto_1308'
p126
sg23
Nsg24
g1
(g25
g3
NtRp127
(dp128
g28
(lp129
(lp130
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp131
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp132
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp133
a(g81
I35
g51
S'x = layer(self.layers)'
tp134
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp135
a(g86
I103
g51
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp136
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp137
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp138
aasbsg94
g1
(g95
g3
NtRp139
(dp140
g16
Nsg98
(lp141
g100
(g101
(g102
(I0
tS'b'
tRp142
(I1
(I3
I8
tg104
I00
S"\x12K\xbb?vO\x90\xbf\xce\x83\xe4\xbe\xc6CC>\x17[\x86=P\xaf'>t\x87\x8e?(@@?\xc1\x88N\xbd\xc6\x0f\x9b\xbd#\x8dT\xbfh\x10\xcc\xbd\xec\xe3^\xbf/E\x9f\xbe\x98\x92\xa8\xbd9\xc1\xdf\xbe\x93\xd8\x8d\xbd\xc5\x01\x17?,\x9a\x81\xc0\x1e\x10\xf7\xbc\xb2\xce\x82\xc0e7\x16\xbe\xe0\xbb\xea\xbc9\xdc\x16\xc0"
tbNtRp143
asg106
I00
sg107
I00
sg55
g1
(g108
g3
NtRp144
(dp145
g59
(I00
I00
tp146
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
S'float32'
p147
sbsg116
Nsbsg16
S'W'
sg54
Nsg55
g144
sbac__builtin__
set
p148
((lp149
S'trainable'
p150
aS'regularizable'
p151
atRp152
aa(lp153
g71
ag148
((lp154
g150
atRp155
aatRp156
sS'num_units'
p157
I8
sS'W'
g124
sS'get_output_kwargs'
p158
(lp159
sbag1
(g67
g3
NtRp160
(dp161
S'b'
g1
(g70
g3
NtRp162
(dp163
g21
S'auto_1311'
p164
sg23
Nsg24
g1
(g25
g3
NtRp165
(dp166
g28
(lp167
(lp168
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp169
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp170
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp171
a(g81
I35
g51
S'x = layer(self.layers)'
tp172
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp173
a(g86
I108
g51
S'regularizable=False)'
tp174
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp175
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp176
aasbsg94
g1
(g95
g3
NtRp177
(dp178
g16
Nsg98
(lp179
g100
(g101
(g102
(I0
tS'b'
tRp180
(I1
(I8
tg104
I00
S'\xa3\x9d\xbe\xbfWZ;@\xc9\xdc\x84\xbf\xc1\x98\xed?\x96\x8a\x85@\xde{o?K\x95\x8f\xbf\xdd\xf4N\xc0'
tbNtRp181
asg106
I00
sg107
I00
sg55
g1
(g108
g3
NtRp182
(dp183
g59
(I00
tp184
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
S'float32'
p185
sbsg116
Nsbsg16
S'b'
sg54
Nsg55
g182
sbsg16
Nsg117
g118
sg119
I1
sg120
(NI8
tp186
sg121
g68
sg13
g14
((lp187
(lp188
g1
(g70
g3
NtRp189
(dp190
g21
S'auto_1310'
p191
sg23
Nsg24
g1
(g25
g3
NtRp192
(dp193
g28
(lp194
(lp195
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp196
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp197
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp198
a(g81
I35
g51
S'x = layer(self.layers)'
tp199
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp200
a(g86
I103
g51
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp201
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp202
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp203
aasbsg94
g1
(g95
g3
NtRp204
(dp205
g16
Nsg98
(lp206
g100
(g101
(g102
(I0
tS'b'
tRp207
(I1
(I8
I8
tg104
I00
S'\xf5\xa3\x9f<\xc2a\xd9?>\xca\x8c\xbc)\xa3{\xbf\x15\xa95\xbf\xb0\xd6\x8b\xbe\x105)\xc0\xb5\x13@?\xc3\x8c\xb5@}j-\xbfw\x9a\xb4\xbe$\xac\x9b\xbd=\xe9\xef\xc0b_\xb8@\xbe\x0fJ@\xf9\xa7.@\xda\xf1\x16@\xd3\xce\xd2?t\xb2\x00?\xe3 \x8c\xbfkH\x0c@x\xd4E?\xdd\xc5\x02@\x1d?\xdf?\x10/P@\x80a\xc0@\xc0\xe2\x19@\x00\xf7\xe5@Jvk\xc1\x12\xb2\xe0@ tT\xbf7\r\x8b\xc0b\x05\x02\xc0Z\x83\x80\xc0C[\x98?\x15\x02\xe2\xbc\xc570@\xf6\xa6\x9e\xbd\xad\x08\xb4\xbd\x03\x13?\xbe\xe5\xdb\xf3?tb\xc9>=6\x82=Z\x80#\xc0f\x19\xc8\xc0\x8eA\xa6\xbf\x87\x17@\xc0\x92\x10\x98@4\xc6u\xbf%\x03\n\xc0cL\x8c\xbf\xfb\xad\xe3\xbf\xfb\x07\xe6?;>\xc3?\xce|\x99>\xa5q\x0c\xbd%\xd7\x85@"\x99\xa5;\xb7<\xa3:\xc1o\t?\x03o\xd0@\xcc34?J=\x06?$\xba\x14?'
tbNtRp208
asg106
I00
sg107
I00
sg55
g1
(g108
g3
NtRp209
(dp210
g59
(I00
I00
tp211
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
S'float32'
p212
sbsg116
Nsbsg16
S'W'
sg54
Nsg55
g209
sbag148
((lp213
g150
ag151
atRp214
aa(lp215
g162
ag148
((lp216
g150
atRp217
aatRp218
sg157
I8
sS'W'
g189
sg158
(lp219
sbag1
(g67
g3
NtRp220
(dp221
S'b'
g1
(g70
g3
NtRp222
(dp223
g21
S'auto_1313'
p224
sg23
Nsg24
g1
(g25
g3
NtRp225
(dp226
g28
(lp227
(lp228
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp229
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp230
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp231
a(g81
I35
g51
S'x = layer(self.layers)'
tp232
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp233
a(g86
I108
g51
S'regularizable=False)'
tp234
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp235
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp236
aasbsg94
g1
(g95
g3
NtRp237
(dp238
g16
Nsg98
(lp239
g100
(g101
(g102
(I0
tS'b'
tRp240
(I1
(I1
tg104
I00
S'\xeaT\xd2@'
tbNtRp241
asg106
I00
sg107
I00
sg55
g1
(g108
g3
NtRp242
(dp243
g59
(I01
tp244
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
S'float32'
p245
sbsg116
Nsbsg16
S'b'
sg54
Nsg55
g242
sbsg16
Nsg117
clasagne.nonlinearities
linear
p246
sg119
I1
sg120
(NI8
tp247
sg121
g160
sg13
g14
((lp248
(lp249
g1
(g70
g3
NtRp250
(dp251
g21
S'auto_1312'
p252
sg23
Nsg24
g1
(g25
g3
NtRp253
(dp254
g28
(lp255
(lp256
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp257
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp258
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp259
a(g81
I35
g51
S'x = layer(self.layers)'
tp260
a(g83
I35
g84
S'return lambda layers_lst: lasagne_layers.DenseLayer(layers_lst[-1], n_units, **kwargs)'
tp261
a(g86
I103
g51
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp262
a(g88
I234
g89
S'param = utils.create_param(spec, shape, name)'
tp263
a(g91
I381
g92
S'spec = theano.shared(spec, broadcastable=bcast)'
tp264
aasbsg94
g1
(g95
g3
NtRp265
(dp266
g16
Nsg98
(lp267
g100
(g101
(g102
(I0
tS'b'
tRp268
(I1
(I8
I1
tg104
I00
S'\x83b#\xc1Yte\xc0\xa1\xaf\x12AG\xba4A\x03aX\xbfD\xff\xab@K7\x05@\xef\xed\x05A'
tbNtRp269
asg106
I00
sg107
I00
sg55
g1
(g108
g3
NtRp270
(dp271
g59
(I00
I01
tp272
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
S'float32'
p273
sbsg116
Nsbsg16
S'W'
sg54
Nsg55
g270
sbag148
((lp274
g150
ag151
atRp275
aa(lp276
g222
ag148
((lp277
g150
atRp278
aatRp279
sg157
I1
sS'W'
g250
sg158
(lp280
sbasS'pred_role'
p281
S''
sS'network'
p282
g220
sS'allow_input_downcast'
p283
I01
sS'_predict'
p284
ctheano.compile.function_module
_constructor_Function
p285
(ctheano.compile.function_module
_constructor_FunctionMaker
p286
((dp287
S'profile'
p288
NsS'function_builder'
p289
ctheano.compile.function_module
Function
p290
sS'inputs'
p291
(lp292
g1
(ctheano.compile.io
In
p293
g3
NtRp294
(dp295
g16
g53
sS'borrow'
p296
NsS'value'
p297
NsS'update'
p298
Nsg106
I00
sS'implicit'
p299
I00
sS'mutable'
p300
I00
sS'variable'
p301
g19
sS'shared'
p302
I00
sg116
I01
sbag1
(g293
g3
NtRp303
(dp304
g16
S'W'
sg296
I01
sg297
g139
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g124
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp305
(dp306
g16
S'b'
sg296
I01
sg297
g96
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g71
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp307
(dp308
g16
S'W'
sg296
I01
sg297
g204
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g189
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp309
(dp310
g16
S'b'
sg296
I01
sg297
g177
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g162
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp311
(dp312
g16
S'W'
sg296
I01
sg297
g265
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g250
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp313
(dp314
g16
S'b'
sg296
I01
sg297
g237
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g222
sg302
I01
sg116
NsbasS'fgraph'
p315
g1
(ctheano.gof.fg
FunctionGraph
p316
g3
NtRp317
(dp318
g288
Nsg291
(lp319
g1
(g18
g3
NtRp320
(dp321
g23
Nsg16
g53
sg315
g317
sS'clients'
p322
(lp323
(g1
(ctheano.gof.graph
Apply
p324
g3
NtRp325
(dp326
g291
(lp327
g320
asg24
g1
(g25
g3
NtRp328
(dp329
S'imported_by'
p330
(lp331
S'GraphToGPU'
p332
aS'init'
p333
ag333
asbsS'deps'
p334
(dp335
sg315
g317
sS'outputs'
p336
(lp337
g1
(ctheano.gpuarray.type
GpuArrayVariable
p338
g3
NtRp339
(dp340
g23
I0
sg16
Nsg315
g317
sg322
(lp341
(g1
(g324
g3
NtRp342
(dp343
g291
(lp344
g339
ag1
(g70
g3
NtRp345
(dp346
g23
Nsg94
g139
sg16
S'W'
sg315
g317
sg322
(lp347
(g342
I1
tp348
asg21
S'auto_1362'
p349
sg24
g1
(g25
g3
NtRp350
(dp351
g28
g129
sbsg54
Nsg55
g144
sbasg24
g1
(g25
g3
NtRp352
(dp353
g330
(lp354
g332
ag333
ag333
asbsg334
(dp355
sg315
g317
sg336
(lp356
g1
(g338
g3
NtRp357
(dp358
g23
I0
sg16
Nsg315
g317
sg322
(lp359
(g1
(g324
g3
NtRp360
(dp361
g291
(lp362
g357
ag1
(g338
g3
NtRp363
(dp364
g23
I0
sg16
Nsg315
g317
sg322
(lp365
(g360
I1
tp366
asg21
S'auto_1439'
p367
sg24
g1
(g25
g3
NtRp368
(dp369
g28
(lp370
sbsg54
g1
(g324
g3
NtRp371
(dp372
g291
(lp373
g1
(g70
g3
NtRp374
(dp375
g23
Nsg94
g96
sg16
S'b'
sg315
g317
sg322
(lp376
(g371
I0
tp377
asg21
S'auto_1363'
p378
sg24
g1
(g25
g3
NtRp379
(dp380
g28
g76
sbsg54
Nsg55
g109
sbasg24
g1
(g25
g3
NtRp381
(dp382
g330
(lp383
g332
ag333
ag333
asbsg334
(dp384
sg315
g317
sg336
(lp385
g363
asS'op'
p386
g1
(ctheano.gpuarray.elemwise
GpuDimShuffle
p387
g3
NtRp388
(dp389
S'drop'
p390
(lp391
sS'shuffle'
p392
(lp393
I0
asS'augment'
p394
(lp395
I0
asS'view_map'
p396
(dp397
I0
(lp398
I0
assS'input_broadcastable'
p399
(I00
tp400
sS'inplace'
p401
I01
sS'new_order'
p402
(S'x'
I0
tp403
sbsbsg55
g1
(g108
g3
NtRp404
(dp405
g59
(I01
I00
tp406
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g115
sbsbasg24
g1
(g25
g3
NtRp407
(dp408
S'fake_node'
p409
g1
(g324
g3
NtRp410
(dp411
g291
(lp412
g1
(ctheano.scalar.basic
ScalarVariable
p413
g3
NtRp414
(dp415
g21
S'auto_65736'
p416
sg23
Nsg24
g1
(g25
g3
NtRp417
sg16
Nsg54
Nsg55
g1
(ctheano.scalar.basic
Scalar
p418
g3
NtRp419
(dp420
g61
S'float32'
p421
sbsbag1
(g413
g3
NtRp422
(dp423
g21
S'auto_65737'
p424
sg23
Nsg24
g1
(g25
g3
NtRp425
sg16
Nsg54
Nsg55
g419
sbasg24
g1
(g25
g3
NtRp426
sg336
(lp427
g1
(g413
g3
NtRp428
(dp429
g21
S'auto_65738'
p430
sg23
I0
sg24
g1
(g25
g3
NtRp431
sg16
Nsg54
g410
sg55
g419
sbasg386
g1
(ctheano.scalar.basic
Composite
p432
g3
NtRp433
(dp434
g291
(lp435
g1
(g413
g3
NtRp436
(dp437
g21
S'auto_1559'
p438
sg23
Nsg24
g1
(g25
g3
NtRp439
sg16
Nsg54
Nsg55
g1
(g418
g3
NtRp440
(dp441
g61
g421
sbsbag1
(g413
g3
NtRp442
(dp443
g21
S'auto_1560'
p444
sg23
Nsg24
g1
(g25
g3
NtRp445
sg16
Nsg54
Nsg55
g440
sbasS'nin'
p446
I2
sg16
NsS'inputs_type'
p447
(g440
g440
tp448
sg336
(lp449
g1
(g413
g3
NtRp450
(dp451
g21
S'auto_1562'
p452
sg23
I0
sg24
g1
(g25
g3
NtRp453
(dp454
g28
(lp455
sbsg16
Nsg54
g1
(g324
g3
NtRp456
(dp457
g291
(lp458
g1
(g413
g3
NtRp459
(dp460
g21
S'auto_1561'
p461
sg23
I0
sg24
g1
(g25
g3
NtRp462
(dp463
g28
(lp464
sbsg16
Nsg54
g1
(g324
g3
NtRp465
(dp466
g291
(lp467
g436
ag442
asg24
g1
(g25
g3
NtRp468
sg336
(lp469
g459
asg386
g1
(ctheano.scalar.basic
Add
p470
g3
NtRp471
(dp472
S'output_types_preference'
p473
ctheano.scalar.basic
upcast_out
p474
sg16
S'add'
p475
sbsbsg55
g440
sbasg24
g1
(g25
g3
NtRp476
sg336
(lp477
g450
asg386
g1
(ctheano.scalar.basic
Tanh
p478
g3
NtRp479
(dp480
g473
ctheano.scalar.basic
upgrade_to_float
p481
sg16
S'tanh'
p482
sbsbsg55
g440
sbasS'_c_code'
p483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p484
sS'outputs_type'
p485
(g440
tp486
sg473
g1
(ctheano.scalar.basic
transfer_type
p487
g3
NtRp488
(dp489
S'transfer'
p490
(I0
tp491
sbsS'nodenames'
p492
(lp493
S'%(nodename)s_subnode0'
p494
aS'%(nodename)s_subnode1'
p495
asS'nout'
p496
I1
sbsbsg330
(lp497
S'inplace_elemwise_optimizer'
p498
ag333
ag333
asbsg334
(dp499
sg315
g317
sg336
(lp500
g1
(g338
g3
NtRp501
(dp502
g23
I0
sg16
Nsg315
g317
sg322
(lp503
(g1
(g324
g3
NtRp504
(dp505
g291
(lp506
g501
ag1
(g70
g3
NtRp507
(dp508
g23
Nsg94
g204
sg16
S'W'
sg315
g317
sg322
(lp509
(g504
I1
tp510
asg21
S'auto_1364'
p511
sg24
g1
(g25
g3
NtRp512
(dp513
g28
g194
sbsg54
Nsg55
g209
sbasg24
g1
(g25
g3
NtRp514
(dp515
g330
(lp516
g332
ag333
ag333
asbsg334
(dp517
sg315
g317
sg336
(lp518
g1
(g338
g3
NtRp519
(dp520
g23
I0
sg16
Nsg315
g317
sg322
(lp521
(g1
(g324
g3
NtRp522
(dp523
g291
(lp524
g519
ag1
(g338
g3
NtRp525
(dp526
g23
I0
sg16
Nsg315
g317
sg322
(lp527
(g522
I1
tp528
asg21
S'auto_1436'
p529
sg24
g1
(g25
g3
NtRp530
(dp531
g28
(lp532
sbsg54
g1
(g324
g3
NtRp533
(dp534
g291
(lp535
g1
(g70
g3
NtRp536
(dp537
g23
Nsg94
g177
sg16
S'b'
sg315
g317
sg322
(lp538
(g533
I0
tp539
asg21
S'auto_1365'
p540
sg24
g1
(g25
g3
NtRp541
(dp542
g28
g167
sbsg54
Nsg55
g182
sbasg24
g1
(g25
g3
NtRp543
(dp544
g330
(lp545
g332
ag333
ag333
asbsg334
(dp546
sg315
g317
sg336
(lp547
g525
asg386
g1
(g387
g3
NtRp548
(dp549
g390
(lp550
sg392
(lp551
I0
asg394
(lp552
I0
asg396
(dp553
I0
(lp554
I0
assg399
(I00
tp555
sg401
I01
sg402
(S'x'
I0
tp556
sbsbsg55
g1
(g108
g3
NtRp557
(dp558
g59
(I01
I00
tp559
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g185
sbsbasg24
g1
(g25
g3
NtRp560
(dp561
g409
g1
(g324
g3
NtRp562
(dp563
g291
(lp564
g1
(g413
g3
NtRp565
(dp566
g21
S'auto_65749'
p567
sg23
Nsg24
g1
(g25
g3
NtRp568
sg16
Nsg54
Nsg55
g419
sbag1
(g413
g3
NtRp569
(dp570
g21
S'auto_65750'
p571
sg23
Nsg24
g1
(g25
g3
NtRp572
sg16
Nsg54
Nsg55
g419
sbasg24
g1
(g25
g3
NtRp573
sg336
(lp574
g1
(g413
g3
NtRp575
(dp576
g21
S'auto_65751'
p577
sg23
I0
sg24
g1
(g25
g3
NtRp578
sg16
Nsg54
g562
sg55
g419
sbasg386
g1
(g432
g3
NtRp579
(dp580
g291
(lp581
g1
(g413
g3
NtRp582
(dp583
g21
S'auto_1574'
p584
sg23
Nsg24
g1
(g25
g3
NtRp585
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp586
(dp587
g21
S'auto_1575'
p588
sg23
Nsg24
g1
(g25
g3
NtRp589
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp590
sg336
(lp591
g1
(g413
g3
NtRp592
(dp593
g21
S'auto_1577'
p594
sg23
I0
sg24
g1
(g25
g3
NtRp595
(dp596
g28
(lp597
sbsg16
Nsg54
g1
(g324
g3
NtRp598
(dp599
g291
(lp600
g1
(g413
g3
NtRp601
(dp602
g21
S'auto_1576'
p603
sg23
I0
sg24
g1
(g25
g3
NtRp604
(dp605
g28
(lp606
sbsg16
Nsg54
g1
(g324
g3
NtRp607
(dp608
g291
(lp609
g582
ag586
asg24
g1
(g25
g3
NtRp610
sg336
(lp611
g601
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp612
sg336
(lp613
g592
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p614
sg485
(g440
tp615
sg473
g1
(g487
g3
NtRp616
(dp617
g490
(I0
tp618
sbsg492
(lp619
S'%(nodename)s_subnode0'
p620
aS'%(nodename)s_subnode1'
p621
asg496
I1
sbsbsg330
(lp622
g498
ag333
ag333
asbsg334
(dp623
sg315
g317
sg336
(lp624
g1
(g338
g3
NtRp625
(dp626
g23
I0
sg16
Nsg315
g317
sg322
(lp627
(g1
(g324
g3
NtRp628
(dp629
g291
(lp630
g1
(g338
g3
NtRp631
(dp632
g23
I0
sg16
Nsg315
g317
sg322
(lp633
(g628
I0
tp634
asg21
S'auto_1498'
p635
sg24
g1
(g25
g3
NtRp636
(dp637
S'nan_guard_mode_check'
p638
I00
sS'values_eq_approx'
p639
ctheano.tensor.type
values_eq_approx_always_true
p640
sg28
(lp641
sbsg54
g1
(g324
g3
NtRp642
(dp643
g291
(lp644
g1
(g18
g3
NtRp645
(dp646
g23
I0
sg16
Nsg315
g317
sg322
(lp647
(g642
I0
tp648
asg21
S'auto_1427'
p649
sg24
g1
(g25
g3
NtRp650
(dp651
g114
Nsg28
(lp652
sbsg54
g1
(g324
g3
NtRp653
(dp654
g291
(lp655
g320
asg24
g1
(g25
g3
NtRp656
(dp657
g330
(lp658
S'local_shape_to_shape_i'
p659
ag332
ag333
ag333
asbsg334
(dp660
sg315
g317
sg336
(lp661
g645
asg386
g1
(ctheano.compile.ops
Shape_i
p662
g3
NtRp663
(dp664
S'i'
I0
sbsbsg55
g1
(g56
g3
NtRp665
(dp666
g59
(tsg61
S'int64'
p667
sg63
g64
(S'i8'
I0
I1
tRp668
(I3
S'<'
NNNI-1
I-1
I0
tbsg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp669
(dp670
g330
(lp671
S'local_gpua_alloc_empty'
p672
ag333
ag333
asbsg334
(dp673
sg315
g317
sg336
(lp674
g631
asg386
g1
(ctheano.gpuarray.basic_ops
GpuAllocEmpty
p675
g3
NtRp676
(dp677
g61
S'float32'
p678
sg114
Nsbsbsg55
g1
(g108
g3
NtRp679
(dp680
g59
(I00
tp681
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g678
sS'filter_checks_isfinite'
p682
I00
sbsbag1
(ctheano.tensor.var
TensorConstant
p683
g3
NtRp684
(dp685
g21
S'auto_65694'
p686
sg23
Nsg24
g1
(g25
g3
NtRp687
(dp688
g28
(lp689
(lp690
(S'/home/nolan/anaconda2/lib/python2.7/copy.py'
p691
I237
S'_deepcopy_tuple'
p692
S'y.append(deepcopy(a, memo))'
tp693
a(g691
I190
S'deepcopy'
p694
S'y = _reconstruct(x, rv, 1, memo)'
tp695
a(g691
I334
S'_reconstruct'
p696
S'state = deepcopy(state, memo)'
tp697
a(g691
I163
g694
S'y = copier(x, memo)'
tp698
a(g691
I257
S'_deepcopy_dict'
p699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp700
a(g691
I163
g694
S'y = copier(x, memo)'
tp701
a(g691
I230
S'_deepcopy_list'
p702
S'y.append(deepcopy(a, memo))'
tp703
a(g691
I174
g694
S'y = copier(memo)'
tp704
aasS'unique_value'
p705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp706
(dp707
g59
(tsg61
S'float64'
p708
sg63
g64
(S'f8'
I0
I1
tRp709
(I3
S'<'
NNNI-1
I-1
I0
tbsg66
I00
sg16
NsbsS'data'
p710
g101
(g102
(I0
tS'b'
tRp711
(I1
(tg64
(S'f8'
I0
I1
tRp712
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsbag625
ag1
(g338
g3
NtRp713
(dp714
g23
I0
sg16
Nsg315
g317
sg322
(lp715
(g628
I3
tp716
asg21
S'auto_1433'
p717
sg24
g1
(g25
g3
NtRp718
(dp719
g28
(lp720
sbsg54
g1
(g324
g3
NtRp721
(dp722
g291
(lp723
g1
(g70
g3
NtRp724
(dp725
g23
Nsg94
g265
sg16
S'W'
sg315
g317
sg322
(lp726
(g721
I0
tp727
asg21
S'auto_1366'
p728
sg24
g1
(g25
g3
NtRp729
(dp730
g28
g255
sbsg54
Nsg55
g270
sbasg24
g1
(g25
g3
NtRp731
(dp732
g330
(lp733
g332
ag333
ag333
asbsg334
(dp734
sg315
g317
sg336
(lp735
g713
asg386
g1
(g387
g3
NtRp736
(dp737
g390
(lp738
I1
asg392
(lp739
I0
asg394
(lp740
sg396
(dp741
I0
(lp742
I0
assg399
(I00
I01
tp743
sg401
I01
sg402
(I0
tp744
sbsbsg55
g1
(g108
g3
NtRp745
(dp746
g59
(I00
tp747
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g273
sbsbag1
(g683
g3
NtRp748
(dp749
g21
S'auto_65695'
p750
sg23
Nsg24
g1
(g25
g3
NtRp751
(dp752
g28
(lp753
(lp754
(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp755
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp756
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp757
a(g691
I163
g694
S'y = copier(x, memo)'
tp758
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp759
a(g691
I163
g694
S'y = copier(x, memo)'
tp760
a(g691
I230
g702
S'y.append(deepcopy(a, memo))'
tp761
a(g691
I174
g694
S'y = copier(memo)'
tp762
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp763
(dp764
g59
(tsg61
g708
sg63
g709
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp765
(I1
(tg712
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsbasg24
g1
(g25
g3
NtRp766
(dp767
g330
(lp768
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p769
ag333
ag333
asbsg334
(dp770
sg315
g317
sg336
(lp771
g1
(g338
g3
NtRp772
(dp773
g23
I0
sg16
Nsg315
g317
sg322
(lp774
(g1
(g324
g3
NtRp775
(dp776
g291
(lp777
g772
asg24
g1
(g25
g3
NtRp778
(dp779
g330
(lp780
S'local_gpua_dimshuffle'
p781
ag333
ag333
asbsg334
(dp782
sg315
g317
sg336
(lp783
g1
(g338
g3
NtRp784
(dp785
g23
I0
sg16
Nsg315
g317
sg322
(lp786
(g1
(g324
g3
NtRp787
(dp788
g291
(lp789
g784
ag1
(g338
g3
NtRp790
(dp791
g23
I0
sg16
Nsg315
g317
sg322
(lp792
(g787
I1
tp793
asg21
S'auto_1430'
p794
sg24
g1
(g25
g3
NtRp795
(dp796
g28
(lp797
sbsg54
g1
(g324
g3
NtRp798
(dp799
g291
(lp800
g1
(g70
g3
NtRp801
(dp802
g23
Nsg94
g237
sg16
S'b'
sg315
g317
sg322
(lp803
(g798
I0
tp804
asg21
S'auto_1367'
p805
sg24
g1
(g25
g3
NtRp806
(dp807
g28
g227
sbsg54
Nsg55
g242
sbasg24
g1
(g25
g3
NtRp808
(dp809
g330
(lp810
g332
ag333
ag333
asbsg334
(dp811
sg315
g317
sg336
(lp812
g790
asg386
g1
(g387
g3
NtRp813
(dp814
g390
(lp815
sg392
(lp816
I0
asg394
(lp817
I0
asg396
(dp818
I0
(lp819
I0
assg399
(I01
tp820
sg401
I01
sg402
(S'x'
I0
tp821
sbsbsg55
g1
(g108
g3
NtRp822
(dp823
g59
(I01
I01
tp824
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g245
sbsbasg24
g1
(g25
g3
NtRp825
(dp826
g409
g1
(g324
g3
NtRp827
(dp828
g291
(lp829
g1
(g413
g3
NtRp830
(dp831
g21
S'auto_65767'
p832
sg23
Nsg24
g1
(g25
g3
NtRp833
sg16
Nsg54
Nsg55
g419
sbag1
(g413
g3
NtRp834
(dp835
g21
S'auto_65768'
p836
sg23
Nsg24
g1
(g25
g3
NtRp837
sg16
Nsg54
Nsg55
g419
sbasg24
g1
(g25
g3
NtRp838
sg336
(lp839
g1
(g413
g3
NtRp840
(dp841
g21
S'auto_65769'
p842
sg23
I0
sg24
g1
(g25
g3
NtRp843
sg16
Nsg54
g827
sg55
g419
sbasg386
g1
(g470
g3
NtRp844
(dp845
g473
g1
(g487
g3
NtRp846
(dp847
g490
(I0
tp848
sbsg16
Nsbsbsg330
(lp849
g498
ag333
ag333
asbsg334
(dp850
sg315
g317
sg336
(lp851
g1
(g338
g3
NtRp852
(dp853
g23
I0
sg16
Nsg315
g317
sg322
(lp854
(g1
(g324
g3
NtRp855
(dp856
g291
(lp857
g852
asg24
g1
(g25
g3
NtRp858
(dp859
g330
(lp860
g332
ag333
ag333
asbsg334
(dp861
sg315
g317
sg336
(lp862
g1
(g18
g3
NtRp863
(dp864
g23
I0
sg16
Nsg315
g317
sg322
(lp865
(S'output'
p866
I0
tp867
asg21
S'auto_1479'
p868
sg24
g1
(g25
g3
NtRp869
(dp870
g28
(lp871
sbsg54
g855
sg55
g1
(g56
g3
NtRp872
(dp873
g59
(I00
I01
tp874
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbasg386
g1
(ctheano.gpuarray.basic_ops
HostFromGpu
p875
g3
NtRp876
sbI0
tp877
asg21
S'auto_1592'
p878
sg24
g1
(g25
g3
NtRp879
(dp880
g28
(lp881
sbsg54
g787
sg55
g1
(g108
g3
NtRp882
(dp883
g59
(I00
I01
tp884
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(ctheano.gpuarray.elemwise
GpuElemwise
p885
g3
NtRp886
(dp887
g16
NsS'scalar_op'
p888
g844
sS'destroy_map'
p889
(dp890
I0
(lp891
I0
assS'nfunc_spec'
p892
(g475
I2
I1
tp893
sS'inplace_pattern'
p894
g1
(ctheano.misc.frozendict
frozendict
p895
g3
NtRp896
(dp897
S'_hash'
p898
I3713080549408328131
sS'_dict'
p899
(dp900
I0
I0
ssbsS'openmp'
p901
I00
sbsbI0
tp902
asg21
S'auto_1486'
p903
sg24
g1
(g25
g3
NtRp904
(dp905
g28
(lp906
sbsg54
g775
sg55
g1
(g108
g3
NtRp907
(dp908
g59
(I00
I01
tp909
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g678
sbsbasg386
g1
(g387
g3
NtRp910
(dp911
g390
(lp912
sg392
(lp913
I0
asg394
(lp914
I1
asg396
(dp915
I0
(lp916
I0
assg399
(I00
tp917
sg401
I01
sg402
(I0
S'x'
tp918
sbsbI0
tp919
asg21
S'auto_1557'
p920
sg24
g1
(g25
g3
NtRp921
(dp922
g28
(lp923
sbsg54
g628
sg55
g679
sbasg386
g1
(ctheano.gpuarray.blas
GpuGemv
p924
g3
NtRp925
(dp926
g401
I01
sg889
(dp927
I0
(lp928
I0
assbsbI2
tp929
asg21
S'auto_1585'
p930
sg24
g1
(g25
g3
NtRp931
(dp932
g28
(lp933
sbsg54
g522
sg55
g1
(g108
g3
NtRp934
(dp935
g59
(I00
I00
tp936
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(g885
g3
NtRp937
(dp938
g16
Nsg888
g579
sg889
(dp939
I0
(lp940
I0
assg892
Nsg894
g1
(g895
g3
NtRp941
(dp942
g898
I3713080549408328131
sg899
(dp943
I0
I0
ssbsg901
I00
sbsbI0
tp944
asg21
S'auto_1454'
p945
sg24
g1
(g25
g3
NtRp946
(dp947
g28
(lp948
sbsg54
g504
sg55
g1
(g108
g3
NtRp949
(dp950
g59
(I00
I00
tp951
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(ctheano.gpuarray.blas
GpuDot22
p952
g3
NtRp953
sbI0
tp954
asg21
S'auto_1570'
p955
sg24
g1
(g25
g3
NtRp956
(dp957
g28
(lp958
sbsg54
g360
sg55
g1
(g108
g3
NtRp959
(dp960
g59
(I00
I00
tp961
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(g885
g3
NtRp962
(dp963
g16
Nsg888
g433
sg889
(dp964
I0
(lp965
I0
assg892
Nsg894
g1
(g895
g3
NtRp966
(dp967
g898
I3713080549408328131
sg899
(dp968
I0
I0
ssbsg901
I00
sbsbI0
tp969
asg21
S'auto_1440'
p970
sg24
g1
(g25
g3
NtRp971
(dp972
g28
(lp973
sbsg54
g342
sg55
g1
(g108
g3
NtRp974
(dp975
g59
(I00
I00
tp976
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g62
sbsbasg386
g953
sbI0
tp977
asg21
S'auto_1425'
p978
sg24
g1
(g25
g3
NtRp979
(dp980
g28
(lp981
sbsg54
g325
sg55
g1
(g108
g3
NtRp982
(dp983
g59
(I00
I00
tp984
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g62
sbsbasg386
g1
(ctheano.gpuarray.basic_ops
GpuFromHost
p985
g3
NtRp986
(dp987
g114
NsbsbI0
tp988
a(g653
I0
tp989
asg21
S'auto_1361'
p990
sg24
g1
(g25
g3
NtRp991
(dp992
g28
g29
sbsg54
Nsg55
g57
sbag345
ag374
ag507
ag536
ag724
ag801
asg336
(lp993
g863
asS'merge_feature'
p994
g1
(ctheano.gof.opt
MergeFeature
p995
g3
NtRp996
(dp997
S'scheduled'
p998
(lp999
sS'blacklist'
p1000
(lp1001
sS'nodes_seen'
p1002
g148
((lp1003
g371
ag642
ag342
ag522
ag628
ag360
ag798
ag504
ag721
ag325
ag855
ag653
ag775
ag533
ag787
atRp1004
sS'const_sig_inv'
p1005
(itheano.gof.opt
_metadict
p1006
(dp1007
S'd'
(dp1008
g1
(ctheano.tensor.var
TensorConstantSignature
p1009
c__builtin__
tuple
p1010
(g763
g765
ttRp1011
(dp1012
S'has_nan'
p1013
I00
sS'_sum'
p1014
cnumpy.core.multiarray
scalar
p1015
(g712
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1016
sS'_no_nan'
p1017
g765
sbg748
sg1
(g1009
g1010
(g706
g711
ttRp1018
(dp1019
g1013
I00
sg1014
g1015
(g712
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp1020
sg1017
g711
sbg684
ssS'l'
(lp1021
sbsS'seen_constants'
p1022
g148
((lp1023
I140440217804304
aI140440217862416
atRp1024
sS'const_sig'
p1025
(itheano.gof.opt
_metadict
p1026
(dp1027
S'd'
(dp1028
g684
g1018
sg748
g1011
ssS'l'
(lp1029
sbsS'noinput_nodes'
p1030
g1
(ctheano.misc.ordered_set
OrderedSet
p1031
g3
NtRp1032
(dp1033
S'_OrderedSet__root'
p1034
g1
(ctheano.misc.ordered_set
Link
p1035
g3
NtRp1036
(lp1037
g1036
ag1036
absS'_OrderedSet__map'
p1038
(dp1039
sbsbsS'destroy_handler'
p1040
g1
(ctheano.gof.destroyhandler
DestroyHandler
p1041
g3
NtRp1042
(dp1043
S'impact'
p1044
(dp1045
g519
g1
(g1031
g3
NtRp1046
(dp1047
g1034
g1
(g1035
g3
NtRp1048
(lp1049
g1
(g1035
g3
NtRp1050
(lp1051
g1048
ag1048
ag519
abag1050
absg1038
(dp1052
g519
g1050
ssbsg357
g1
(g1031
g3
NtRp1053
(dp1054
g1034
g1
(g1035
g3
NtRp1055
(lp1056
g1
(g1035
g3
NtRp1057
(lp1058
g1055
ag1055
ag357
abag1057
absg1038
(dp1059
g357
g1057
ssbsg631
g1
(g1031
g3
NtRp1060
(dp1061
g1034
g1
(g1035
g3
NtRp1062
(lp1063
g1
(g1035
g3
NtRp1064
(lp1065
g1062
ag1062
ag631
abag1064
absg1038
(dp1066
g631
g1064
ssbsg772
g1
(g1031
g3
NtRp1067
(dp1068
g1034
g1
(g1035
g3
NtRp1069
(lp1070
g1
(g1035
g3
NtRp1071
(lp1072
g1
(g1035
g3
NtRp1073
(lp1074
g1069
ag1071
ag784
abag1069
ag772
abag1073
absg1038
(dp1075
g784
g1073
sg772
g1071
ssbssS'droot'
p1076
(dp1077
g519
g519
sg357
g357
sg784
g772
sg631
g631
sg772
g772
ssS'view_o'
p1078
g14
((lp1079
(lp1080
g801
ag1
(g1031
g3
NtRp1081
(dp1082
g1034
g1
(g1035
g3
NtRp1083
(lp1084
g1
(g1035
g3
NtRp1085
(lp1086
g1083
ag1083
ag790
abag1085
absg1038
(dp1087
g790
g1085
ssbaa(lp1088
g724
ag1
(g1031
g3
NtRp1089
(dp1090
g1034
g1
(g1035
g3
NtRp1091
(lp1092
g1
(g1035
g3
NtRp1093
(lp1094
g1091
ag1091
ag713
abag1093
absg1038
(dp1095
g713
g1093
ssbaa(lp1096
g536
ag1
(g1031
g3
NtRp1097
(dp1098
g1034
g1
(g1035
g3
NtRp1099
(lp1100
g1
(g1035
g3
NtRp1101
(lp1102
g1099
ag1099
ag525
abag1101
absg1038
(dp1103
g525
g1101
ssbaa(lp1104
g374
ag1
(g1031
g3
NtRp1105
(dp1106
g1034
g1
(g1035
g3
NtRp1107
(lp1108
g1
(g1035
g3
NtRp1109
(lp1110
g1107
ag1107
ag363
abag1109
absg1038
(dp1111
g363
g1109
ssbaa(lp1112
g772
ag1
(g1031
g3
NtRp1113
(dp1114
g1034
g1
(g1035
g3
NtRp1115
(lp1116
g1
(g1035
g3
NtRp1117
(lp1118
g1115
ag1115
ag784
abag1117
absg1038
(dp1119
g784
g1117
ssbaatRp1120
sS'view_i'
p1121
g14
((lp1122
(lp1123
g790
ag801
aa(lp1124
g713
ag724
aa(lp1125
g525
ag536
aa(lp1126
g363
ag374
aa(lp1127
g784
ag772
aatRp1128
sg315
g317
sS'do_imports_on_attach'
p1129
I01
sg322
g14
((lp1130
(lp1131
g801
ag14
((lp1132
(lp1133
g798
aI1
aatRp1134
aa(lp1135
g790
ag14
((lp1136
(lp1137
g787
aI1
aatRp1138
aa(lp1139
g724
ag14
((lp1140
(lp1141
g721
aI1
aatRp1142
aa(lp1143
g713
ag14
((lp1144
(lp1145
g628
aI1
aatRp1146
aa(lp1147
g536
ag14
((lp1148
(lp1149
g533
aI1
aatRp1150
aa(lp1151
g525
ag14
((lp1152
(lp1153
g522
aI1
aatRp1154
aa(lp1155
g374
ag14
((lp1156
(lp1157
g371
aI1
aatRp1158
aa(lp1159
g363
ag14
((lp1160
(lp1161
g360
aI1
aatRp1162
aa(lp1163
g320
ag14
((lp1164
(lp1165
g325
aI1
aa(lp1166
g653
aI1
aatRp1167
aa(lp1168
g339
ag14
((lp1169
(lp1170
g342
aI1
aatRp1171
aa(lp1172
g645
ag14
((lp1173
(lp1174
g642
aI1
aatRp1175
aa(lp1176
g345
ag14
((lp1177
(lp1178
g342
aI1
aatRp1179
aa(lp1180
g357
ag14
((lp1181
(lp1182
g360
aI1
aatRp1183
aa(lp1184
g631
ag14
((lp1185
(lp1186
g628
aI1
aatRp1187
aa(lp1188
g1
(g338
g3
NtRp1189
(dp1190
g23
I0
sg16
Nsg315
g317
sg322
(lp1191
sg21
S'auto_1544'
p1192
sg24
g1
(g25
g3
NtRp1193
(dp1194
g28
(lp1195
sbsg54
g1
(g324
g3
NtRp1196
(dp1197
g291
(lp1198
g357
ag363
asg24
g1
(g25
g3
NtRp1199
(dp1200
S'removed_by'
p1201
(lp1202
g498
asg330
(lp1203
S'FusionOptimizer'
p1204
asbsg334
(dp1205
sg315
g317
sg336
(lp1206
g1189
asg386
g1
(g885
g3
NtRp1207
(dp1208
g16
Nsg888
g1
(g432
g3
NtRp1209
(dp1210
g291
(lp1211
g1
(g413
g3
NtRp1212
(dp1213
g21
S'auto_1533'
p1214
sg23
Nsg24
g1
(g25
g3
NtRp1215
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp1216
(dp1217
g21
S'auto_1534'
p1218
sg23
Nsg24
g1
(g25
g3
NtRp1219
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp1220
sg336
(lp1221
g1
(g413
g3
NtRp1222
(dp1223
g21
S'auto_1536'
p1224
sg23
I0
sg24
g1
(g25
g3
NtRp1225
(dp1226
g28
g455
sbsg16
Nsg54
g1
(g324
g3
NtRp1227
(dp1228
g291
(lp1229
g1
(g413
g3
NtRp1230
(dp1231
g21
S'auto_1535'
p1232
sg23
I0
sg24
g1
(g25
g3
NtRp1233
(dp1234
g28
g464
sbsg16
Nsg54
g1
(g324
g3
NtRp1235
(dp1236
g291
(lp1237
g1212
ag1216
asg24
g1
(g25
g3
NtRp1238
sg336
(lp1239
g1230
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp1240
sg336
(lp1241
g1222
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p1242
sg485
(g440
tp1243
sg492
(lp1244
S'%(nodename)s_subnode0'
p1245
aS'%(nodename)s_subnode1'
p1246
asg496
I1
sbsg889
(dp1247
sg892
Nsg894
g1
(g895
g3
NtRp1248
(dp1249
g898
Nsg899
(dp1250
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp1251
(dp1252
g59
(I00
I00
tp1253
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbag14
((ltRp1254
aa(lp1255
g507
ag14
((lp1256
(lp1257
g504
aI1
aatRp1258
aa(lp1259
g519
ag14
((lp1260
(lp1261
g522
aI1
aatRp1262
aa(lp1263
g1
(g338
g3
NtRp1264
(dp1265
g23
I0
sg16
Nsg315
g317
sg322
(lp1266
sg21
S'auto_1523'
p1267
sg24
g1
(g25
g3
NtRp1268
(dp1269
g28
(lp1270
sbsg54
g1
(g324
g3
NtRp1271
(dp1272
g291
(lp1273
g519
ag525
asg24
g1
(g25
g3
NtRp1274
(dp1275
g1201
(lp1276
g498
asg330
(lp1277
g1204
asbsg334
(dp1278
sg315
g317
sg336
(lp1279
g1264
asg386
g1
(g885
g3
NtRp1280
(dp1281
g16
Nsg888
g1
(g432
g3
NtRp1282
(dp1283
g291
(lp1284
g1
(g413
g3
NtRp1285
(dp1286
g21
S'auto_1512'
p1287
sg23
Nsg24
g1
(g25
g3
NtRp1288
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp1289
(dp1290
g21
S'auto_1513'
p1291
sg23
Nsg24
g1
(g25
g3
NtRp1292
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp1293
sg336
(lp1294
g1
(g413
g3
NtRp1295
(dp1296
g21
S'auto_1515'
p1297
sg23
I0
sg24
g1
(g25
g3
NtRp1298
(dp1299
g28
g597
sbsg16
Nsg54
g1
(g324
g3
NtRp1300
(dp1301
g291
(lp1302
g1
(g413
g3
NtRp1303
(dp1304
g21
S'auto_1514'
p1305
sg23
I0
sg24
g1
(g25
g3
NtRp1306
(dp1307
g28
g606
sbsg16
Nsg54
g1
(g324
g3
NtRp1308
(dp1309
g291
(lp1310
g1285
ag1289
asg24
g1
(g25
g3
NtRp1311
sg336
(lp1312
g1303
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp1313
sg336
(lp1314
g1295
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p1315
sg485
(g440
tp1316
sg492
(lp1317
S'%(nodename)s_subnode0'
p1318
aS'%(nodename)s_subnode1'
p1319
asg496
I1
sbsg889
(dp1320
sg892
Nsg894
g1
(g895
g3
NtRp1321
(dp1322
g898
Nsg899
(dp1323
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp1324
(dp1325
g59
(I00
I00
tp1326
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbag14
((ltRp1327
aa(lp1328
g684
ag14
((lp1329
(lp1330
g628
aI1
aatRp1331
aa(lp1332
g748
ag14
((lp1333
(lp1334
g628
aI1
aatRp1335
aa(lp1336
g1
(g338
g3
NtRp1337
(dp1338
g23
I0
sg16
Nsg315
g317
sg322
(lp1339
sg21
S'auto_1495'
p1340
sg24
g1
(g25
g3
NtRp1341
(dp1342
g28
(lp1343
sbsg54
g1
(g324
g3
NtRp1344
(dp1345
g291
(lp1346
g631
ag684
ag1264
ag713
ag748
asg24
g1
(g25
g3
NtRp1347
(dp1348
g1201
(lp1349
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p1350
asg330
(lp1351
S'local_gpua_gemv'
p1352
asbsg334
(dp1353
sg315
g317
sg336
(lp1354
g1337
asg386
g1
(g924
g3
NtRp1355
(dp1356
g401
I00
sbsbsg55
g1
(g108
g3
NtRp1357
(dp1358
g59
(I00
tp1359
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g678
sbsbag14
((ltRp1360
aa(lp1361
g784
ag14
((lp1362
(lp1363
g787
aI1
aatRp1364
aa(lp1365
g1
(g338
g3
NtRp1366
(dp1367
g23
I0
sg16
Nsg315
g317
sg322
(lp1368
sg21
S'auto_1475'
p1369
sg24
g1
(g25
g3
NtRp1370
(dp1371
g28
(lp1372
sbsg54
g1
(g324
g3
NtRp1373
(dp1374
g291
(lp1375
g784
ag790
asg24
g1
(g25
g3
NtRp1376
(dp1377
g1201
(lp1378
g498
asg330
(lp1379
g332
asbsg334
(dp1380
sg315
g317
sg336
(lp1381
g1366
asg386
g1
(g885
g3
NtRp1382
(dp1383
g16
S'GpuElemwise{add,no_inplace}'
p1384
sg888
g471
sg889
(dp1385
sg892
g893
sg894
g1
(g895
g3
NtRp1386
(dp1387
g898
Nsg899
(dp1388
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp1389
(dp1390
g59
(I00
I01
tp1391
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbag14
((ltRp1392
aa(lp1393
g863
ag14
((ltRp1394
aa(lp1395
g1
(g18
g3
NtRp1396
(dp1397
g23
I0
sg16
Nsg315
g317
sg322
(lp1398
sg21
S'auto_1556'
p1399
sg24
g1
(g25
g3
NtRp1400
(dp1401
g28
(lp1402
sbsg54
g1
(g324
g3
NtRp1403
(dp1404
g291
(lp1405
g863
asg24
g1
(g25
g3
NtRp1406
(dp1407
g1201
(lp1408
S"('Revert', 'output_guard')"
p1409
asg330
(lp1410
S'output_guard'
p1411
asbsg334
(dp1412
sg315
g317
sg336
(lp1413
g1396
asg386
g1
(ctheano.compile.ops
OutputGuard
p1414
g3
NtRp1415
sbsg55
g872
sbag14
((ltRp1416
aa(lp1417
g772
ag14
((lp1418
(lp1419
g775
aI1
aatRp1420
aa(lp1421
g501
ag14
((lp1422
(lp1423
g504
aI1
aatRp1424
aa(lp1425
g625
ag14
((lp1426
(lp1427
g628
aI1
aatRp1428
aa(lp1429
g852
ag14
((lp1430
(lp1431
g855
aI1
aatRp1432
aatRp1433
sS'root_destroyer'
p1434
(dp1435
g519
g522
sg357
g360
sg631
g628
sg772
g787
ssS'debug_all_apps'
p1436
g1
(g1031
g3
NtRp1437
(dp1438
g1034
g1
(g1035
g3
NtRp1439
(lp1440
g1
(g1035
g3
NtRp1441
(lp1442
g1
(g1035
g3
NtRp1443
(lp1444
g1
(g1035
g3
NtRp1445
(lp1446
g1
(g1035
g3
NtRp1447
(lp1448
g1
(g1035
g3
NtRp1449
(lp1450
g1
(g1035
g3
NtRp1451
(lp1452
g1
(g1035
g3
NtRp1453
(lp1454
g1
(g1035
g3
NtRp1455
(lp1456
g1
(g1035
g3
NtRp1457
(lp1458
g1
(g1035
g3
NtRp1459
(lp1460
g1
(g1035
g3
NtRp1461
(lp1462
g1
(g1035
g3
NtRp1463
(lp1464
g1
(g1035
g3
NtRp1465
(lp1466
g1
(g1035
g3
NtRp1467
(lp1468
g1
(g1035
g3
NtRp1469
(lp1470
g1439
ag1467
ag798
abag1465
ag721
abag1463
ag533
abag1461
ag371
abag1459
ag325
abag1457
ag653
abag1455
ag342
abag1453
ag642
abag1451
ag504
abag1449
ag775
abag1447
ag855
abag1445
ag628
abag1443
ag360
abag1441
ag522
abag1439
ag787
abag1469
absg1038
(dp1471
g653
g1459
sg642
g1455
sg325
g1461
sg371
g1463
sg504
g1453
sg798
g1469
sg360
g1445
sg721
g1467
sg342
g1457
sg855
g1449
sg628
g1447
sg775
g1451
sg533
g1465
sg787
g1441
sg522
g1443
ssbsS'destroyers'
p1472
g1
(g1031
g3
NtRp1473
(dp1474
g1034
g1
(g1035
g3
NtRp1475
(lp1476
g1
(g1035
g3
NtRp1477
(lp1478
g1
(g1035
g3
NtRp1479
(lp1480
g1
(g1035
g3
NtRp1481
(lp1482
g1
(g1035
g3
NtRp1483
(lp1484
g1475
ag1481
ag628
abag1479
ag360
abag1477
ag522
abag1475
ag787
abag1483
absg1038
(dp1485
g522
g1479
sg628
g1483
sg360
g1481
sg787
g1477
ssbsS'stale_droot'
p1486
I00
sbsS'variables'
p1487
g148
((lp1488
g519
ag320
ag525
ag772
ag863
ag790
ag748
ag784
ag374
ag645
ag625
ag631
ag501
ag536
ag363
ag713
ag724
ag801
ag345
ag357
ag684
ag507
ag339
ag852
atRp1489
sg16
S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/neural_network.py:520'
p1490
sS'execute_callbacks_time'
p1491
F0.0047039985656738281
sS'shape_feature'
p1492
g1
(ctheano.tensor.opt
ShapeFeature
p1493
g3
NtRp1494
(dp1495
g998
(dp1496
sS'shape_of'
p1497
(dp1498
g1
(g18
g3
NtRp1499
(dp1500
g23
I0
sg16
Nsg315
g317
sg322
(lp1501
sg21
S'auto_1423'
p1502
sg24
g1
(g25
g3
NtRp1503
(dp1504
g28
(lp1505
sbsg54
g1
(g324
g3
NtRp1506
(dp1507
g291
(lp1508
g1
(g18
g3
NtRp1509
(dp1510
g23
I0
sg16
Nsg315
g317
sg322
(lp1511
sg21
S'auto_1393'
p1512
sg24
g1
(g25
g3
NtRp1513
(dp1514
g28
g652
sbsg54
g1
(g324
g3
NtRp1515
(dp1516
g291
(lp1517
g320
asg24
g1
(g25
g3
NtRp1518
(dp1519
g1201
(lp1520
g332
asg330
g658
sbsg334
(dp1521
sg315
g317
sg336
(lp1522
g1509
asg386
g663
sbsg55
g665
sbag1
(g18
g3
NtRp1523
(dp1524
g23
I0
sg16
Nsg315
g317
sg322
(lp1525
sg21
S'auto_1389'
p1526
sg24
g1
(g25
g3
NtRp1527
(dp1528
g28
(lp1529
sbsg54
g1
(g324
g3
NtRp1530
(dp1531
g291
(lp1532
g507
asg24
g1
(g25
g3
NtRp1533
(dp1534
g1201
(lp1535
S'local_subtensor_make_vector'
p1536
asg330
(lp1537
g659
asbsg334
(dp1538
sg315
g317
sg336
(lp1539
g1523
asg386
g1
(g662
g3
NtRp1540
(dp1541
S'i'
I1
sbsbsg55
g665
sbasg24
g1
(g25
g3
NtRp1542
(dp1543
g1201
(lp1544
g1536
asg330
(lp1545
g659
asbsg334
(dp1546
sg315
g317
sg336
(lp1547
g1499
asg386
g1
(ctheano.tensor.opt
MakeVector
p1548
g3
NtRp1549
(dp1550
g61
g667
sbsbsg55
g1
(g56
g3
NtRp1551
(dp1552
g59
(I00
tp1553
sg61
g667
sg63
g668
sg66
I00
sg16
Nsbsb(g1
(g683
g3
NtRp1554
(dp1555
g21
S'auto_65716'
p1556
sg23
Nsg24
g1
(g25
g3
NtRp1557
(dp1558
g28
(lp1559
(lp1560
(g691
I334
g696
S'state = deepcopy(state, memo)'
tp1561
a(g691
I163
g694
S'y = copier(x, memo)'
tp1562
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1563
a(g691
I163
g694
S'y = copier(x, memo)'
tp1564
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1565
a(g691
I163
g694
S'y = copier(x, memo)'
tp1566
a(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp1567
a(g691
I174
g694
S'y = copier(memo)'
tp1568
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp1569
(dp1570
g59
(tsg61
S'int64'
p1571
sg63
g668
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp1572
(I1
(tg64
(S'i8'
I0
I1
tRp1573
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp1574
sg1
(g18
g3
NtRp1575
(dp1576
g23
I0
sg16
Nsg315
g317
sg322
(lp1577
sg21
S'auto_1372'
p1578
sg24
g1
(g25
g3
NtRp1579
(dp1580
g28
(lp1581
(lp1582
(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/dense.py'
p1583
I123
S'get_output_for'
p1584
S'activation = activation + self.b'
tp1585
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/tensor/var.py'
p1586
I128
S'__add__'
p1587
S'return theano.tensor.basic.add(self, other)'
tp1588
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/gof/op.py'
p1589
I615
S'__call__'
p1590
S'node = self.make_node(*inputs, **kwargs)'
tp1591
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/tensor/elemwise.py'
p1592
I576
S'make_node'
p1593
S'inputs = list(map(as_tensor_variable, inputs))'
tp1594
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/tensor/basic.py'
p1595
I155
S'as_tensor_variable'
p1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1597
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/gpuarray/type.py'
p1598
I518
S'_as_TensorVariable'
p1599
S'return host_from_gpu(self)'
tp1600
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp1601
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/theano/gpuarray/basic_ops.py'
p1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp1603
aasbsg54
g1
(g324
g3
NtRp1604
(dp1605
g291
(lp1606
g374
asg24
g1
(g25
g3
NtRp1607
(dp1608
g1201
(lp1609
g332
asg330
(lp1610
g333
asbsg334
(dp1611
sg315
g317
sg336
(lp1612
g1575
asg386
g876
sbsg55
g1
(g56
g3
NtRp1613
(dp1614
g59
g400
sg61
g115
sg63
g65
sg66
I00
sg16
Nsbsb(g1
(g18
g3
NtRp1615
(dp1616
g21
S'auto_1390'
p1617
sg23
I0
sg24
g1
(g25
g3
NtRp1618
(dp1619
g28
(lp1620
sbsg16
Nsg54
g1
(g324
g3
NtRp1621
(dp1622
g291
(lp1623
g374
asg24
g1
(g25
g3
NtRp1624
sg336
(lp1625
g1615
asg386
g1
(g662
g3
NtRp1626
(dp1627
S'i'
I0
sbsbsg55
g665
sbtp1628
sg1
(g18
g3
NtRp1629
(dp1630
g23
I0
sg16
Nsg315
g317
sg322
(lp1631
sg21
S'auto_1376'
p1632
sg24
g1
(g25
g3
NtRp1633
(dp1634
g28
(lp1635
(lp1636
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1637
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1638
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1639
a(g81
I39
g51
S'self._set_prediction()'
tp1640
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/neural_network.py'
p1641
I518
S'_set_prediction'
p1642
S'prediction = self.get_output(deterministic=True)'
tp1643
a(S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/mlp_network.py'
p1644
I64
S'get_output'
p1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1646
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/layers/helper.py'
p1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1648
a(g1583
I123
g1584
S'activation = activation + self.b'
tp1649
aasbsg54
g1
(g324
g3
NtRp1650
(dp1651
g291
(lp1652
g1575
asg24
g1
(g25
g3
NtRp1653
(dp1654
g1201
(lp1655
g332
asg330
(lp1656
g333
asbsg334
(dp1657
sg315
g317
sg336
(lp1658
g1629
asg386
g1
(ctheano.tensor.elemwise
DimShuffle
p1659
g3
NtRp1660
(dp1661
g390
(lp1662
sg392
(lp1663
I0
asg394
(lp1664
I0
asg396
(dp1665
I0
(lp1666
I0
assg399
g400
sg401
I01
sg402
g403
sbsbsg55
g1
(g56
g3
NtRp1667
(dp1668
g59
(I01
I00
tp1669
sg61
g115
sg63
g65
sg66
I00
sg16
Nsbsb(g1
(g683
g3
NtRp1670
(dp1671
g21
S'auto_65714'
p1672
sg23
Nsg24
g1
(g25
g3
NtRp1673
(dp1674
g28
(lp1675
(lp1676
(g691
I334
g696
S'state = deepcopy(state, memo)'
tp1677
a(g691
I163
g694
S'y = copier(x, memo)'
tp1678
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1679
a(g691
I163
g694
S'y = copier(x, memo)'
tp1680
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1681
a(g691
I163
g694
S'y = copier(x, memo)'
tp1682
a(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp1683
a(g691
I174
g694
S'y = copier(memo)'
tp1684
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp1685
(dp1686
g59
(tsg61
S'int64'
p1687
sg63
g668
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp1688
(I1
(tg1573
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tbsbg1615
tp1689
sg1
(g18
g3
NtRp1690
(dp1691
g23
I0
sg16
Nsg315
g317
sg322
(lp1692
sg21
S'auto_1411'
p1693
sg24
g1
(g25
g3
NtRp1694
(dp1695
g28
(lp1696
sbsg54
g1
(g324
g3
NtRp1697
(dp1698
g291
(lp1699
g1
(g18
g3
NtRp1700
(dp1701
g23
I0
sg16
Nsg315
g317
sg322
(lp1702
sg21
S'auto_1410'
p1703
sg24
g1
(g25
g3
NtRp1704
(dp1705
g638
I00
sg639
g640
sg28
(lp1706
sbsg54
g1
(g324
g3
NtRp1707
(dp1708
g291
(lp1709
g1509
asg24
g1
(g25
g3
NtRp1710
(dp1711
g1201
(lp1712
g332
asg330
(lp1713
S'local_dot22_to_ger_or_gemv'
p1714
ag332
asbsg334
(dp1715
sg315
g317
sg336
(lp1716
g1700
asg386
g1
(ctheano.tensor.basic
AllocEmpty
p1717
g3
NtRp1718
(dp1719
g61
g678
sbsbsg55
g1
(g56
g3
NtRp1720
(dp1721
g59
(I00
tp1722
sg66
I00
sg16
Nsg61
g678
sg63
g65
sg682
I00
sbsbag1
(g683
g3
NtRp1723
(dp1724
g21
S'auto_65712'
p1725
sg23
Nsg24
g1
(g25
g3
NtRp1726
(dp1727
g28
(lp1728
(lp1729
(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1730
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp1731
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp1732
a(g691
I163
g694
S'y = copier(x, memo)'
tp1733
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1734
a(g691
I163
g694
S'y = copier(x, memo)'
tp1735
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp1736
a(g691
I174
g694
S'y = copier(memo)'
tp1737
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp1738
(dp1739
g59
(tsg61
S'float32'
p1740
sg63
g65
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp1741
(I1
(tg104
I00
S'\x00\x00\x80?'
tbsbag1
(g18
g3
NtRp1742
(dp1743
g23
I0
sg16
Nsg315
g317
sg322
(lp1744
sg21
S'auto_1382'
p1745
sg24
g1
(g25
g3
NtRp1746
(dp1747
g28
(lp1748
(lp1749
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1750
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1751
a(g81
I39
g51
S'self._set_prediction()'
tp1752
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp1753
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1754
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1755
a(g1583
I124
g1584
S'return self.nonlinearity(activation)'
tp1756
a(S'/home/nolan/anaconda2/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p1757
I61
g482
S'return theano.tensor.tanh(x)'
tp1758
aasbsg54
g1
(g324
g3
NtRp1759
(dp1760
g291
(lp1761
g1
(g18
g3
NtRp1762
(dp1763
g23
I0
sg16
Nsg315
g317
sg322
(lp1764
sg21
S'auto_1381'
p1765
sg24
g1
(g25
g3
NtRp1766
(dp1767
g28
(lp1768
(lp1769
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1770
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1771
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1772
a(g81
I39
g51
S'self._set_prediction()'
tp1773
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp1774
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1775
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1776
a(g1583
I123
g1584
S'activation = activation + self.b'
tp1777
aasbsg54
g1
(g324
g3
NtRp1778
(dp1779
g291
(lp1780
g1
(g18
g3
NtRp1781
(dp1782
g23
I0
sg16
Nsg315
g317
sg322
(lp1783
sg21
S'auto_1396'
p1784
sg24
g1
(g25
g3
NtRp1785
(dp1786
g28
(lp1787
sbsg54
g1
(g324
g3
NtRp1788
(dp1789
g291
(lp1790
g1
(g18
g3
NtRp1791
(dp1792
g23
I0
sg16
Nsg315
g317
sg322
(lp1793
sg21
S'auto_1379'
p1794
sg24
g1
(g25
g3
NtRp1795
(dp1796
g28
(lp1797
(lp1798
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1799
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1800
a(g81
I39
g51
S'self._set_prediction()'
tp1801
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp1802
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1803
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1804
a(g1583
I124
g1584
S'return self.nonlinearity(activation)'
tp1805
a(g1757
I61
g482
S'return theano.tensor.tanh(x)'
tp1806
aasbsg54
g1
(g324
g3
NtRp1807
(dp1808
g291
(lp1809
g1
(g18
g3
NtRp1810
(dp1811
g23
I0
sg16
Nsg315
g317
sg322
(lp1812
sg21
S'auto_1378'
p1813
sg24
g1
(g25
g3
NtRp1814
(dp1815
g28
(lp1816
(lp1817
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1818
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1819
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1820
a(g81
I39
g51
S'self._set_prediction()'
tp1821
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp1822
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1823
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1824
a(g1583
I123
g1584
S'activation = activation + self.b'
tp1825
aasbsg54
g1
(g324
g3
NtRp1826
(dp1827
g291
(lp1828
g1
(g18
g3
NtRp1829
(dp1830
g23
I0
sg16
Nsg315
g317
sg322
(lp1831
sg21
S'auto_1395'
p1832
sg24
g1
(g25
g3
NtRp1833
(dp1834
g28
(lp1835
sbsg54
g1
(g324
g3
NtRp1836
(dp1837
g291
(lp1838
g320
ag1
(g18
g3
NtRp1839
(dp1840
g23
I0
sg16
Nsg315
g317
sg322
(lp1841
sg21
S'auto_1373'
p1842
sg24
g1
(g25
g3
NtRp1843
(dp1844
g28
(lp1845
(lp1846
(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1847
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1848
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp1849
a(g1595
I5960
S'dot'
p1850
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp1851
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1852
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp1853
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp1854
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp1855
aasbsg54
g1
(g324
g3
NtRp1856
(dp1857
g291
(lp1858
g345
asg24
g1
(g25
g3
NtRp1859
(dp1860
g1201
(lp1861
g332
asg330
(lp1862
g333
asbsg334
(dp1863
sg315
g317
sg336
(lp1864
g1839
asg386
g876
sbsg55
g1
(g56
g3
NtRp1865
(dp1866
g59
(I00
I00
tp1867
sg61
g147
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp1868
(dp1869
g1201
(lp1870
g332
asg330
(lp1871
S'local_dot_to_dot22'
p1872
asbsg334
(dp1873
sg315
g317
sg336
(lp1874
g1829
asg386
g1
(ctheano.tensor.blas
Dot22
p1875
g3
NtRp1876
sbsg55
g1
(g56
g3
NtRp1877
(dp1878
g59
(I00
I00
tp1879
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsbag1629
asg24
g1
(g25
g3
NtRp1880
(dp1881
g1201
(lp1882
g332
asg330
(lp1883
g333
asbsg334
(dp1884
sg315
g317
sg336
(lp1885
g1810
asg386
g1
(ctheano.tensor.elemwise
Elemwise
p1886
g3
NtRp1887
(dp1888
S'__module__'
p1889
S'tensor'
p1890
sg16
S'Elemwise{add,no_inplace}'
p1891
sg888
g471
sg889
(dp1892
sg892
g893
sg894
g1
(g895
g3
NtRp1893
(dp1894
g898
Nsg899
(dp1895
sbsg901
I00
sS'__doc__'
p1896
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1897
sbsbsg55
g1
(g56
g3
NtRp1898
(dp1899
g59
(I00
I00
tp1900
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp1901
(dp1902
g1201
(lp1903
g332
asg330
(lp1904
g333
asbsg334
(dp1905
sg315
g317
sg336
(lp1906
g1791
asg386
g1
(g1886
g3
NtRp1907
(dp1908
g1889
g1890
sg16
S'Elemwise{tanh,no_inplace}'
p1909
sg888
g479
sg889
(dp1910
sg892
(g482
I1
I1
tp1911
sg894
g1
(g895
g3
NtRp1912
(dp1913
g898
Nsg899
(dp1914
sbsg901
I00
sg1896
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1915
sbsbsg55
g1
(g56
g3
NtRp1916
(dp1917
g59
(I00
I00
tp1918
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp1919
(dp1920
g23
I0
sg16
Nsg315
g317
sg322
(lp1921
sg21
S'auto_1371'
p1922
sg24
g1
(g25
g3
NtRp1923
(dp1924
g28
(lp1925
(lp1926
(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1927
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1928
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp1929
a(g1595
I5960
g1850
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp1930
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1931
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp1932
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp1933
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp1934
aasbsg54
g1
(g324
g3
NtRp1935
(dp1936
g291
(lp1937
g507
asg24
g1
(g25
g3
NtRp1938
(dp1939
g1201
(lp1940
g332
asg330
(lp1941
g333
asbsg334
(dp1942
sg315
g317
sg336
(lp1943
g1919
asg386
g876
sbsg55
g1
(g56
g3
NtRp1944
(dp1945
g59
(I00
I00
tp1946
sg61
g212
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp1947
(dp1948
g1201
(lp1949
g332
asg330
(lp1950
g1872
asbsg334
(dp1951
sg315
g317
sg336
(lp1952
g1781
asg386
g1876
sbsg55
g1
(g56
g3
NtRp1953
(dp1954
g59
(I00
I00
tp1955
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp1956
(dp1957
g23
I0
sg16
Nsg315
g317
sg322
(lp1958
sg21
S'auto_1375'
p1959
sg24
g1
(g25
g3
NtRp1960
(dp1961
g28
(lp1962
(lp1963
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp1964
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp1965
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp1966
a(g81
I39
g51
S'self._set_prediction()'
tp1967
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp1968
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp1969
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1970
a(g1583
I123
g1584
S'activation = activation + self.b'
tp1971
aasbsg54
g1
(g324
g3
NtRp1972
(dp1973
g291
(lp1974
g1
(g18
g3
NtRp1975
(dp1976
g23
I0
sg16
Nsg315
g317
sg322
(lp1977
sg21
S'auto_1370'
p1978
sg24
g1
(g25
g3
NtRp1979
(dp1980
g28
(lp1981
(lp1982
(g1583
I123
g1584
S'activation = activation + self.b'
tp1983
a(g1586
I128
g1587
S'return theano.tensor.basic.add(self, other)'
tp1984
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp1985
a(g1592
I576
g1593
S'inputs = list(map(as_tensor_variable, inputs))'
tp1986
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp1987
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp1988
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp1989
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp1990
aasbsg54
g1
(g324
g3
NtRp1991
(dp1992
g291
(lp1993
g536
asg24
g1
(g25
g3
NtRp1994
(dp1995
g1201
(lp1996
g332
asg330
(lp1997
g333
asbsg334
(dp1998
sg315
g317
sg336
(lp1999
g1975
asg386
g876
sbsg55
g1
(g56
g3
NtRp2000
(dp2001
g59
g555
sg61
g185
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2002
(dp2003
g1201
(lp2004
g332
asg330
(lp2005
g333
asbsg334
(dp2006
sg315
g317
sg336
(lp2007
g1956
asg386
g1
(g1659
g3
NtRp2008
(dp2009
g390
(lp2010
sg392
(lp2011
I0
asg394
(lp2012
I0
asg396
(dp2013
I0
(lp2014
I0
assg399
g555
sg401
I01
sg402
g556
sbsbsg55
g1
(g56
g3
NtRp2015
(dp2016
g59
(I01
I00
tp2017
sg61
g185
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2018
(dp2019
g1201
(lp2020
g332
asg330
(lp2021
g333
asbsg334
(dp2022
sg315
g317
sg336
(lp2023
g1762
asg386
g1887
sbsg55
g1
(g56
g3
NtRp2024
(dp2025
g59
(I00
I00
tp2026
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2027
(dp2028
g1201
(lp2029
g332
asg330
(lp2030
g333
asbsg334
(dp2031
sg315
g317
sg336
(lp2032
g1742
asg386
g1907
sbsg55
g1
(g56
g3
NtRp2033
(dp2034
g59
(I00
I00
tp2035
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp2036
(dp2037
g23
I0
sg16
Nsg315
g317
sg322
(lp2038
sg21
S'auto_1406'
p2039
sg24
g1
(g25
g3
NtRp2040
(dp2041
g28
(lp2042
sbsg54
g1
(g324
g3
NtRp2043
(dp2044
g291
(lp2045
g1
(g18
g3
NtRp2046
(dp2047
g23
I0
sg16
Nsg315
g317
sg322
(lp2048
sg21
S'auto_1369'
p2049
sg24
g1
(g25
g3
NtRp2050
(dp2051
g28
(lp2052
(lp2053
(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2054
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2055
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp2056
a(g1595
I5960
g1850
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp2057
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp2058
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp2059
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp2060
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp2061
aasbsg54
g1
(g324
g3
NtRp2062
(dp2063
g291
(lp2064
g724
asg24
g1
(g25
g3
NtRp2065
(dp2066
g1201
(lp2067
g332
asg330
(lp2068
g333
asbsg334
(dp2069
sg315
g317
sg336
(lp2070
g2046
asg386
g876
sbsg55
g1
(g56
g3
NtRp2071
(dp2072
g59
(I00
I01
tp2073
sg61
g273
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2074
(dp2075
g1201
(lp2076
g332
asg330
(lp2077
g1714
asbsg334
(dp2078
sg315
g317
sg336
(lp2079
g2036
asg386
g1
(g1659
g3
NtRp2080
(dp2081
g390
(lp2082
I1
asg392
(lp2083
I0
asg394
(lp2084
sg396
(dp2085
I0
(lp2086
I0
assg399
g743
sg401
I01
sg402
g744
sbsbsg55
g1
(g56
g3
NtRp2087
(dp2088
g59
(I00
tp2089
sg61
g273
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g683
g3
NtRp2090
(dp2091
g21
S'auto_65713'
p2092
sg23
Nsg24
g1
(g25
g3
NtRp2093
(dp2094
g28
(lp2095
(lp2096
(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp2097
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp2098
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp2099
a(g691
I163
g694
S'y = copier(x, memo)'
tp2100
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp2101
a(g691
I163
g694
S'y = copier(x, memo)'
tp2102
a(g691
I230
g702
S'y.append(deepcopy(a, memo))'
tp2103
a(g691
I174
g694
S'y = copier(memo)'
tp2104
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp2105
(dp2106
g59
(tsg61
S'float32'
p2107
sg63
g65
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp2108
(I1
(tg104
I00
S'\x00\x00\x00\x00'
tbsbasg24
g1
(g25
g3
NtRp2109
(dp2110
g1201
(lp2111
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p2112
asg330
(lp2113
g1714
asbsg334
(dp2114
sg315
g317
sg336
(lp2115
g1690
asg386
g1
(ctheano.tensor.blas
Gemv
p2116
g3
NtRp2117
(dp2118
g401
I00
sbsbsg55
g1720
sb(g1509
tp2119
sg1919
(g1
(g18
g3
NtRp2120
(dp2121
g21
S'auto_1388'
p2122
sg23
I0
sg24
g1
(g25
g3
NtRp2123
(dp2124
g28
(lp2125
sbsg16
Nsg54
g1
(g324
g3
NtRp2126
(dp2127
g291
(lp2128
g507
asg24
g1
(g25
g3
NtRp2129
sg336
(lp2130
g2120
asg386
g1
(g662
g3
NtRp2131
(dp2132
S'i'
I0
sbsbsg55
g665
sbg1523
tp2133
sg519
(g1
(g18
g3
NtRp2134
(dp2135
g21
S'auto_1482'
p2136
sg23
I0
sg24
g1
(g25
g3
NtRp2137
(dp2138
g28
(lp2139
sbsg16
Nsg54
g1
(g324
g3
NtRp2140
(dp2141
g291
(lp2142
g519
asg24
g1
(g25
g3
NtRp2143
sg336
(lp2144
g2134
asg386
g1
(g662
g3
NtRp2145
(dp2146
S'i'
I0
sbsbsg55
g665
sbg1
(g18
g3
NtRp2147
(dp2148
g21
S'auto_1483'
p2149
sg23
I0
sg24
g1
(g25
g3
NtRp2150
(dp2151
g28
(lp2152
sbsg16
Nsg54
g1
(g324
g3
NtRp2153
(dp2154
g291
(lp2155
g519
asg24
g1
(g25
g3
NtRp2156
sg336
(lp2157
g2147
asg386
g1
(g662
g3
NtRp2158
(dp2159
S'i'
I1
sbsbsg55
g665
sbtp2160
sg1
(g18
g3
NtRp2161
(dp2162
g23
I0
sg16
Nsg315
g317
sg322
(lp2163
sg21
S'auto_1487'
p2164
sg24
g1
(g25
g3
NtRp2165
(dp2166
g28
(lp2167
sbsg54
g1
(g324
g3
NtRp2168
(dp2169
g291
(lp2170
g784
asg24
g1
(g25
g3
NtRp2171
(dp2172
g1201
(lp2173
S'local_cut_gpu_transfers'
p2174
asg330
(lp2175
g781
asbsg334
(dp2176
sg315
g317
sg336
(lp2177
g2161
asg386
g876
sbsg55
g1
(g56
g3
NtRp2178
(dp2179
g59
(I00
I01
tp2180
sg61
g678
sg63
g65
sg66
I00
sg16
Nsbsb(g645
g1670
tp2181
sg1
(g338
g3
NtRp2182
(dp2183
g23
I0
sg16
Nsg315
g317
sg322
(lp2184
sg21
S'auto_1464'
p2185
sg24
g1
(g25
g3
NtRp2186
(dp2187
g28
(lp2188
sbsg54
g1
(g324
g3
NtRp2189
(dp2190
g291
(lp2191
g1
(g338
g3
NtRp2192
(dp2193
g23
I0
sg16
Nsg315
g317
sg322
(lp2194
sg21
S'auto_1458'
p2195
sg24
g1
(g25
g3
NtRp2196
(dp2197
g28
(lp2198
sbsg54
g1
(g324
g3
NtRp2199
(dp2200
g291
(lp2201
g519
ag525
asg24
g1
(g25
g3
NtRp2202
(dp2203
g1201
(lp2204
g1204
asg330
(lp2205
g332
asbsg334
(dp2206
sg315
g317
sg336
(lp2207
g2192
asg386
g1
(g885
g3
NtRp2208
(dp2209
g16
S'GpuElemwise{add,no_inplace}'
p2210
sg888
g471
sg889
(dp2211
sg892
g893
sg894
g1
(g895
g3
NtRp2212
(dp2213
g898
Nsg899
(dp2214
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp2215
(dp2216
g59
(I00
I00
tp2217
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg24
g1
(g25
g3
NtRp2218
(dp2219
g1201
(lp2220
g1204
asg330
(lp2221
g332
asbsg334
(dp2222
sg315
g317
sg336
(lp2223
g2182
asg386
g1
(g885
g3
NtRp2224
(dp2225
g16
S'GpuElemwise{tanh,no_inplace}'
p2226
sg888
g479
sg889
(dp2227
sg892
g1911
sg894
g1
(g895
g3
NtRp2228
(dp2229
g898
Nsg899
(dp2230
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp2231
(dp2232
g59
(I00
I00
tp2233
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsb(g2134
g2147
tp2234
sg1
(g18
g3
NtRp2235
(dp2236
g23
I0
sg16
Nsg315
g317
sg322
(lp2237
sg21
S'auto_1426'
p2238
sg24
g1
(g25
g3
NtRp2239
(dp2240
g28
(lp2241
sbsg54
g1
(g324
g3
NtRp2242
(dp2243
g291
(lp2244
g339
asg24
g1
(g25
g3
NtRp2245
(dp2246
g1201
(lp2247
g2174
asg330
(lp2248
g332
asbsg334
(dp2249
sg315
g317
sg336
(lp2250
g2235
asg386
g876
sbsg55
g1
(g56
g3
NtRp2251
(dp2252
g59
(I00
I00
tp2253
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsb(g1509
g1
(g18
g3
NtRp2254
(dp2255
g21
S'auto_1394'
p2256
sg23
I0
sg24
g1
(g25
g3
NtRp2257
(dp2258
g28
(lp2259
sbsg16
Nsg54
g1
(g324
g3
NtRp2260
(dp2261
g291
(lp2262
g320
asg24
g1
(g25
g3
NtRp2263
sg336
(lp2264
g2254
asg386
g1
(g662
g3
NtRp2265
(dp2266
S'i'
I1
sbsbsg55
g665
sbtp2267
sg1
(g18
g3
NtRp2268
(dp2269
g23
I0
sg16
Nsg315
g317
sg322
(lp2270
sg21
S'auto_1467'
p2271
sg24
g1
(g25
g3
NtRp2272
(dp2273
g114
Nsg28
(lp2274
sbsg54
g1
(g324
g3
NtRp2275
(dp2276
g291
(lp2277
g2182
asg24
g1
(g25
g3
NtRp2278
(dp2279
g1201
(lp2280
g1352
asg330
(lp2281
g332
asbsg334
(dp2282
sg315
g317
sg336
(lp2283
g2268
asg386
g876
sbsg55
g1
(g56
g3
NtRp2284
(dp2285
g59
(I00
I00
tp2286
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsb(g2134
g2147
tp2287
sg1
(g18
g3
NtRp2288
(dp2289
g23
I0
sg16
Nsg315
g317
sg322
(lp2290
sg21
S'auto_1441'
p2291
sg24
g1
(g25
g3
NtRp2292
(dp2293
g638
I00
sg114
Nsg639
g640
sg28
g1706
sbsg54
g1
(g324
g3
NtRp2294
(dp2295
g291
(lp2296
g645
asg24
g1
(g25
g3
NtRp2297
(dp2298
g1201
(lp2299
g672
asg330
g1713
sbsg334
(dp2300
sg315
g317
sg336
(lp2301
g2288
asg386
g1718
sbsg55
g1720
sb(g645
tp2302
sg625
(g2134
g2147
tp2303
sg1
(g338
g3
NtRp2304
(dp2305
g23
I0
sg16
Nsg315
g317
sg322
(lp2306
sg21
S'auto_1471'
p2307
sg24
g1
(g25
g3
NtRp2308
(dp2309
g28
(lp2310
sbsg54
g1
(g324
g3
NtRp2311
(dp2312
g291
(lp2313
g2161
asg24
g1
(g25
g3
NtRp2314
(dp2315
g1201
(lp2316
g2174
asg330
(lp2317
g332
asbsg334
(dp2318
sg315
g317
sg336
(lp2319
g2304
asg386
g1
(g985
g3
NtRp2320
(dp2321
g114
Nsbsbsg55
g1
(g108
g3
NtRp2322
(dp2323
g59
(I00
I01
tp2324
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g678
sbsb(g645
g1670
tp2325
sg772
(g645
tp2326
sg1189
(g1
(g18
g3
NtRp2327
(dp2328
g21
S'auto_1480'
p2329
sg23
I0
sg24
g1
(g25
g3
NtRp2330
(dp2331
g28
(lp2332
sbsg16
Nsg54
g1
(g324
g3
NtRp2333
(dp2334
g291
(lp2335
g357
asg24
g1
(g25
g3
NtRp2336
sg336
(lp2337
g2327
asg386
g1
(g662
g3
NtRp2338
(dp2339
S'i'
I0
sbsbsg55
g665
sbg1
(g18
g3
NtRp2340
(dp2341
g21
S'auto_1481'
p2342
sg23
I0
sg24
g1
(g25
g3
NtRp2343
(dp2344
g28
(lp2345
sbsg16
Nsg54
g1
(g324
g3
NtRp2346
(dp2347
g291
(lp2348
g357
asg24
g1
(g25
g3
NtRp2349
sg336
(lp2350
g2340
asg386
g1
(g662
g3
NtRp2351
(dp2352
S'i'
I1
sbsbsg55
g665
sbtp2353
sg1
(g18
g3
NtRp2354
(dp2355
g23
I0
sg16
Nsg315
g317
sg322
(lp2356
sg21
S'auto_1468'
p2357
sg24
g1
(g25
g3
NtRp2358
(dp2359
g114
Nsg28
(lp2360
sbsg54
g1
(g324
g3
NtRp2361
(dp2362
g291
(lp2363
g713
asg24
g1
(g25
g3
NtRp2364
(dp2365
g1201
(lp2366
g1352
asg330
(lp2367
g332
asbsg334
(dp2368
sg315
g317
sg336
(lp2369
g2354
asg386
g876
sbsg55
g1
(g56
g3
NtRp2370
(dp2371
g59
(I00
tp2372
sg61
g273
sg63
g65
sg66
I00
sg16
Nsbsb(g1
(g18
g3
NtRp2373
(dp2374
g21
S'auto_1386'
p2375
sg23
I0
sg24
g1
(g25
g3
NtRp2376
(dp2377
g28
(lp2378
sbsg16
Nsg54
g1
(g324
g3
NtRp2379
(dp2380
g291
(lp2381
g724
asg24
g1
(g25
g3
NtRp2382
sg336
(lp2383
g2373
asg386
g1
(g662
g3
NtRp2384
(dp2385
S'i'
I0
sbsbsg55
g665
sbtp2386
sg748
(tsg1
(g338
g3
NtRp2387
(dp2388
g23
I0
sg16
Nsg315
g317
sg322
(lp2389
sg21
S'auto_1451'
p2390
sg24
g1
(g25
g3
NtRp2391
(dp2392
g28
(lp2393
sbsg54
g1
(g324
g3
NtRp2394
(dp2395
g291
(lp2396
g1
(g338
g3
NtRp2397
(dp2398
g23
I0
sg16
Nsg315
g317
sg322
(lp2399
sg21
S'auto_1445'
p2400
sg24
g1
(g25
g3
NtRp2401
(dp2402
g28
(lp2403
sbsg54
g1
(g324
g3
NtRp2404
(dp2405
g291
(lp2406
g357
ag363
asg24
g1
(g25
g3
NtRp2407
(dp2408
g1201
(lp2409
g1204
asg330
(lp2410
g332
asbsg334
(dp2411
sg315
g317
sg336
(lp2412
g2397
asg386
g1
(g885
g3
NtRp2413
(dp2414
g16
S'GpuElemwise{add,no_inplace}'
p2415
sg888
g471
sg889
(dp2416
sg892
g893
sg894
g1
(g895
g3
NtRp2417
(dp2418
g898
Nsg899
(dp2419
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp2420
(dp2421
g59
(I00
I00
tp2422
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg24
g1
(g25
g3
NtRp2423
(dp2424
g1201
(lp2425
g1204
asg330
(lp2426
g332
asbsg334
(dp2427
sg315
g317
sg336
(lp2428
g2387
asg386
g1
(g885
g3
NtRp2429
(dp2430
g16
S'GpuElemwise{tanh,no_inplace}'
p2431
sg888
g479
sg889
(dp2432
sg892
g1911
sg894
g1
(g895
g3
NtRp2433
(dp2434
g898
Nsg899
(dp2435
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp2436
(dp2437
g59
(I00
I00
tp2438
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsb(g2327
g2340
tp2439
sg1700
(g1509
tp2440
sg1
(g18
g3
NtRp2441
(dp2442
g23
I0
sg16
Nsg315
g317
sg322
(lp2443
sg21
S'auto_1383'
p2444
sg24
g1
(g25
g3
NtRp2445
(dp2446
g28
(lp2447
(lp2448
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2449
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2450
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2451
a(g81
I39
g51
S'self._set_prediction()'
tp2452
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp2453
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2454
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2455
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp2456
aasbsg54
g1
(g324
g3
NtRp2457
(dp2458
g291
(lp2459
g1742
ag2046
asg24
g1
(g25
g3
NtRp2460
(dp2461
g1201
(lp2462
g1872
asg330
(lp2463
g333
asbsg334
(dp2464
sg315
g317
sg336
(lp2465
g2441
asg386
g1
(ctheano.tensor.basic
Dot
p2466
g3
NtRp2467
sbsg55
g1
(g56
g3
NtRp2468
(dp2469
g59
(I00
I01
tp2470
sg61
S'float32'
p2471
sg63
g65
sg66
I00
sg16
Nsbsb(g1509
g1670
tp2472
sg2397
(g2327
g2340
tp2473
sg1810
(g1509
g1
(g18
g3
NtRp2474
(dp2475
g21
S'auto_1392'
p2476
sg23
I0
sg24
g1
(g25
g3
NtRp2477
(dp2478
g28
(lp2479
sbsg16
Nsg54
g1
(g324
g3
NtRp2480
(dp2481
g291
(lp2482
g345
asg24
g1
(g25
g3
NtRp2483
sg336
(lp2484
g2474
asg386
g1
(g662
g3
NtRp2485
(dp2486
S'i'
I1
sbsbsg55
g665
sbtp2487
sg784
(g645
g1670
tp2488
sg374
(g1615
tp2489
sg1829
(g1509
g2474
tp2490
sg1337
(g645
tp2491
sg1264
(g2134
g2147
tp2492
sg1742
(g1509
g1523
tp2493
sg1
(g18
g3
NtRp2494
(dp2495
g23
I0
sg16
Nsg315
g317
sg322
(lp2496
sg21
S'auto_1469'
p2497
sg24
g1
(g25
g3
NtRp2498
(dp2499
g114
Nsg28
(lp2500
sbsg54
g1
(g324
g3
NtRp2501
(dp2502
g291
(lp2503
g2288
ag1723
ag2268
ag2354
ag2090
asg24
g1
(g25
g3
NtRp2504
(dp2505
g1201
(lp2506
g1352
asg330
(lp2507
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p2508
ag332
asbsg334
(dp2509
sg315
g317
sg336
(lp2510
g2494
asg386
g1
(ctheano.tensor.blas_c
CGemv
p2511
g3
NtRp2512
(dp2513
g401
I00
sbsbsg55
g1720
sb(g645
tp2514
sg320
(g1509
g2254
tp2515
sg1781
(g1509
g1523
tp2516
sg1523
(tsg1762
(g1509
g1523
tp2517
sg1
(g18
g3
NtRp2518
(dp2519
g23
I0
sg16
Nsg315
g317
sg322
(lp2520
sg21
S'auto_1494'
p2521
sg24
g1
(g25
g3
NtRp2522
(dp2523
g28
(lp2524
sbsg54
g1
(g324
g3
NtRp2525
(dp2526
g291
(lp2527
g2090
asg24
g1
(g25
g3
NtRp2528
(dp2529
g1201
(lp2530
S'constant_folding'
p2531
asg409
g1
(g324
g3
NtRp2532
(dp2533
g291
(lp2534
g1
(g413
g3
NtRp2535
(dp2536
g21
S'auto_1503'
p2537
sg23
Nsg24
g1
(g25
g3
NtRp2538
sg16
Nsg54
Nsg55
g440
sbasg24
g1
(g25
g3
NtRp2539
sg336
(lp2540
g1
(g413
g3
NtRp2541
(dp2542
g21
S'auto_1504'
p2543
sg23
I0
sg24
g1
(g25
g3
NtRp2544
sg16
Nsg54
g2532
sg55
g1
(g418
g3
NtRp2545
(dp2546
g61
g708
sbsbasg386
g1
(ctheano.scalar.basic
Cast
p2547
g3
NtRp2548
(dp2549
g473
g1
(ctheano.scalar.basic
specific_out
p2550
g3
NtRp2551
(dp2552
S'spec'
p2553
(g2545
tp2554
sbsS'o_type'
p2555
g2545
sg16
S'convert_to_float64'
p2556
sS'ctor'
p2557
cnumpy
float64
p2558
sbsbsg330
(lp2559
g1352
asbsg334
(dp2560
sg315
g317
sg336
(lp2561
g2518
asg386
g1
(g1886
g3
NtRp2562
(dp2563
g1889
S'tensor.basic'
p2564
sg16
Nsg888
g2548
sg889
(dp2565
sg892
Nsg894
g1
(g895
g3
NtRp2566
(dp2567
g898
Nsg899
(dp2568
sbsS'__oplist_tags'
p2569
(lp2570
S'casting'
p2571
asg901
I00
sbsbsg55
g763
sb(tsg1956
(g1670
g1
(g18
g3
NtRp2572
(dp2573
g21
S'auto_1387'
p2574
sg23
I0
sg24
g1
(g25
g3
NtRp2575
(dp2576
g28
(lp2577
sbsg16
Nsg54
g1
(g324
g3
NtRp2578
(dp2579
g291
(lp2580
g536
asg24
g1
(g25
g3
NtRp2581
sg336
(lp2582
g2572
asg386
g1
(g662
g3
NtRp2583
(dp2584
S'i'
I0
sbsbsg55
g665
sbtp2585
sg1
(g18
g3
NtRp2586
(dp2587
g23
I0
sg16
Nsg315
g317
sg322
(lp2588
sg21
S'auto_1491'
p2589
sg24
g1
(g25
g3
NtRp2590
(dp2591
g28
(lp2592
sbsg54
g1
(g324
g3
NtRp2593
(dp2594
g291
(lp2595
g1723
asg24
g1
(g25
g3
NtRp2596
(dp2597
g1201
(lp2598
g2531
asg409
g1
(g324
g3
NtRp2599
(dp2600
g291
(lp2601
g1
(g413
g3
NtRp2602
(dp2603
g21
S'auto_1500'
p2604
sg23
Nsg24
g1
(g25
g3
NtRp2605
sg16
Nsg54
Nsg55
g440
sbasg24
g1
(g25
g3
NtRp2606
sg336
(lp2607
g1
(g413
g3
NtRp2608
(dp2609
g21
S'auto_1501'
p2610
sg23
I0
sg24
g1
(g25
g3
NtRp2611
sg16
Nsg54
g2599
sg55
g2545
sbasg386
g2548
sbsg330
(lp2612
g1352
asbsg334
(dp2613
sg315
g317
sg336
(lp2614
g2586
asg386
g2562
sbsg55
g706
sb(tsg2036
(g2373
tp2615
sg1
(g18
g3
NtRp2616
(dp2617
g23
I0
sg16
Nsg315
g317
sg322
(lp2618
sg21
S'auto_1384'
p2619
sg24
g1
(g25
g3
NtRp2620
(dp2621
g28
(lp2622
(lp2623
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2624
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2625
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2626
a(g81
I39
g51
S'self._set_prediction()'
tp2627
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp2628
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2629
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2630
a(g1583
I123
g1584
S'activation = activation + self.b'
tp2631
aasbsg54
g1
(g324
g3
NtRp2632
(dp2633
g291
(lp2634
g1
(g18
g3
NtRp2635
(dp2636
g23
I0
sg16
Nsg315
g317
sg322
(lp2637
sg21
S'auto_1412'
p2638
sg24
g1
(g25
g3
NtRp2639
(dp2640
g28
(lp2641
sbsg54
g1
(g324
g3
NtRp2642
(dp2643
g291
(lp2644
g1
(g18
g3
NtRp2645
(dp2646
g23
I0
sg16
Nsg315
g317
sg322
(lp2647
sg21
S'auto_1422'
p2648
sg24
g1
(g25
g3
NtRp2649
(dp2650
g28
g2500
sbsg54
g1
(g324
g3
NtRp2651
(dp2652
g291
(lp2653
g1700
ag1723
ag1742
ag2036
ag2090
asg24
g1
(g25
g3
NtRp2654
(dp2655
g1201
(lp2656
g332
asg330
g2507
sbsg334
(dp2657
sg315
g317
sg336
(lp2658
g2645
asg386
g2512
sbsg55
g1720
sbasg24
g1
(g25
g3
NtRp2659
(dp2660
g1201
(lp2661
g332
asg330
(lp2662
g1714
ag332
asbsg334
(dp2663
sg315
g317
sg336
(lp2664
g2635
asg386
g1
(g1659
g3
NtRp2665
(dp2666
g390
(lp2667
sg392
(lp2668
I0
asg394
(lp2669
I1
asg396
(dp2670
I0
(lp2671
I0
assg399
g917
sg401
I01
sg402
g918
sbsbsg55
g1
(g56
g3
NtRp2672
(dp2673
g59
(I00
I01
tp2674
sg61
g678
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp2675
(dp2676
g23
I0
sg16
Nsg315
g317
sg322
(lp2677
sg21
S'auto_1374'
p2678
sg24
g1
(g25
g3
NtRp2679
(dp2680
g28
(lp2681
(lp2682
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2683
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2684
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2685
a(g81
I39
g51
S'self._set_prediction()'
tp2686
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp2687
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2688
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2689
a(g1583
I123
g1584
S'activation = activation + self.b'
tp2690
aasbsg54
g1
(g324
g3
NtRp2691
(dp2692
g291
(lp2693
g1
(g18
g3
NtRp2694
(dp2695
g23
I0
sg16
Nsg315
g317
sg322
(lp2696
sg21
S'auto_1368'
p2697
sg24
g1
(g25
g3
NtRp2698
(dp2699
g28
(lp2700
(lp2701
(g1583
I123
g1584
S'activation = activation + self.b'
tp2702
a(g1586
I128
g1587
S'return theano.tensor.basic.add(self, other)'
tp2703
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp2704
a(g1592
I576
g1593
S'inputs = list(map(as_tensor_variable, inputs))'
tp2705
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp2706
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp2707
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp2708
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp2709
aasbsg54
g1
(g324
g3
NtRp2710
(dp2711
g291
(lp2712
g801
asg24
g1
(g25
g3
NtRp2713
(dp2714
g1201
(lp2715
g332
asg330
(lp2716
g333
asbsg334
(dp2717
sg315
g317
sg336
(lp2718
g2694
asg386
g876
sbsg55
g1
(g56
g3
NtRp2719
(dp2720
g59
g820
sg61
g245
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2721
(dp2722
g1201
(lp2723
g332
asg330
(lp2724
g333
asbsg334
(dp2725
sg315
g317
sg336
(lp2726
g2675
asg386
g1
(g1659
g3
NtRp2727
(dp2728
g390
(lp2729
sg392
(lp2730
I0
asg394
(lp2731
I0
asg396
(dp2732
I0
(lp2733
I0
assg399
g820
sg401
I01
sg402
g821
sbsbsg55
g1
(g56
g3
NtRp2734
(dp2735
g59
(I01
I01
tp2736
sg61
g245
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2737
(dp2738
g1201
(lp2739
g332
asg330
(lp2740
g333
asbsg334
(dp2741
sg315
g317
sg336
(lp2742
g2616
asg386
g1887
sbsg55
g1
(g56
g3
NtRp2743
(dp2744
g59
(I00
I01
tp2745
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsb(g1509
g1670
tp2746
sg536
(g2572
tp2747
sg2694
(g1670
tp2748
sg507
(g2120
g1523
tp2749
sg1366
(g645
g1670
tp2750
sg1975
(g2572
tp2751
sg363
(g1670
g1615
tp2752
sg2675
(g1670
g1670
tp2753
sg790
(g1670
g1670
tp2754
sg1
(g18
g3
NtRp2755
(dp2756
g23
I0
sg16
Nsg315
g317
sg322
(lp2757
sg21
S'auto_1377'
p2758
sg24
g1
(g25
g3
NtRp2759
(dp2760
g28
(lp2761
(lp2762
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2763
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2764
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2765
a(g81
I39
g51
S'self._set_prediction()'
tp2766
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp2767
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2768
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2769
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp2770
aasbsg54
g1
(g324
g3
NtRp2771
(dp2772
g291
(lp2773
g320
ag1839
asg24
g1
(g25
g3
NtRp2774
(dp2775
g1201
(lp2776
g1872
asg330
(lp2777
g333
asbsg334
(dp2778
sg315
g317
sg336
(lp2779
g2755
asg386
g2467
sbsg55
g1
(g56
g3
NtRp2780
(dp2781
g59
(I00
I00
tp2782
sg61
S'float32'
p2783
sg63
g65
sg66
I00
sg16
Nsbsb(g1509
g2474
tp2784
sg724
(g2373
g1670
tp2785
sg2645
(g1509
tp2786
sg2090
(tsg501
(g2327
g2340
tp2787
sg863
(g1509
g1670
tp2788
sg1509
(tsg1396
(g1509
g1670
tp2789
sg801
(g1670
tp2790
sg1
(g18
g3
NtRp2791
(dp2792
g23
I0
sg16
Nsg315
g317
sg322
(lp2793
sg21
S'auto_1380'
p2794
sg24
g1
(g25
g3
NtRp2795
(dp2796
g28
(lp2797
(lp2798
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp2799
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp2800
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp2801
a(g81
I39
g51
S'self._set_prediction()'
tp2802
a(g1641
I518
g1642
S'prediction = self.get_output(deterministic=True)'
tp2803
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp2804
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2805
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp2806
aasbsg54
g1
(g324
g3
NtRp2807
(dp2808
g291
(lp2809
g1791
ag1919
asg24
g1
(g25
g3
NtRp2810
(dp2811
g1201
(lp2812
g1872
asg330
(lp2813
g333
asbsg334
(dp2814
sg315
g317
sg336
(lp2815
g2791
asg386
g2467
sbsg55
g1
(g56
g3
NtRp2816
(dp2817
g59
(I00
I00
tp2818
sg61
S'float32'
p2819
sg63
g65
sg66
I00
sg16
Nsbsb(g1509
g1523
tp2820
sg1
(g338
g3
NtRp2821
(dp2822
g23
I0
sg16
Nsg315
g317
sg322
(lp2823
sg21
S'auto_1485'
p2824
sg24
g1
(g25
g3
NtRp2825
(dp2826
g28
(lp2827
sbsg54
g1
(g324
g3
NtRp2828
(dp2829
g291
(lp2830
g1
(g18
g3
NtRp2831
(dp2832
g23
I0
sg16
Nsg315
g317
sg322
(lp2833
sg21
S'auto_1496'
p2834
sg24
g1
(g25
g3
NtRp2835
(dp2836
g28
(lp2837
sbsg54
g1
(g324
g3
NtRp2838
(dp2839
g291
(lp2840
g1337
asg24
g1
(g25
g3
NtRp2841
(dp2842
g1201
(lp2843
g2174
asg330
(lp2844
g1352
asbsg334
(dp2845
sg315
g317
sg336
(lp2846
g2831
asg386
g876
sbsg55
g1
(g56
g3
NtRp2847
(dp2848
g59
(I00
tp2849
sg61
g678
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp2850
(dp2851
g1201
(lp2852
g2174
asg330
(lp2853
g781
asbsg334
(dp2854
sg315
g317
sg336
(lp2855
g2821
asg386
g1
(g985
g3
NtRp2856
(dp2857
g114
Nsbsbsg55
g1
(g108
g3
NtRp2858
(dp2859
g59
(I00
tp2860
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g678
sbsb(g645
tp2861
sg2192
(g2134
g2147
tp2862
sg345
(g1
(g18
g3
NtRp2863
(dp2864
g21
S'auto_1391'
p2865
sg23
I0
sg24
g1
(g25
g3
NtRp2866
(dp2867
g28
(lp2868
sbsg16
Nsg54
g1
(g324
g3
NtRp2869
(dp2870
g291
(lp2871
g345
asg24
g1
(g25
g3
NtRp2872
sg336
(lp2873
g2863
asg386
g1
(g662
g3
NtRp2874
(dp2875
S'i'
I0
sbsbsg55
g665
sbg2474
tp2876
sg2046
(g2373
g1670
tp2877
sg1
(ctheano.scalar.basic
ScalarConstant
p2878
g3
NtRp2879
(dp2880
g21
S'auto_1408'
p2881
sg23
Nsg24
g1
(g25
g3
NtRp2882
(dp2883
g28
(lp2884
sbsg16
Nsg710
g1015
(g1573
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2885
sg322
(lp2886
sg55
g1
(g418
g3
NtRp2887
(dp2888
g61
g667
sbsb(tsg2635
(g1509
g1670
tp2889
sg357
(g2327
g2340
tp2890
sg631
(g645
tp2891
sg1
(g18
g3
NtRp2892
(dp2893
g23
I0
sg16
Nsg315
g317
sg322
(lp2894
sg21
S'auto_1397'
p2895
sg24
g1
(g25
g3
NtRp2896
(dp2897
g28
(lp2898
sbsg54
g1
(g324
g3
NtRp2899
(dp2900
g291
(lp2901
g1742
ag2046
asg24
g1
(g25
g3
NtRp2902
(dp2903
g1201
(lp2904
g1714
asg330
(lp2905
g1872
asbsg334
(dp2906
sg315
g317
sg336
(lp2907
g2892
asg386
g1876
sbsg55
g1
(g56
g3
NtRp2908
(dp2909
g59
(I00
I01
tp2910
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsb(g1509
g1670
tp2911
sg1
(g18
g3
NtRp2912
(dp2913
g23
I0
sg16
Nsg315
g317
sg322
(lp2914
sg21
S'auto_1407'
p2915
sg24
g1
(g25
g3
NtRp2916
(dp2917
g28
(lp2918
sbsg54
g1
(g324
g3
NtRp2919
(dp2920
g291
(lp2921
g1742
asg24
g1
(g25
g3
NtRp2922
(dp2923
g1201
(lp2924
g659
asg330
(lp2925
g1714
asbsg334
(dp2926
sg315
g317
sg336
(lp2927
g2912
asg386
g1
(ctheano.compile.ops
Shape
p2928
g3
NtRp2929
sbsg55
g1
(g56
g3
NtRp2930
(dp2931
g59
(I00
tp2932
sg61
g667
sg63
g668
sg66
I00
sg16
Nsbsb(g1
(g683
g3
NtRp2933
(dp2934
g21
S'auto_65715'
p2935
sg23
Nsg24
g1
(g25
g3
NtRp2936
(dp2937
g28
(lp2938
(lp2939
(g691
I334
g696
S'state = deepcopy(state, memo)'
tp2940
a(g691
I163
g694
S'y = copier(x, memo)'
tp2941
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp2942
a(g691
I163
g694
S'y = copier(x, memo)'
tp2943
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp2944
a(g691
I163
g694
S'y = copier(x, memo)'
tp2945
a(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp2946
a(g691
I174
g694
S'y = copier(memo)'
tp2947
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp2948
(dp2949
g59
(tsg61
S'int64'
p2950
sg63
g668
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp2951
(I1
(tg1573
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp2952
sg1
(g18
g3
NtRp2953
(dp2954
g23
I0
sg16
Nsg315
g317
sg322
(lp2955
sg21
S'auto_1470'
p2956
sg24
g1
(g25
g3
NtRp2957
(dp2958
g28
g2641
sbsg54
g1
(g324
g3
NtRp2959
(dp2960
g291
(lp2961
g2494
asg24
g1
(g25
g3
NtRp2962
(dp2963
g1201
(lp2964
g781
asg330
g2662
sbsg334
(dp2965
sg315
g317
sg336
(lp2966
g2953
asg386
g2665
sbsg55
g2672
sb(g645
g1670
tp2967
sg1
(g18
g3
NtRp2968
(dp2969
g23
I0
sg16
Nsg315
g317
sg322
(lp2970
sg21
S'auto_1499'
p2971
sg24
g1
(g25
g3
NtRp2972
(dp2973
g28
(lp2974
sbsg54
g1
(g324
g3
NtRp2975
(dp2976
g291
(lp2977
g631
asg24
g1
(g25
g3
NtRp2978
(dp2979
g1201
(lp2980
g2174
asg330
(lp2981
g672
asbsg334
(dp2982
sg315
g317
sg336
(lp2983
g2968
asg386
g876
sbsg55
g1
(g56
g3
NtRp2984
(dp2985
g59
(I00
tp2986
sg61
g678
sg63
g65
sg66
I00
sg16
Nsbsb(g645
tp2987
sg1723
(tsg852
(g645
g1670
tp2988
sg684
(tsg1791
(g1509
g2474
tp2989
sg2831
(g645
tp2990
sg645
(tsg1839
(g2863
g2474
tp2991
sg339
(g1509
g2254
tp2992
sg1
(g338
g3
NtRp2993
(dp2994
g23
I0
sg16
Nsg315
g317
sg322
(lp2995
sg21
S'auto_1488'
p2996
sg24
g1
(g25
g3
NtRp2997
(dp2998
g28
(lp2999
sbsg54
g1
(g324
g3
NtRp3000
(dp3001
g291
(lp3002
g2968
asg24
g1
(g25
g3
NtRp3003
(dp3004
g1201
(lp3005
g2174
asg330
(lp3006
g1352
asbsg334
(dp3007
sg315
g317
sg336
(lp3008
g2993
asg386
g1
(g985
g3
NtRp3009
(dp3010
g114
Nsbsbsg55
g1357
sb(g645
tp3011
sg713
(g2373
tp3012
sg1
(g18
g3
NtRp3013
(dp3014
g23
I0
sg16
Nsg315
g317
sg322
(lp3015
sg21
S'auto_1409'
p3016
sg24
g1
(g25
g3
NtRp3017
(dp3018
g28
(lp3019
sbsg54
g1
(g324
g3
NtRp3020
(dp3021
g291
(lp3022
g1499
ag2879
asg24
g1
(g25
g3
NtRp3023
(dp3024
g1201
(lp3025
g1536
asg330
(lp3026
g1714
asbsg334
(dp3027
sg315
g317
sg336
(lp3028
g3013
asg386
g1
(ctheano.tensor.subtensor
Subtensor
p3029
g3
NtRp3030
(dp3031
S'idx_list'
p3032
(g2887
tp3033
sbsbsg55
g1
(g56
g3
NtRp3034
(dp3035
g59
(tsg61
g667
sg63
g668
sg66
I00
sg16
Nsbsb(tsg525
(g1670
g2572
tp3036
ssS'lscalar_one'
p3037
g1670
sS'shape_of_reverse_index'
p3038
(dp3039
g2327
g148
((lp3040
g1189
ag2387
ag357
ag2397
ag501
atRp3041
sg2616
g148
((ltRp3042
sg1554
g148
((lp3043
g1499
atRp3044
sg1189
g148
((ltRp3045
sg2387
g148
((ltRp3046
sg1523
g148
((lp3047
g1919
ag2791
ag1781
ag1762
ag507
ag1742
atRp3048
sg2120
g148
((lp3049
g1919
ag507
atRp3050
sg2586
g148
((ltRp3051
sg2134
g148
((lp3052
g519
ag2192
ag2268
ag2182
ag1264
ag625
atRp3053
sg2441
g148
((ltRp3054
sg1690
g148
((ltRp3055
sg1
(g18
g3
NtRp3056
(dp3057
g21
S'auto_1497'
p3058
sg23
I0
sg24
g1
(g25
g3
NtRp3059
(dp3060
g28
(lp3061
sbsg16
Nsg54
g1
(g324
g3
NtRp3062
(dp3063
g291
(lp3064
g1337
asg24
g1
(g25
g3
NtRp3065
sg336
(lp3066
g3056
asg386
g1
(g662
g3
NtRp3067
(dp3068
S'i'
I0
sbsbsg55
g665
sbg148
((lp3069
g1337
ag2831
atRp3070
sg1615
g148
((lp3071
g1629
ag1575
ag374
ag363
atRp3072
sg1264
g148
((ltRp3073
sg2494
g148
((ltRp3074
sg645
g148
((lp3075
g784
ag2953
ag1337
ag2968
ag2494
ag772
ag2161
ag852
ag631
ag2831
ag2993
ag2288
ag2821
ag1366
ag863
ag2304
atRp3076
sg2340
g148
((lp3077
g1189
ag2387
ag357
ag2397
ag501
atRp3078
sg2518
g148
((ltRp3079
sg2572
g148
((lp3080
g536
ag1956
ag525
ag1975
atRp3081
sg2821
g148
((ltRp3082
sg1366
g148
((ltRp3083
sg2182
g148
((ltRp3084
sg2863
g148
((lp3085
g345
ag1839
atRp3086
sg2993
g148
((ltRp3087
sg2147
g148
((lp3088
g519
ag2192
ag2268
ag2182
ag1264
ag625
atRp3089
sg2254
g148
((lp3090
g320
ag2235
ag339
atRp3091
sg863
g148
((ltRp3092
sg1509
g148
((lp3093
g2755
ag1762
ag339
ag2892
ag320
ag2616
ag2635
ag1781
ag1742
ag863
ag2791
ag1396
ag1791
ag1829
ag1700
ag1810
ag2645
ag1690
ag2441
ag2235
atRp3094
sg1670
g148
((lp3095
g2953
ag2616
ag2161
ag2304
ag863
ag784
ag1956
ag525
ag2441
ag2635
ag1366
ag363
ag790
ag724
ag2675
ag2694
ag1396
ag2892
ag2046
ag1629
ag852
ag801
atRp3096
sg2791
g148
((ltRp3097
sg2933
g148
((lp3098
g2912
atRp3099
sg1396
g148
((ltRp3100
sg2474
g148
((lp3101
g2755
ag1839
ag1791
ag1829
ag1810
ag345
atRp3102
sg2755
g148
((ltRp3103
sg2892
g148
((ltRp3104
sg2912
g148
((ltRp3105
sg2953
g148
((ltRp3106
sg2288
g148
((ltRp3107
sg2235
g148
((ltRp3108
sg1
(g18
g3
NtRp3109
(dp3110
g21
S'auto_1558'
p3111
sg23
I0
sg24
g1
(g25
g3
NtRp3112
(dp3113
g28
(lp3114
sbsg16
Nsg54
g1
(g324
g3
NtRp3115
(dp3116
g291
(lp3117
g772
asg24
g1
(g25
g3
NtRp3118
sg336
(lp3119
g3109
asg386
g1
(g662
g3
NtRp3120
(dp3121
S'i'
I0
sbsbsg55
g665
sbg148
((lp3122
g772
atRp3123
sg1337
g148
((ltRp3124
sg2373
g148
((lp3125
g724
ag713
ag2036
ag2046
ag2354
atRp3126
sg3013
g148
((ltRp3127
sg2304
g148
((ltRp3128
ssbsS'apply_nodes'
p3129
g148
((lp3130
g371
ag642
ag721
ag522
ag628
ag360
ag798
ag504
ag342
ag325
ag855
ag653
ag775
ag533
ag787
atRp3131
sS'update_mapping'
p3132
(dp3133
sS'_features'
p3134
(lp3135
g1
(ctheano.gof.toolbox
ReplaceValidate
p3136
g3
NtRp3137
(dp3138
S'fail_validate'
p3139
I00
sS'_nodes_removed'
p3140
g148
((ltRp3141
sba(itheano.compile.function_module
Supervisor
p3142
(dp3143
S'protected'
p3144
(lp3145
g320
ag345
ag374
ag507
ag536
ag724
ag801
asbag1
(ctheano.gof.toolbox
PreserveVariableAttributes
p3146
g3
NtRp3147
ag996
ag1494
ag1042
asbsg336
g1
(ctheano.compile.io
SymbolicOutput
p3148
g3
NtRp3149
(dp3150
g301
g1
(g18
g3
NtRp3151
(dp3152
g21
S'auto_1360'
p3153
sg23
I0
sg24
g1
(g25
g3
NtRp3154
(dp3155
g28
g2622
sbsg16
Nsg54
g1
(g324
g3
NtRp3156
(dp3157
g291
(lp3158
g1
(g18
g3
NtRp3159
(dp3160
g21
S'auto_1357'
p3161
sg23
I0
sg24
g1
(g25
g3
NtRp3162
(dp3163
g28
g2447
sbsg16
Nsg54
g1
(g324
g3
NtRp3164
(dp3165
g291
(lp3166
g1
(g18
g3
NtRp3167
(dp3168
g21
S'auto_1355'
p3169
sg23
I0
sg24
g1
(g25
g3
NtRp3170
(dp3171
g28
g1748
sbsg16
Nsg54
g1
(g324
g3
NtRp3172
(dp3173
g291
(lp3174
g1
(g18
g3
NtRp3175
(dp3176
g21
S'auto_1354'
p3177
sg23
I0
sg24
g1
(g25
g3
NtRp3178
(dp3179
g28
g1768
sbsg16
Nsg54
g1
(g324
g3
NtRp3180
(dp3181
g291
(lp3182
g1
(g18
g3
NtRp3183
(dp3184
g21
S'auto_1351'
p3185
sg23
I0
sg24
g1
(g25
g3
NtRp3186
(dp3187
g28
g2797
sbsg16
Nsg54
g1
(g324
g3
NtRp3188
(dp3189
g291
(lp3190
g1
(g18
g3
NtRp3191
(dp3192
g21
S'auto_1349'
p3193
sg23
I0
sg24
g1
(g25
g3
NtRp3194
(dp3195
g28
g1797
sbsg16
Nsg54
g1
(g324
g3
NtRp3196
(dp3197
g291
(lp3198
g1
(g18
g3
NtRp3199
(dp3200
g21
S'auto_1348'
p3201
sg23
I0
sg24
g1
(g25
g3
NtRp3202
(dp3203
g28
g1816
sbsg16
Nsg54
g1
(g324
g3
NtRp3204
(dp3205
g291
(lp3206
g1
(g18
g3
NtRp3207
(dp3208
g21
S'auto_1345'
p3209
sg23
I0
sg24
g1
(g25
g3
NtRp3210
(dp3211
g28
g2761
sbsg16
Nsg54
g1
(g324
g3
NtRp3212
(dp3213
g291
(lp3214
g19
ag1
(g18
g3
NtRp3215
(dp3216
g21
S'auto_1344'
p3217
sg23
I0
sg24
g1
(g25
g3
NtRp3218
(dp3219
g28
g1845
sbsg16
Nsg54
g1
(g324
g3
NtRp3220
(dp3221
g291
(lp3222
g124
asg24
g1
(g25
g3
NtRp3223
sg336
(lp3224
g3215
asg386
g876
sbsg55
g1865
sbasg24
g1
(g25
g3
NtRp3225
sg336
(lp3226
g3207
asg386
g2467
sbsg55
g2780
sbag1
(g18
g3
NtRp3227
(dp3228
g21
S'auto_1347'
p3229
sg23
I0
sg24
g1
(g25
g3
NtRp3230
(dp3231
g28
g1635
sbsg16
Nsg54
g1
(g324
g3
NtRp3232
(dp3233
g291
(lp3234
g1
(g18
g3
NtRp3235
(dp3236
g21
S'auto_1346'
p3237
sg23
I0
sg24
g1
(g25
g3
NtRp3238
(dp3239
g28
g1581
sbsg16
Nsg54
g1
(g324
g3
NtRp3240
(dp3241
g291
(lp3242
g71
asg24
g1
(g25
g3
NtRp3243
sg336
(lp3244
g3235
asg386
g876
sbsg55
g1613
sbasg24
g1
(g25
g3
NtRp3245
sg336
(lp3246
g3227
asg386
g1660
sbsg55
g1667
sbasg24
g1
(g25
g3
NtRp3247
sg336
(lp3248
g3199
asg386
g1887
sbsg55
g1898
sbasg24
g1
(g25
g3
NtRp3249
sg336
(lp3250
g3191
asg386
g1907
sbsg55
g1916
sbag1
(g18
g3
NtRp3251
(dp3252
g21
S'auto_1350'
p3253
sg23
I0
sg24
g1
(g25
g3
NtRp3254
(dp3255
g28
g1925
sbsg16
Nsg54
g1
(g324
g3
NtRp3256
(dp3257
g291
(lp3258
g189
asg24
g1
(g25
g3
NtRp3259
sg336
(lp3260
g3251
asg386
g876
sbsg55
g1944
sbasg24
g1
(g25
g3
NtRp3261
sg336
(lp3262
g3183
asg386
g2467
sbsg55
g2816
sbag1
(g18
g3
NtRp3263
(dp3264
g21
S'auto_1353'
p3265
sg23
I0
sg24
g1
(g25
g3
NtRp3266
(dp3267
g28
g1962
sbsg16
Nsg54
g1
(g324
g3
NtRp3268
(dp3269
g291
(lp3270
g1
(g18
g3
NtRp3271
(dp3272
g21
S'auto_1352'
p3273
sg23
I0
sg24
g1
(g25
g3
NtRp3274
(dp3275
g28
g1981
sbsg16
Nsg54
g1
(g324
g3
NtRp3276
(dp3277
g291
(lp3278
g162
asg24
g1
(g25
g3
NtRp3279
sg336
(lp3280
g3271
asg386
g876
sbsg55
g2000
sbasg24
g1
(g25
g3
NtRp3281
sg336
(lp3282
g3263
asg386
g2008
sbsg55
g2015
sbasg24
g1
(g25
g3
NtRp3283
sg336
(lp3284
g3175
asg386
g1887
sbsg55
g2024
sbasg24
g1
(g25
g3
NtRp3285
sg336
(lp3286
g3167
asg386
g1907
sbsg55
g2033
sbag1
(g18
g3
NtRp3287
(dp3288
g21
S'auto_1356'
p3289
sg23
I0
sg24
g1
(g25
g3
NtRp3290
(dp3291
g28
g2052
sbsg16
Nsg54
g1
(g324
g3
NtRp3292
(dp3293
g291
(lp3294
g250
asg24
g1
(g25
g3
NtRp3295
sg336
(lp3296
g3287
asg386
g876
sbsg55
g2071
sbasg24
g1
(g25
g3
NtRp3297
sg336
(lp3298
g3159
asg386
g2467
sbsg55
g2468
sbag1
(g18
g3
NtRp3299
(dp3300
g21
S'auto_1359'
p3301
sg23
I0
sg24
g1
(g25
g3
NtRp3302
(dp3303
g28
g2681
sbsg16
Nsg54
g1
(g324
g3
NtRp3304
(dp3305
g291
(lp3306
g1
(g18
g3
NtRp3307
(dp3308
g21
S'auto_1358'
p3309
sg23
I0
sg24
g1
(g25
g3
NtRp3310
(dp3311
g28
g2700
sbsg16
Nsg54
g1
(g324
g3
NtRp3312
(dp3313
g291
(lp3314
g222
asg24
g1
(g25
g3
NtRp3315
sg336
(lp3316
g3307
asg386
g876
sbsg55
g2719
sbasg24
g1
(g25
g3
NtRp3317
sg336
(lp3318
g3299
asg386
g2727
sbsg55
g2734
sbasg24
g1
(g25
g3
NtRp3319
sg336
(lp3320
g3151
asg386
g1887
sbsg55
g2743
sbsg296
I00
sbsS'on_unused_input'
p3321
NsS'accept_inplace'
p3322
I00
sS'mode'
p3323
g1
(ctheano.compile.mode
Mode
p3324
g3
NtRp3325
(S'cvm'
p3326
g1
(ctheano.gof.optdb
Query
p3327
g3
NtRp3328
(dp3329
S'subquery'
p3330
(dp3331
sS'position_cutoff'
p3332
Finf
sg16
S'OPT_FAST_RUN'
p3333
sS'exclude'
p3334
g1
(g1031
g3
NtRp3335
(dp3336
g1034
g1
(g1035
g3
NtRp3337
(lp3338
g3337
ag3337
absg1038
(dp3339
sbsS'require'
p3340
g1
(g1031
g3
NtRp3341
(dp3342
g1034
g1
(g1035
g3
NtRp3343
(lp3344
g3343
ag3343
absg1038
(dp3345
sbsS'include'
p3346
g1
(g1031
g3
NtRp3347
(dp3348
g1034
g1
(g1035
g3
NtRp3349
(lp3350
g1
(g1035
g3
NtRp3351
(lp3352
g3349
ag3349
aS'fast_run'
p3353
abag3351
absg1038
(dp3354
g3353
g3351
ssbsS'extra_optimizations'
p3355
(lp3356
sbtbstRp3357
(lp3358
g1
(g95
g3
NtRp3359
(dp3360
S'provided'
p3361
I0
sg16
g53
sS'required'
p3362
I01
sg98
(lp3363
Nasg299
I00
sg106
I00
sg107
I00
sg55
g57
sg116
I01
sbag1
(g95
g3
NtRp3364
(dp3365
g3361
I0
sg16
S'W'
sg3362
I00
sg98
g141
sg299
I01
sg106
I00
sg107
I00
sg55
g144
sg116
Nsbag1
(g95
g3
NtRp3366
(dp3367
g3361
I0
sg16
S'b'
sg3362
I00
sg98
g99
sg299
I01
sg106
I00
sg107
I00
sg55
g109
sg116
Nsbag1
(g95
g3
NtRp3368
(dp3369
g3361
I0
sg16
S'W'
sg3362
I00
sg98
g206
sg299
I01
sg106
I00
sg107
I00
sg55
g209
sg116
Nsbag1
(g95
g3
NtRp3370
(dp3371
g3361
I0
sg16
S'b'
sg3362
I00
sg98
g179
sg299
I01
sg106
I00
sg107
I00
sg55
g182
sg116
Nsbag1
(g95
g3
NtRp3372
(dp3373
g3361
I0
sg16
S'W'
sg3362
I00
sg98
g267
sg299
I01
sg106
I00
sg107
I00
sg55
g270
sg116
Nsbag1
(g95
g3
NtRp3374
(dp3375
g3361
I0
sg16
S'b'
sg3362
I00
sg98
g239
sg299
I01
sg106
I00
sg107
I00
sg55
g242
sg116
Nsba(lp3376
Nag143
ag105
ag208
ag181
ag269
ag241
atRp3377
sS'lr_var'
p3378
NsS'_predict_stochastic'
p3379
g285
(g286
((dp3380
g288
Nsg289
g290
sg291
(lp3381
g1
(g293
g3
NtRp3382
(dp3383
g16
g53
sg296
Nsg297
Nsg298
Nsg106
I00
sg299
I00
sg300
I00
sg301
g19
sg302
I00
sg116
I01
sbag1
(g293
g3
NtRp3384
(dp3385
g16
S'W'
sg296
I01
sg297
g139
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g124
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp3386
(dp3387
g16
S'b'
sg296
I01
sg297
g96
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g71
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp3388
(dp3389
g16
S'W'
sg296
I01
sg297
g204
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g189
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp3390
(dp3391
g16
S'b'
sg296
I01
sg297
g177
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g162
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp3392
(dp3393
g16
S'W'
sg296
I01
sg297
g265
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g250
sg302
I01
sg116
Nsbag1
(g293
g3
NtRp3394
(dp3395
g16
S'b'
sg296
I01
sg297
g237
sg298
Nsg106
I00
sg299
I01
sg300
I00
sg301
g222
sg302
I01
sg116
Nsbasg315
g1
(g316
g3
NtRp3396
(dp3397
g288
Nsg291
(lp3398
g1
(g18
g3
NtRp3399
(dp3400
g23
Nsg16
g53
sg315
g3396
sg322
(lp3401
(g1
(g324
g3
NtRp3402
(dp3403
g291
(lp3404
g3399
asg24
g1
(g25
g3
NtRp3405
(dp3406
g330
(lp3407
g332
ag333
ag333
asbsg334
(dp3408
sg315
g3396
sg336
(lp3409
g1
(g338
g3
NtRp3410
(dp3411
g23
I0
sg16
Nsg315
g3396
sg322
(lp3412
(g1
(g324
g3
NtRp3413
(dp3414
g291
(lp3415
g3410
ag1
(g70
g3
NtRp3416
(dp3417
g23
Nsg94
g139
sg16
S'W'
sg315
g3396
sg322
(lp3418
(g3413
I1
tp3419
asg21
S'auto_1706'
p3420
sg24
g1
(g25
g3
NtRp3421
(dp3422
g28
g129
sbsg54
Nsg55
g144
sbasg24
g1
(g25
g3
NtRp3423
(dp3424
g330
(lp3425
g332
ag333
ag333
asbsg334
(dp3426
sg315
g3396
sg336
(lp3427
g1
(g338
g3
NtRp3428
(dp3429
g23
I0
sg16
Nsg315
g3396
sg322
(lp3430
(g1
(g324
g3
NtRp3431
(dp3432
g291
(lp3433
g3428
ag1
(g338
g3
NtRp3434
(dp3435
g23
I0
sg16
Nsg315
g3396
sg322
(lp3436
(g3431
I1
tp3437
asg21
S'auto_1783'
p3438
sg24
g1
(g25
g3
NtRp3439
(dp3440
g28
(lp3441
sbsg54
g1
(g324
g3
NtRp3442
(dp3443
g291
(lp3444
g1
(g70
g3
NtRp3445
(dp3446
g23
Nsg94
g96
sg16
S'b'
sg315
g3396
sg322
(lp3447
(g3442
I0
tp3448
asg21
S'auto_1707'
p3449
sg24
g1
(g25
g3
NtRp3450
(dp3451
g28
g76
sbsg54
Nsg55
g109
sbasg24
g1
(g25
g3
NtRp3452
(dp3453
g330
(lp3454
g332
ag333
ag333
asbsg334
(dp3455
sg315
g3396
sg336
(lp3456
g3434
asg386
g1
(g387
g3
NtRp3457
(dp3458
g390
(lp3459
sg392
(lp3460
I0
asg394
(lp3461
I0
asg396
(dp3462
I0
(lp3463
I0
assg399
(I00
tp3464
sg401
I01
sg402
(S'x'
I0
tp3465
sbsbsg55
g1
(g108
g3
NtRp3466
(dp3467
g59
(I01
I00
tp3468
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g115
sbsbasg24
g1
(g25
g3
NtRp3469
(dp3470
g409
g1
(g324
g3
NtRp3471
(dp3472
g291
(lp3473
g1
(g413
g3
NtRp3474
(dp3475
g21
S'auto_65821'
p3476
sg23
Nsg24
g1
(g25
g3
NtRp3477
sg16
Nsg54
Nsg55
g419
sbag1
(g413
g3
NtRp3478
(dp3479
g21
S'auto_65822'
p3480
sg23
Nsg24
g1
(g25
g3
NtRp3481
sg16
Nsg54
Nsg55
g419
sbasg24
g1
(g25
g3
NtRp3482
sg336
(lp3483
g1
(g413
g3
NtRp3484
(dp3485
g21
S'auto_65823'
p3486
sg23
I0
sg24
g1
(g25
g3
NtRp3487
sg16
Nsg54
g3471
sg55
g419
sbasg386
g1
(g432
g3
NtRp3488
(dp3489
g291
(lp3490
g1
(g413
g3
NtRp3491
(dp3492
g21
S'auto_1903'
p3493
sg23
Nsg24
g1
(g25
g3
NtRp3494
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp3495
(dp3496
g21
S'auto_1904'
p3497
sg23
Nsg24
g1
(g25
g3
NtRp3498
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp3499
sg336
(lp3500
g1
(g413
g3
NtRp3501
(dp3502
g21
S'auto_1906'
p3503
sg23
I0
sg24
g1
(g25
g3
NtRp3504
(dp3505
g28
(lp3506
sbsg16
Nsg54
g1
(g324
g3
NtRp3507
(dp3508
g291
(lp3509
g1
(g413
g3
NtRp3510
(dp3511
g21
S'auto_1905'
p3512
sg23
I0
sg24
g1
(g25
g3
NtRp3513
(dp3514
g28
(lp3515
sbsg16
Nsg54
g1
(g324
g3
NtRp3516
(dp3517
g291
(lp3518
g3491
ag3495
asg24
g1
(g25
g3
NtRp3519
sg336
(lp3520
g3510
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp3521
sg336
(lp3522
g3501
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p3523
sg485
(g440
tp3524
sg473
g1
(g487
g3
NtRp3525
(dp3526
g490
(I0
tp3527
sbsg492
(lp3528
S'%(nodename)s_subnode0'
p3529
aS'%(nodename)s_subnode1'
p3530
asg496
I1
sbsbsg330
(lp3531
g498
ag333
ag333
asbsg334
(dp3532
sg315
g3396
sg336
(lp3533
g1
(g338
g3
NtRp3534
(dp3535
g23
I0
sg16
Nsg315
g3396
sg322
(lp3536
(g1
(g324
g3
NtRp3537
(dp3538
g291
(lp3539
g3534
ag1
(g70
g3
NtRp3540
(dp3541
g23
Nsg94
g204
sg16
S'W'
sg315
g3396
sg322
(lp3542
(g3537
I1
tp3543
asg21
S'auto_1708'
p3544
sg24
g1
(g25
g3
NtRp3545
(dp3546
g28
g194
sbsg54
Nsg55
g209
sbasg24
g1
(g25
g3
NtRp3547
(dp3548
g330
(lp3549
g332
ag333
ag333
asbsg334
(dp3550
sg315
g3396
sg336
(lp3551
g1
(g338
g3
NtRp3552
(dp3553
g23
I0
sg16
Nsg315
g3396
sg322
(lp3554
(g1
(g324
g3
NtRp3555
(dp3556
g291
(lp3557
g3552
ag1
(g338
g3
NtRp3558
(dp3559
g23
I0
sg16
Nsg315
g3396
sg322
(lp3560
(g3555
I1
tp3561
asg21
S'auto_1780'
p3562
sg24
g1
(g25
g3
NtRp3563
(dp3564
g28
(lp3565
sbsg54
g1
(g324
g3
NtRp3566
(dp3567
g291
(lp3568
g1
(g70
g3
NtRp3569
(dp3570
g23
Nsg94
g177
sg16
S'b'
sg315
g3396
sg322
(lp3571
(g3566
I0
tp3572
asg21
S'auto_1709'
p3573
sg24
g1
(g25
g3
NtRp3574
(dp3575
g28
g167
sbsg54
Nsg55
g182
sbasg24
g1
(g25
g3
NtRp3576
(dp3577
g330
(lp3578
g332
ag333
ag333
asbsg334
(dp3579
sg315
g3396
sg336
(lp3580
g3558
asg386
g1
(g387
g3
NtRp3581
(dp3582
g390
(lp3583
sg392
(lp3584
I0
asg394
(lp3585
I0
asg396
(dp3586
I0
(lp3587
I0
assg399
(I00
tp3588
sg401
I01
sg402
(S'x'
I0
tp3589
sbsbsg55
g1
(g108
g3
NtRp3590
(dp3591
g59
(I01
I00
tp3592
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g185
sbsbasg24
g1
(g25
g3
NtRp3593
(dp3594
g409
g1
(g324
g3
NtRp3595
(dp3596
g291
(lp3597
g1
(g413
g3
NtRp3598
(dp3599
g21
S'auto_65834'
p3600
sg23
Nsg24
g1
(g25
g3
NtRp3601
sg16
Nsg54
Nsg55
g419
sbag1
(g413
g3
NtRp3602
(dp3603
g21
S'auto_65835'
p3604
sg23
Nsg24
g1
(g25
g3
NtRp3605
sg16
Nsg54
Nsg55
g419
sbasg24
g1
(g25
g3
NtRp3606
sg336
(lp3607
g1
(g413
g3
NtRp3608
(dp3609
g21
S'auto_65836'
p3610
sg23
I0
sg24
g1
(g25
g3
NtRp3611
sg16
Nsg54
g3595
sg55
g419
sbasg386
g1
(g432
g3
NtRp3612
(dp3613
g291
(lp3614
g1
(g413
g3
NtRp3615
(dp3616
g21
S'auto_1918'
p3617
sg23
Nsg24
g1
(g25
g3
NtRp3618
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp3619
(dp3620
g21
S'auto_1919'
p3621
sg23
Nsg24
g1
(g25
g3
NtRp3622
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp3623
sg336
(lp3624
g1
(g413
g3
NtRp3625
(dp3626
g21
S'auto_1921'
p3627
sg23
I0
sg24
g1
(g25
g3
NtRp3628
(dp3629
g28
(lp3630
sbsg16
Nsg54
g1
(g324
g3
NtRp3631
(dp3632
g291
(lp3633
g1
(g413
g3
NtRp3634
(dp3635
g21
S'auto_1920'
p3636
sg23
I0
sg24
g1
(g25
g3
NtRp3637
(dp3638
g28
(lp3639
sbsg16
Nsg54
g1
(g324
g3
NtRp3640
(dp3641
g291
(lp3642
g3615
ag3619
asg24
g1
(g25
g3
NtRp3643
sg336
(lp3644
g3634
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp3645
sg336
(lp3646
g3625
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p3647
sg485
(g440
tp3648
sg473
g1
(g487
g3
NtRp3649
(dp3650
g490
(I0
tp3651
sbsg492
(lp3652
S'%(nodename)s_subnode0'
p3653
aS'%(nodename)s_subnode1'
p3654
asg496
I1
sbsbsg330
(lp3655
g498
ag333
ag333
asbsg334
(dp3656
sg315
g3396
sg336
(lp3657
g1
(g338
g3
NtRp3658
(dp3659
g23
I0
sg16
Nsg315
g3396
sg322
(lp3660
(g1
(g324
g3
NtRp3661
(dp3662
g291
(lp3663
g1
(g338
g3
NtRp3664
(dp3665
g23
I0
sg16
Nsg315
g3396
sg322
(lp3666
(g3661
I0
tp3667
asg21
S'auto_1842'
p3668
sg24
g1
(g25
g3
NtRp3669
(dp3670
g638
I00
sg639
g640
sg28
(lp3671
sbsg54
g1
(g324
g3
NtRp3672
(dp3673
g291
(lp3674
g1
(g18
g3
NtRp3675
(dp3676
g23
I0
sg16
Nsg315
g3396
sg322
(lp3677
(g3672
I0
tp3678
asg21
S'auto_1771'
p3679
sg24
g1
(g25
g3
NtRp3680
(dp3681
g114
Nsg28
(lp3682
sbsg54
g1
(g324
g3
NtRp3683
(dp3684
g291
(lp3685
g3399
asg24
g1
(g25
g3
NtRp3686
(dp3687
g330
(lp3688
g659
ag332
ag333
ag333
asbsg334
(dp3689
sg315
g3396
sg336
(lp3690
g3675
asg386
g1
(g662
g3
NtRp3691
(dp3692
S'i'
I0
sbsbsg55
g665
sbasg24
g1
(g25
g3
NtRp3693
(dp3694
g330
(lp3695
g672
ag333
ag333
asbsg334
(dp3696
sg315
g3396
sg336
(lp3697
g3664
asg386
g676
sbsg55
g1
(g108
g3
NtRp3698
(dp3699
g59
(I00
tp3700
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g678
sg682
I00
sbsbag1
(g683
g3
NtRp3701
(dp3702
g21
S'auto_65779'
p3703
sg23
Nsg24
g1
(g25
g3
NtRp3704
(dp3705
g28
(lp3706
(lp3707
(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp3708
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp3709
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp3710
a(g691
I163
g694
S'y = copier(x, memo)'
tp3711
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp3712
a(g691
I163
g694
S'y = copier(x, memo)'
tp3713
a(g691
I230
g702
S'y.append(deepcopy(a, memo))'
tp3714
a(g691
I174
g694
S'y = copier(memo)'
tp3715
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp3716
(dp3717
g59
(tsg61
g708
sg63
g709
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp3718
(I1
(tg712
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsbag3658
ag1
(g338
g3
NtRp3719
(dp3720
g23
I0
sg16
Nsg315
g3396
sg322
(lp3721
(g3661
I3
tp3722
asg21
S'auto_1777'
p3723
sg24
g1
(g25
g3
NtRp3724
(dp3725
g28
(lp3726
sbsg54
g1
(g324
g3
NtRp3727
(dp3728
g291
(lp3729
g1
(g70
g3
NtRp3730
(dp3731
g23
Nsg94
g265
sg16
S'W'
sg315
g3396
sg322
(lp3732
(g3727
I0
tp3733
asg21
S'auto_1710'
p3734
sg24
g1
(g25
g3
NtRp3735
(dp3736
g28
g255
sbsg54
Nsg55
g270
sbasg24
g1
(g25
g3
NtRp3737
(dp3738
g330
(lp3739
g332
ag333
ag333
asbsg334
(dp3740
sg315
g3396
sg336
(lp3741
g3719
asg386
g1
(g387
g3
NtRp3742
(dp3743
g390
(lp3744
I1
asg392
(lp3745
I0
asg394
(lp3746
sg396
(dp3747
I0
(lp3748
I0
assg399
(I00
I01
tp3749
sg401
I01
sg402
(I0
tp3750
sbsbsg55
g1
(g108
g3
NtRp3751
(dp3752
g59
(I00
tp3753
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g273
sbsbag1
(g683
g3
NtRp3754
(dp3755
g21
S'auto_65780'
p3756
sg23
Nsg24
g1
(g25
g3
NtRp3757
(dp3758
g28
(lp3759
(lp3760
(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp3761
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp3762
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp3763
a(g691
I163
g694
S'y = copier(x, memo)'
tp3764
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp3765
a(g691
I163
g694
S'y = copier(x, memo)'
tp3766
a(g691
I230
g702
S'y.append(deepcopy(a, memo))'
tp3767
a(g691
I174
g694
S'y = copier(memo)'
tp3768
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp3769
(dp3770
g59
(tsg61
g708
sg63
g709
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp3771
(I1
(tg712
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsbasg24
g1
(g25
g3
NtRp3772
(dp3773
g330
(lp3774
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p3775
ag333
ag333
asbsg334
(dp3776
sg315
g3396
sg336
(lp3777
g1
(g338
g3
NtRp3778
(dp3779
g23
I0
sg16
Nsg315
g3396
sg322
(lp3780
(g1
(g324
g3
NtRp3781
(dp3782
g291
(lp3783
g3778
asg24
g1
(g25
g3
NtRp3784
(dp3785
g330
(lp3786
g781
ag333
ag333
asbsg334
(dp3787
sg315
g3396
sg336
(lp3788
g1
(g338
g3
NtRp3789
(dp3790
g23
I0
sg16
Nsg315
g3396
sg322
(lp3791
(g1
(g324
g3
NtRp3792
(dp3793
g291
(lp3794
g3789
ag1
(g338
g3
NtRp3795
(dp3796
g23
I0
sg16
Nsg315
g3396
sg322
(lp3797
(g3792
I1
tp3798
asg21
S'auto_1774'
p3799
sg24
g1
(g25
g3
NtRp3800
(dp3801
g28
(lp3802
sbsg54
g1
(g324
g3
NtRp3803
(dp3804
g291
(lp3805
g1
(g70
g3
NtRp3806
(dp3807
g23
Nsg94
g237
sg16
S'b'
sg315
g3396
sg322
(lp3808
(g3803
I0
tp3809
asg21
S'auto_1711'
p3810
sg24
g1
(g25
g3
NtRp3811
(dp3812
g28
g227
sbsg54
Nsg55
g242
sbasg24
g1
(g25
g3
NtRp3813
(dp3814
g330
(lp3815
g332
ag333
ag333
asbsg334
(dp3816
sg315
g3396
sg336
(lp3817
g3795
asg386
g1
(g387
g3
NtRp3818
(dp3819
g390
(lp3820
sg392
(lp3821
I0
asg394
(lp3822
I0
asg396
(dp3823
I0
(lp3824
I0
assg399
(I01
tp3825
sg401
I01
sg402
(S'x'
I0
tp3826
sbsbsg55
g1
(g108
g3
NtRp3827
(dp3828
g59
(I01
I01
tp3829
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g245
sbsbasg24
g1
(g25
g3
NtRp3830
(dp3831
g409
g1
(g324
g3
NtRp3832
(dp3833
g291
(lp3834
g1
(g413
g3
NtRp3835
(dp3836
g21
S'auto_65852'
p3837
sg23
Nsg24
g1
(g25
g3
NtRp3838
sg16
Nsg54
Nsg55
g419
sbag1
(g413
g3
NtRp3839
(dp3840
g21
S'auto_65853'
p3841
sg23
Nsg24
g1
(g25
g3
NtRp3842
sg16
Nsg54
Nsg55
g419
sbasg24
g1
(g25
g3
NtRp3843
sg336
(lp3844
g1
(g413
g3
NtRp3845
(dp3846
g21
S'auto_65854'
p3847
sg23
I0
sg24
g1
(g25
g3
NtRp3848
sg16
Nsg54
g3832
sg55
g419
sbasg386
g1
(g470
g3
NtRp3849
(dp3850
g473
g1
(g487
g3
NtRp3851
(dp3852
g490
(I0
tp3853
sbsg16
Nsbsbsg330
(lp3854
g498
ag333
ag333
asbsg334
(dp3855
sg315
g3396
sg336
(lp3856
g1
(g338
g3
NtRp3857
(dp3858
g23
I0
sg16
Nsg315
g3396
sg322
(lp3859
(g1
(g324
g3
NtRp3860
(dp3861
g291
(lp3862
g3857
asg24
g1
(g25
g3
NtRp3863
(dp3864
g330
(lp3865
g332
ag333
ag333
asbsg334
(dp3866
sg315
g3396
sg336
(lp3867
g1
(g18
g3
NtRp3868
(dp3869
g23
I0
sg16
Nsg315
g3396
sg322
(lp3870
(g866
I0
tp3871
asg21
S'auto_1823'
p3872
sg24
g1
(g25
g3
NtRp3873
(dp3874
g28
(lp3875
sbsg54
g3860
sg55
g1
(g56
g3
NtRp3876
(dp3877
g59
(I00
I01
tp3878
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbasg386
g876
sbI0
tp3879
asg21
S'auto_1936'
p3880
sg24
g1
(g25
g3
NtRp3881
(dp3882
g28
(lp3883
sbsg54
g3792
sg55
g1
(g108
g3
NtRp3884
(dp3885
g59
(I00
I01
tp3886
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(g885
g3
NtRp3887
(dp3888
g16
Nsg888
g3849
sg889
(dp3889
I0
(lp3890
I0
assg892
g893
sg894
g1
(g895
g3
NtRp3891
(dp3892
g898
I3713080549408328131
sg899
(dp3893
I0
I0
ssbsg901
I00
sbsbI0
tp3894
asg21
S'auto_1830'
p3895
sg24
g1
(g25
g3
NtRp3896
(dp3897
g28
(lp3898
sbsg54
g3781
sg55
g1
(g108
g3
NtRp3899
(dp3900
g59
(I00
I01
tp3901
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
S'float32'
p3902
sbsbasg386
g1
(g387
g3
NtRp3903
(dp3904
g390
(lp3905
sg392
(lp3906
I0
asg394
(lp3907
I1
asg396
(dp3908
I0
(lp3909
I0
assg399
(I00
tp3910
sg401
I01
sg402
(I0
S'x'
tp3911
sbsbI0
tp3912
asg21
S'auto_1901'
p3913
sg24
g1
(g25
g3
NtRp3914
(dp3915
g28
(lp3916
sbsg54
g3661
sg55
g3698
sbasg386
g925
sbI2
tp3917
asg21
S'auto_1929'
p3918
sg24
g1
(g25
g3
NtRp3919
(dp3920
g28
(lp3921
sbsg54
g3555
sg55
g1
(g108
g3
NtRp3922
(dp3923
g59
(I00
I00
tp3924
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(g885
g3
NtRp3925
(dp3926
g16
Nsg888
g3612
sg889
(dp3927
I0
(lp3928
I0
assg892
Nsg894
g1
(g895
g3
NtRp3929
(dp3930
g898
I3713080549408328131
sg899
(dp3931
I0
I0
ssbsg901
I00
sbsbI0
tp3932
asg21
S'auto_1798'
p3933
sg24
g1
(g25
g3
NtRp3934
(dp3935
g28
(lp3936
sbsg54
g3537
sg55
g1
(g108
g3
NtRp3937
(dp3938
g59
(I00
I00
tp3939
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g953
sbI0
tp3940
asg21
S'auto_1914'
p3941
sg24
g1
(g25
g3
NtRp3942
(dp3943
g28
(lp3944
sbsg54
g3431
sg55
g1
(g108
g3
NtRp3945
(dp3946
g59
(I00
I00
tp3947
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg386
g1
(g885
g3
NtRp3948
(dp3949
g16
Nsg888
g3488
sg889
(dp3950
I0
(lp3951
I0
assg892
Nsg894
g1
(g895
g3
NtRp3952
(dp3953
g898
I3713080549408328131
sg899
(dp3954
I0
I0
ssbsg901
I00
sbsbI0
tp3955
asg21
S'auto_1784'
p3956
sg24
g1
(g25
g3
NtRp3957
(dp3958
g28
(lp3959
sbsg54
g3413
sg55
g1
(g108
g3
NtRp3960
(dp3961
g59
(I00
I00
tp3962
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g62
sbsbasg386
g953
sbI0
tp3963
asg21
S'auto_1769'
p3964
sg24
g1
(g25
g3
NtRp3965
(dp3966
g28
(lp3967
sbsg54
g3402
sg55
g1
(g108
g3
NtRp3968
(dp3969
g59
(I00
I00
tp3970
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g62
sbsbasg386
g1
(g985
g3
NtRp3971
(dp3972
g114
NsbsbI0
tp3973
a(g3683
I0
tp3974
asg21
S'auto_1705'
p3975
sg24
g1
(g25
g3
NtRp3976
(dp3977
g28
g29
sbsg54
Nsg55
g57
sbag3416
ag3445
ag3540
ag3569
ag3730
ag3806
asg336
(lp3978
g3868
asg994
g1
(g995
g3
NtRp3979
(dp3980
g998
(lp3981
sg1000
(lp3982
sg1002
g148
((lp3983
g3431
ag3683
ag3792
ag3661
ag3672
ag3413
ag3442
ag3860
ag3781
ag3566
ag3402
ag3727
ag3803
ag3555
ag3537
atRp3984
sg1005
(itheano.gof.opt
_metadict
p3985
(dp3986
S'd'
(dp3987
g1
(g1009
g1010
(g3769
g3771
ttRp3988
(dp3989
g1013
I00
sg1014
g1015
(g712
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3990
sg1017
g3771
sbg3754
sg1
(g1009
g1010
(g3716
g3718
ttRp3991
(dp3992
g1013
I00
sg1014
g1015
(g712
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp3993
sg1017
g3718
sbg3701
ssS'l'
(lp3994
sbsg1022
g148
((lp3995
I140440184955408
aI140440184956112
atRp3996
sg1025
(itheano.gof.opt
_metadict
p3997
(dp3998
S'd'
(dp3999
g3701
g3991
sg3754
g3988
ssS'l'
(lp4000
sbsg1030
g1
(g1031
g3
NtRp4001
(dp4002
g1034
g1
(g1035
g3
NtRp4003
(lp4004
g4003
ag4003
absg1038
(dp4005
sbsbsg1040
g1
(g1041
g3
NtRp4006
(dp4007
g1044
(dp4008
g3552
g1
(g1031
g3
NtRp4009
(dp4010
g1034
g1
(g1035
g3
NtRp4011
(lp4012
g1
(g1035
g3
NtRp4013
(lp4014
g4011
ag4011
ag3552
abag4013
absg1038
(dp4015
g3552
g4013
ssbsg3664
g1
(g1031
g3
NtRp4016
(dp4017
g1034
g1
(g1035
g3
NtRp4018
(lp4019
g1
(g1035
g3
NtRp4020
(lp4021
g4018
ag4018
ag3664
abag4020
absg1038
(dp4022
g3664
g4020
ssbsg3428
g1
(g1031
g3
NtRp4023
(dp4024
g1034
g1
(g1035
g3
NtRp4025
(lp4026
g1
(g1035
g3
NtRp4027
(lp4028
g4025
ag4025
ag3428
abag4027
absg1038
(dp4029
g3428
g4027
ssbsg3778
g1
(g1031
g3
NtRp4030
(dp4031
g1034
g1
(g1035
g3
NtRp4032
(lp4033
g1
(g1035
g3
NtRp4034
(lp4035
g1
(g1035
g3
NtRp4036
(lp4037
g4032
ag4034
ag3789
abag4032
ag3778
abag4036
absg1038
(dp4038
g3778
g4034
sg3789
g4036
ssbssg1076
(dp4039
g3552
g3552
sg3664
g3664
sg3789
g3778
sg3778
g3778
sg3428
g3428
ssg1078
g14
((lp4040
(lp4041
g3806
ag1
(g1031
g3
NtRp4042
(dp4043
g1034
g1
(g1035
g3
NtRp4044
(lp4045
g1
(g1035
g3
NtRp4046
(lp4047
g4044
ag4044
ag3795
abag4046
absg1038
(dp4048
g3795
g4046
ssbaa(lp4049
g3730
ag1
(g1031
g3
NtRp4050
(dp4051
g1034
g1
(g1035
g3
NtRp4052
(lp4053
g1
(g1035
g3
NtRp4054
(lp4055
g4052
ag4052
ag3719
abag4054
absg1038
(dp4056
g3719
g4054
ssbaa(lp4057
g3569
ag1
(g1031
g3
NtRp4058
(dp4059
g1034
g1
(g1035
g3
NtRp4060
(lp4061
g1
(g1035
g3
NtRp4062
(lp4063
g4060
ag4060
ag3558
abag4062
absg1038
(dp4064
g3558
g4062
ssbaa(lp4065
g3445
ag1
(g1031
g3
NtRp4066
(dp4067
g1034
g1
(g1035
g3
NtRp4068
(lp4069
g1
(g1035
g3
NtRp4070
(lp4071
g4068
ag4068
ag3434
abag4070
absg1038
(dp4072
g3434
g4070
ssbaa(lp4073
g3778
ag1
(g1031
g3
NtRp4074
(dp4075
g1034
g1
(g1035
g3
NtRp4076
(lp4077
g1
(g1035
g3
NtRp4078
(lp4079
g4076
ag4076
ag3789
abag4078
absg1038
(dp4080
g3789
g4078
ssbaatRp4081
sg1121
g14
((lp4082
(lp4083
g3795
ag3806
aa(lp4084
g3719
ag3730
aa(lp4085
g3558
ag3569
aa(lp4086
g3434
ag3445
aa(lp4087
g3789
ag3778
aatRp4088
sg315
g3396
sg1129
I01
sg322
g14
((lp4089
(lp4090
g3806
ag14
((lp4091
(lp4092
g3803
aI1
aatRp4093
aa(lp4094
g3795
ag14
((lp4095
(lp4096
g3792
aI1
aatRp4097
aa(lp4098
g3730
ag14
((lp4099
(lp4100
g3727
aI1
aatRp4101
aa(lp4102
g3719
ag14
((lp4103
(lp4104
g3661
aI1
aatRp4105
aa(lp4106
g3569
ag14
((lp4107
(lp4108
g3566
aI1
aatRp4109
aa(lp4110
g3558
ag14
((lp4111
(lp4112
g3555
aI1
aatRp4113
aa(lp4114
g3445
ag14
((lp4115
(lp4116
g3442
aI1
aatRp4117
aa(lp4118
g3434
ag14
((lp4119
(lp4120
g3431
aI1
aatRp4121
aa(lp4122
g3399
ag14
((lp4123
(lp4124
g3402
aI1
aa(lp4125
g3683
aI1
aatRp4126
aa(lp4127
g3410
ag14
((lp4128
(lp4129
g3413
aI1
aatRp4130
aa(lp4131
g3675
ag14
((lp4132
(lp4133
g3672
aI1
aatRp4134
aa(lp4135
g3416
ag14
((lp4136
(lp4137
g3413
aI1
aatRp4138
aa(lp4139
g3428
ag14
((lp4140
(lp4141
g3431
aI1
aatRp4142
aa(lp4143
g3664
ag14
((lp4144
(lp4145
g3661
aI1
aatRp4146
aa(lp4147
g1
(g338
g3
NtRp4148
(dp4149
g23
I0
sg16
Nsg315
g3396
sg322
(lp4150
sg21
S'auto_1888'
p4151
sg24
g1
(g25
g3
NtRp4152
(dp4153
g28
(lp4154
sbsg54
g1
(g324
g3
NtRp4155
(dp4156
g291
(lp4157
g3428
ag3434
asg24
g1
(g25
g3
NtRp4158
(dp4159
g1201
(lp4160
g498
asg330
(lp4161
g1204
asbsg334
(dp4162
sg315
g3396
sg336
(lp4163
g4148
asg386
g1
(g885
g3
NtRp4164
(dp4165
g16
Nsg888
g1
(g432
g3
NtRp4166
(dp4167
g291
(lp4168
g1
(g413
g3
NtRp4169
(dp4170
g21
S'auto_1877'
p4171
sg23
Nsg24
g1
(g25
g3
NtRp4172
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp4173
(dp4174
g21
S'auto_1878'
p4175
sg23
Nsg24
g1
(g25
g3
NtRp4176
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp4177
sg336
(lp4178
g1
(g413
g3
NtRp4179
(dp4180
g21
S'auto_1880'
p4181
sg23
I0
sg24
g1
(g25
g3
NtRp4182
(dp4183
g28
g3506
sbsg16
Nsg54
g1
(g324
g3
NtRp4184
(dp4185
g291
(lp4186
g1
(g413
g3
NtRp4187
(dp4188
g21
S'auto_1879'
p4189
sg23
I0
sg24
g1
(g25
g3
NtRp4190
(dp4191
g28
g3515
sbsg16
Nsg54
g1
(g324
g3
NtRp4192
(dp4193
g291
(lp4194
g4169
ag4173
asg24
g1
(g25
g3
NtRp4195
sg336
(lp4196
g4187
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp4197
sg336
(lp4198
g4179
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p4199
sg485
(g440
tp4200
sg492
(lp4201
S'%(nodename)s_subnode0'
p4202
aS'%(nodename)s_subnode1'
p4203
asg496
I1
sbsg889
(dp4204
sg892
Nsg894
g1
(g895
g3
NtRp4205
(dp4206
g898
Nsg899
(dp4207
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp4208
(dp4209
g59
(I00
I00
tp4210
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbag14
((ltRp4211
aa(lp4212
g3540
ag14
((lp4213
(lp4214
g3537
aI1
aatRp4215
aa(lp4216
g3552
ag14
((lp4217
(lp4218
g3555
aI1
aatRp4219
aa(lp4220
g1
(g338
g3
NtRp4221
(dp4222
g23
I0
sg16
Nsg315
g3396
sg322
(lp4223
sg21
S'auto_1867'
p4224
sg24
g1
(g25
g3
NtRp4225
(dp4226
g28
(lp4227
sbsg54
g1
(g324
g3
NtRp4228
(dp4229
g291
(lp4230
g3552
ag3558
asg24
g1
(g25
g3
NtRp4231
(dp4232
g1201
(lp4233
g498
asg330
(lp4234
g1204
asbsg334
(dp4235
sg315
g3396
sg336
(lp4236
g4221
asg386
g1
(g885
g3
NtRp4237
(dp4238
g16
Nsg888
g1
(g432
g3
NtRp4239
(dp4240
g291
(lp4241
g1
(g413
g3
NtRp4242
(dp4243
g21
S'auto_1856'
p4244
sg23
Nsg24
g1
(g25
g3
NtRp4245
sg16
Nsg54
Nsg55
g440
sbag1
(g413
g3
NtRp4246
(dp4247
g21
S'auto_1857'
p4248
sg23
Nsg24
g1
(g25
g3
NtRp4249
sg16
Nsg54
Nsg55
g440
sbasg446
I2
sg16
Nsg447
(g440
g440
tp4250
sg336
(lp4251
g1
(g413
g3
NtRp4252
(dp4253
g21
S'auto_1859'
p4254
sg23
I0
sg24
g1
(g25
g3
NtRp4255
(dp4256
g28
g3630
sbsg16
Nsg54
g1
(g324
g3
NtRp4257
(dp4258
g291
(lp4259
g1
(g413
g3
NtRp4260
(dp4261
g21
S'auto_1858'
p4262
sg23
I0
sg24
g1
(g25
g3
NtRp4263
(dp4264
g28
g3639
sbsg16
Nsg54
g1
(g324
g3
NtRp4265
(dp4266
g291
(lp4267
g4242
ag4246
asg24
g1
(g25
g3
NtRp4268
sg336
(lp4269
g4260
asg386
g471
sbsg55
g440
sbasg24
g1
(g25
g3
NtRp4270
sg336
(lp4271
g4252
asg386
g479
sbsg55
g440
sbasg483
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = tanh(V%(id)s_tmp1);\n}\n'
p4272
sg485
(g440
tp4273
sg492
(lp4274
S'%(nodename)s_subnode0'
p4275
aS'%(nodename)s_subnode1'
p4276
asg496
I1
sbsg889
(dp4277
sg892
Nsg894
g1
(g895
g3
NtRp4278
(dp4279
g898
Nsg899
(dp4280
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp4281
(dp4282
g59
(I00
I00
tp4283
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbag14
((ltRp4284
aa(lp4285
g3701
ag14
((lp4286
(lp4287
g3661
aI1
aatRp4288
aa(lp4289
g3754
ag14
((lp4290
(lp4291
g3661
aI1
aatRp4292
aa(lp4293
g1
(g338
g3
NtRp4294
(dp4295
g23
I0
sg16
Nsg315
g3396
sg322
(lp4296
sg21
S'auto_1839'
p4297
sg24
g1
(g25
g3
NtRp4298
(dp4299
g28
(lp4300
sbsg54
g1
(g324
g3
NtRp4301
(dp4302
g291
(lp4303
g3664
ag3701
ag4221
ag3719
ag3754
asg24
g1
(g25
g3
NtRp4304
(dp4305
g1201
(lp4306
S'LocalOptGroup(local_inplace_gpuagemv,local_inplace_gpuagemm,local_inplace_gpuager)'
p4307
asg330
(lp4308
g1352
asbsg334
(dp4309
sg315
g3396
sg336
(lp4310
g4294
asg386
g1355
sbsg55
g1
(g108
g3
NtRp4311
(dp4312
g59
(I00
tp4313
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g3902
sbsbag14
((ltRp4314
aa(lp4315
g3789
ag14
((lp4316
(lp4317
g3792
aI1
aatRp4318
aa(lp4319
g1
(g338
g3
NtRp4320
(dp4321
g23
I0
sg16
Nsg315
g3396
sg322
(lp4322
sg21
S'auto_1819'
p4323
sg24
g1
(g25
g3
NtRp4324
(dp4325
g28
(lp4326
sbsg54
g1
(g324
g3
NtRp4327
(dp4328
g291
(lp4329
g3789
ag3795
asg24
g1
(g25
g3
NtRp4330
(dp4331
g1201
(lp4332
g498
asg330
(lp4333
g332
asbsg334
(dp4334
sg315
g3396
sg336
(lp4335
g4320
asg386
g1
(g885
g3
NtRp4336
(dp4337
g16
S'GpuElemwise{add,no_inplace}'
p4338
sg888
g471
sg889
(dp4339
sg892
g893
sg894
g1
(g895
g3
NtRp4340
(dp4341
g898
Nsg899
(dp4342
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp4343
(dp4344
g59
(I00
I01
tp4345
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbag14
((ltRp4346
aa(lp4347
g3868
ag14
((ltRp4348
aa(lp4349
g1
(g18
g3
NtRp4350
(dp4351
g23
I0
sg16
Nsg315
g3396
sg322
(lp4352
sg21
S'auto_1900'
p4353
sg24
g1
(g25
g3
NtRp4354
(dp4355
g28
(lp4356
sbsg54
g1
(g324
g3
NtRp4357
(dp4358
g291
(lp4359
g3868
asg24
g1
(g25
g3
NtRp4360
(dp4361
g1201
(lp4362
S"('Revert', 'output_guard')"
p4363
asg330
(lp4364
g1411
asbsg334
(dp4365
sg315
g3396
sg336
(lp4366
g4350
asg386
g1415
sbsg55
g3876
sbag14
((ltRp4367
aa(lp4368
g3778
ag14
((lp4369
(lp4370
g3781
aI1
aatRp4371
aa(lp4372
g3534
ag14
((lp4373
(lp4374
g3537
aI1
aatRp4375
aa(lp4376
g3658
ag14
((lp4377
(lp4378
g3661
aI1
aatRp4379
aa(lp4380
g3857
ag14
((lp4381
(lp4382
g3860
aI1
aatRp4383
aatRp4384
sg1434
(dp4385
g3552
g3555
sg3664
g3661
sg3428
g3431
sg3778
g3792
ssg1436
g1
(g1031
g3
NtRp4386
(dp4387
g1034
g1
(g1035
g3
NtRp4388
(lp4389
g1
(g1035
g3
NtRp4390
(lp4391
g1
(g1035
g3
NtRp4392
(lp4393
g1
(g1035
g3
NtRp4394
(lp4395
g1
(g1035
g3
NtRp4396
(lp4397
g1
(g1035
g3
NtRp4398
(lp4399
g1
(g1035
g3
NtRp4400
(lp4401
g1
(g1035
g3
NtRp4402
(lp4403
g1
(g1035
g3
NtRp4404
(lp4405
g1
(g1035
g3
NtRp4406
(lp4407
g1
(g1035
g3
NtRp4408
(lp4409
g1
(g1035
g3
NtRp4410
(lp4411
g1
(g1035
g3
NtRp4412
(lp4413
g1
(g1035
g3
NtRp4414
(lp4415
g1
(g1035
g3
NtRp4416
(lp4417
g1
(g1035
g3
NtRp4418
(lp4419
g4388
ag4416
ag3803
abag4414
ag3727
abag4412
ag3566
abag4410
ag3442
abag4408
ag3402
abag4406
ag3683
abag4404
ag3413
abag4402
ag3672
abag4400
ag3537
abag4398
ag3781
abag4396
ag3860
abag4394
ag3661
abag4392
ag3431
abag4390
ag3555
abag4388
ag3792
abag4418
absg1038
(dp4420
g3672
g4404
sg3537
g4402
sg3661
g4396
sg3431
g4394
sg3413
g4406
sg3792
g4390
sg3860
g4398
sg3442
g4412
sg3781
g4400
sg3566
g4414
sg3803
g4418
sg3727
g4416
sg3402
g4410
sg3555
g4392
sg3683
g4408
ssbsg1472
g1
(g1031
g3
NtRp4421
(dp4422
g1034
g1
(g1035
g3
NtRp4423
(lp4424
g1
(g1035
g3
NtRp4425
(lp4426
g1
(g1035
g3
NtRp4427
(lp4428
g1
(g1035
g3
NtRp4429
(lp4430
g1
(g1035
g3
NtRp4431
(lp4432
g4423
ag4429
ag3661
abag4427
ag3431
abag4425
ag3555
abag4423
ag3792
abag4431
absg1038
(dp4433
g3431
g4429
sg3555
g4427
sg3661
g4431
sg3792
g4425
ssbsg1486
I00
sbsg1487
g148
((lp4434
g3552
ag3730
ag3789
ag3701
ag3445
ag3434
ag3540
ag3754
ag3399
ag3664
ag3868
ag3857
ag3569
ag3795
ag3558
ag3778
ag3410
ag3416
ag3428
ag3534
ag3675
ag3806
ag3719
ag3658
atRp4435
sg16
S'/home/nolan/machine_learning_acds/machine_learning_acds/regressors/nn/neural_network.py:524'
p4436
sg1491
F0.0045464038848876953
sg1492
g1
(g1493
g3
NtRp4437
(dp4438
g998
(dp4439
sg1497
(dp4440
g1
(g18
g3
NtRp4441
(dp4442
g23
I0
sg16
Nsg315
g3396
sg322
(lp4443
sg21
S'auto_1766'
p4444
sg24
g1
(g25
g3
NtRp4445
(dp4446
g28
(lp4447
sbsg54
g1
(g324
g3
NtRp4448
(dp4449
g291
(lp4450
g1
(g18
g3
NtRp4451
(dp4452
g23
I0
sg16
Nsg315
g3396
sg322
(lp4453
sg21
S'auto_1754'
p4454
sg24
g1
(g25
g3
NtRp4455
(dp4456
g638
I00
sg639
g640
sg28
(lp4457
sbsg54
g1
(g324
g3
NtRp4458
(dp4459
g291
(lp4460
g1
(g18
g3
NtRp4461
(dp4462
g23
I0
sg16
Nsg315
g3396
sg322
(lp4463
sg21
S'auto_1737'
p4464
sg24
g1
(g25
g3
NtRp4465
(dp4466
g28
g3682
sbsg54
g1
(g324
g3
NtRp4467
(dp4468
g291
(lp4469
g3399
asg24
g1
(g25
g3
NtRp4470
(dp4471
g1201
(lp4472
g332
asg330
g3688
sbsg334
(dp4473
sg315
g3396
sg336
(lp4474
g4461
asg386
g3691
sbsg55
g665
sbasg24
g1
(g25
g3
NtRp4475
(dp4476
g1201
(lp4477
g332
asg330
(lp4478
g1714
ag332
asbsg334
(dp4479
sg315
g3396
sg336
(lp4480
g4451
asg386
g1
(g1717
g3
NtRp4481
(dp4482
g61
g3902
sbsbsg55
g1
(g56
g3
NtRp4483
(dp4484
g59
(I00
tp4485
sg66
I00
sg16
Nsg61
g3902
sg63
g65
sg682
I00
sbsbag1
(g683
g3
NtRp4486
(dp4487
g21
S'auto_65798'
p4488
sg23
Nsg24
g1
(g25
g3
NtRp4489
(dp4490
g28
(lp4491
(lp4492
(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp4493
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp4494
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp4495
a(g691
I163
g694
S'y = copier(x, memo)'
tp4496
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp4497
a(g691
I163
g694
S'y = copier(x, memo)'
tp4498
a(g691
I230
g702
S'y.append(deepcopy(a, memo))'
tp4499
a(g691
I174
g694
S'y = copier(memo)'
tp4500
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp4501
(dp4502
g59
(tsg61
S'float32'
p4503
sg63
g65
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp4504
(I1
(tg104
I00
S'\x00\x00\x80?'
tbsbag1
(g18
g3
NtRp4505
(dp4506
g23
I0
sg16
Nsg315
g3396
sg322
(lp4507
sg21
S'auto_1726'
p4508
sg24
g1
(g25
g3
NtRp4509
(dp4510
g28
(lp4511
(lp4512
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4513
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4514
a(g81
I39
g51
S'self._set_prediction()'
tp4515
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4516
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4517
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4518
a(g1583
I124
g1584
S'return self.nonlinearity(activation)'
tp4519
a(g1757
I61
g482
S'return theano.tensor.tanh(x)'
tp4520
aasbsg54
g1
(g324
g3
NtRp4521
(dp4522
g291
(lp4523
g1
(g18
g3
NtRp4524
(dp4525
g23
I0
sg16
Nsg315
g3396
sg322
(lp4526
sg21
S'auto_1725'
p4527
sg24
g1
(g25
g3
NtRp4528
(dp4529
g28
(lp4530
(lp4531
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4532
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4533
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4534
a(g81
I39
g51
S'self._set_prediction()'
tp4535
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4536
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4537
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4538
a(g1583
I123
g1584
S'activation = activation + self.b'
tp4539
aasbsg54
g1
(g324
g3
NtRp4540
(dp4541
g291
(lp4542
g1
(g18
g3
NtRp4543
(dp4544
g23
I0
sg16
Nsg315
g3396
sg322
(lp4545
sg21
S'auto_1740'
p4546
sg24
g1
(g25
g3
NtRp4547
(dp4548
g28
(lp4549
sbsg54
g1
(g324
g3
NtRp4550
(dp4551
g291
(lp4552
g1
(g18
g3
NtRp4553
(dp4554
g23
I0
sg16
Nsg315
g3396
sg322
(lp4555
sg21
S'auto_1723'
p4556
sg24
g1
(g25
g3
NtRp4557
(dp4558
g28
(lp4559
(lp4560
(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4561
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4562
a(g81
I39
g51
S'self._set_prediction()'
tp4563
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4564
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4565
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4566
a(g1583
I124
g1584
S'return self.nonlinearity(activation)'
tp4567
a(g1757
I61
g482
S'return theano.tensor.tanh(x)'
tp4568
aasbsg54
g1
(g324
g3
NtRp4569
(dp4570
g291
(lp4571
g1
(g18
g3
NtRp4572
(dp4573
g23
I0
sg16
Nsg315
g3396
sg322
(lp4574
sg21
S'auto_1722'
p4575
sg24
g1
(g25
g3
NtRp4576
(dp4577
g28
(lp4578
(lp4579
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4580
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4581
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4582
a(g81
I39
g51
S'self._set_prediction()'
tp4583
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4584
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4585
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4586
a(g1583
I123
g1584
S'activation = activation + self.b'
tp4587
aasbsg54
g1
(g324
g3
NtRp4588
(dp4589
g291
(lp4590
g1
(g18
g3
NtRp4591
(dp4592
g23
I0
sg16
Nsg315
g3396
sg322
(lp4593
sg21
S'auto_1739'
p4594
sg24
g1
(g25
g3
NtRp4595
(dp4596
g28
(lp4597
sbsg54
g1
(g324
g3
NtRp4598
(dp4599
g291
(lp4600
g3399
ag1
(g18
g3
NtRp4601
(dp4602
g23
I0
sg16
Nsg315
g3396
sg322
(lp4603
sg21
S'auto_1717'
p4604
sg24
g1
(g25
g3
NtRp4605
(dp4606
g28
(lp4607
(lp4608
(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4609
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4610
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp4611
a(g1595
I5960
g1850
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp4612
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4613
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp4614
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4615
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp4616
aasbsg54
g1
(g324
g3
NtRp4617
(dp4618
g291
(lp4619
g3416
asg24
g1
(g25
g3
NtRp4620
(dp4621
g1201
(lp4622
g332
asg330
(lp4623
g333
asbsg334
(dp4624
sg315
g3396
sg336
(lp4625
g4601
asg386
g876
sbsg55
g1
(g56
g3
NtRp4626
(dp4627
g59
(I00
I00
tp4628
sg61
g147
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4629
(dp4630
g1201
(lp4631
g332
asg330
(lp4632
g1872
asbsg334
(dp4633
sg315
g3396
sg336
(lp4634
g4591
asg386
g1876
sbsg55
g1
(g56
g3
NtRp4635
(dp4636
g59
(I00
I00
tp4637
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp4638
(dp4639
g23
I0
sg16
Nsg315
g3396
sg322
(lp4640
sg21
S'auto_1720'
p4641
sg24
g1
(g25
g3
NtRp4642
(dp4643
g28
(lp4644
(lp4645
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4646
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4647
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4648
a(g81
I39
g51
S'self._set_prediction()'
tp4649
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4650
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4651
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4652
a(g1583
I123
g1584
S'activation = activation + self.b'
tp4653
aasbsg54
g1
(g324
g3
NtRp4654
(dp4655
g291
(lp4656
g1
(g18
g3
NtRp4657
(dp4658
g23
I0
sg16
Nsg315
g3396
sg322
(lp4659
sg21
S'auto_1716'
p4660
sg24
g1
(g25
g3
NtRp4661
(dp4662
g28
(lp4663
(lp4664
(g1583
I123
g1584
S'activation = activation + self.b'
tp4665
a(g1586
I128
g1587
S'return theano.tensor.basic.add(self, other)'
tp4666
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4667
a(g1592
I576
g1593
S'inputs = list(map(as_tensor_variable, inputs))'
tp4668
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4669
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp4670
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4671
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp4672
aasbsg54
g1
(g324
g3
NtRp4673
(dp4674
g291
(lp4675
g3445
asg24
g1
(g25
g3
NtRp4676
(dp4677
g1201
(lp4678
g332
asg330
(lp4679
g333
asbsg334
(dp4680
sg315
g3396
sg336
(lp4681
g4657
asg386
g876
sbsg55
g1
(g56
g3
NtRp4682
(dp4683
g59
g3464
sg61
g115
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4684
(dp4685
g1201
(lp4686
g332
asg330
(lp4687
g333
asbsg334
(dp4688
sg315
g3396
sg336
(lp4689
g4638
asg386
g1
(g1659
g3
NtRp4690
(dp4691
g390
(lp4692
sg392
(lp4693
I0
asg394
(lp4694
I0
asg396
(dp4695
I0
(lp4696
I0
assg399
g3464
sg401
I01
sg402
g3465
sbsbsg55
g1
(g56
g3
NtRp4697
(dp4698
g59
(I01
I00
tp4699
sg61
g115
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4700
(dp4701
g1201
(lp4702
g332
asg330
(lp4703
g333
asbsg334
(dp4704
sg315
g3396
sg336
(lp4705
g4572
asg386
g1887
sbsg55
g1
(g56
g3
NtRp4706
(dp4707
g59
(I00
I00
tp4708
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4709
(dp4710
g1201
(lp4711
g332
asg330
(lp4712
g333
asbsg334
(dp4713
sg315
g3396
sg336
(lp4714
g4553
asg386
g1907
sbsg55
g1
(g56
g3
NtRp4715
(dp4716
g59
(I00
I00
tp4717
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp4718
(dp4719
g23
I0
sg16
Nsg315
g3396
sg322
(lp4720
sg21
S'auto_1715'
p4721
sg24
g1
(g25
g3
NtRp4722
(dp4723
g28
(lp4724
(lp4725
(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4726
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4727
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp4728
a(g1595
I5960
g1850
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp4729
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4730
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp4731
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4732
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp4733
aasbsg54
g1
(g324
g3
NtRp4734
(dp4735
g291
(lp4736
g3540
asg24
g1
(g25
g3
NtRp4737
(dp4738
g1201
(lp4739
g332
asg330
(lp4740
g333
asbsg334
(dp4741
sg315
g3396
sg336
(lp4742
g4718
asg386
g876
sbsg55
g1
(g56
g3
NtRp4743
(dp4744
g59
(I00
I00
tp4745
sg61
g212
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4746
(dp4747
g1201
(lp4748
g332
asg330
(lp4749
g1872
asbsg334
(dp4750
sg315
g3396
sg336
(lp4751
g4543
asg386
g1876
sbsg55
g1
(g56
g3
NtRp4752
(dp4753
g59
(I00
I00
tp4754
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp4755
(dp4756
g23
I0
sg16
Nsg315
g3396
sg322
(lp4757
sg21
S'auto_1719'
p4758
sg24
g1
(g25
g3
NtRp4759
(dp4760
g28
(lp4761
(lp4762
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp4763
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp4764
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp4765
a(g81
I39
g51
S'self._set_prediction()'
tp4766
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp4767
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4768
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4769
a(g1583
I123
g1584
S'activation = activation + self.b'
tp4770
aasbsg54
g1
(g324
g3
NtRp4771
(dp4772
g291
(lp4773
g1
(g18
g3
NtRp4774
(dp4775
g23
I0
sg16
Nsg315
g3396
sg322
(lp4776
sg21
S'auto_1714'
p4777
sg24
g1
(g25
g3
NtRp4778
(dp4779
g28
(lp4780
(lp4781
(g1583
I123
g1584
S'activation = activation + self.b'
tp4782
a(g1586
I128
g1587
S'return theano.tensor.basic.add(self, other)'
tp4783
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4784
a(g1592
I576
g1593
S'inputs = list(map(as_tensor_variable, inputs))'
tp4785
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4786
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp4787
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4788
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp4789
aasbsg54
g1
(g324
g3
NtRp4790
(dp4791
g291
(lp4792
g3569
asg24
g1
(g25
g3
NtRp4793
(dp4794
g1201
(lp4795
g332
asg330
(lp4796
g333
asbsg334
(dp4797
sg315
g3396
sg336
(lp4798
g4774
asg386
g876
sbsg55
g1
(g56
g3
NtRp4799
(dp4800
g59
g3588
sg61
g185
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4801
(dp4802
g1201
(lp4803
g332
asg330
(lp4804
g333
asbsg334
(dp4805
sg315
g3396
sg336
(lp4806
g4755
asg386
g1
(g1659
g3
NtRp4807
(dp4808
g390
(lp4809
sg392
(lp4810
I0
asg394
(lp4811
I0
asg396
(dp4812
I0
(lp4813
I0
assg399
g3588
sg401
I01
sg402
g3589
sbsbsg55
g1
(g56
g3
NtRp4814
(dp4815
g59
(I01
I00
tp4816
sg61
g185
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4817
(dp4818
g1201
(lp4819
g332
asg330
(lp4820
g333
asbsg334
(dp4821
sg315
g3396
sg336
(lp4822
g4524
asg386
g1887
sbsg55
g1
(g56
g3
NtRp4823
(dp4824
g59
(I00
I00
tp4825
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4826
(dp4827
g1201
(lp4828
g332
asg330
(lp4829
g333
asbsg334
(dp4830
sg315
g3396
sg336
(lp4831
g4505
asg386
g1907
sbsg55
g1
(g56
g3
NtRp4832
(dp4833
g59
(I00
I00
tp4834
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp4835
(dp4836
g23
I0
sg16
Nsg315
g3396
sg322
(lp4837
sg21
S'auto_1750'
p4838
sg24
g1
(g25
g3
NtRp4839
(dp4840
g28
(lp4841
sbsg54
g1
(g324
g3
NtRp4842
(dp4843
g291
(lp4844
g1
(g18
g3
NtRp4845
(dp4846
g23
I0
sg16
Nsg315
g3396
sg322
(lp4847
sg21
S'auto_1713'
p4848
sg24
g1
(g25
g3
NtRp4849
(dp4850
g28
(lp4851
(lp4852
(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp4853
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp4854
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp4855
a(g1595
I5960
g1850
S'a, b = as_tensor_variable(a), as_tensor_variable(b)'
tp4856
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4857
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp4858
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4859
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp4860
aasbsg54
g1
(g324
g3
NtRp4861
(dp4862
g291
(lp4863
g3730
asg24
g1
(g25
g3
NtRp4864
(dp4865
g1201
(lp4866
g332
asg330
(lp4867
g333
asbsg334
(dp4868
sg315
g3396
sg336
(lp4869
g4845
asg386
g876
sbsg55
g1
(g56
g3
NtRp4870
(dp4871
g59
(I00
I01
tp4872
sg61
g273
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp4873
(dp4874
g1201
(lp4875
g332
asg330
(lp4876
g1714
asbsg334
(dp4877
sg315
g3396
sg336
(lp4878
g4835
asg386
g1
(g1659
g3
NtRp4879
(dp4880
g390
(lp4881
I1
asg392
(lp4882
I0
asg394
(lp4883
sg396
(dp4884
I0
(lp4885
I0
assg399
g3749
sg401
I01
sg402
g3750
sbsbsg55
g1
(g56
g3
NtRp4886
(dp4887
g59
(I00
tp4888
sg61
g273
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g683
g3
NtRp4889
(dp4890
g21
S'auto_65799'
p4891
sg23
Nsg24
g1
(g25
g3
NtRp4892
(dp4893
g28
(lp4894
(lp4895
(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp4896
a(g691
I190
g694
S'y = _reconstruct(x, rv, 1, memo)'
tp4897
a(g691
I334
g696
S'state = deepcopy(state, memo)'
tp4898
a(g691
I163
g694
S'y = copier(x, memo)'
tp4899
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp4900
a(g691
I163
g694
S'y = copier(x, memo)'
tp4901
a(g691
I230
g702
S'y.append(deepcopy(a, memo))'
tp4902
a(g691
I174
g694
S'y = copier(memo)'
tp4903
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp4904
(dp4905
g59
(tsg61
S'float32'
p4906
sg63
g65
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp4907
(I1
(tg104
I00
S'\x00\x00\x00\x00'
tbsbasg24
g1
(g25
g3
NtRp4908
(dp4909
g1201
(lp4910
g332
asg330
(lp4911
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p4912
ag332
asbsg334
(dp4913
sg315
g3396
sg336
(lp4914
g4441
asg386
g2512
sbsg55
g4483
sb(g4461
tp4915
sg1
(g18
g3
NtRp4916
(dp4917
g23
I0
sg16
Nsg315
g3396
sg322
(lp4918
sg21
S'auto_1712'
p4919
sg24
g1
(g25
g3
NtRp4920
(dp4921
g28
(lp4922
(lp4923
(g1583
I123
g1584
S'activation = activation + self.b'
tp4924
a(g1586
I128
g1587
S'return theano.tensor.basic.add(self, other)'
tp4925
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4926
a(g1592
I576
g1593
S'inputs = list(map(as_tensor_variable, inputs))'
tp4927
a(g1595
I155
g1596
S'return x._as_TensorVariable()  # TODO: pass name and ndim arguments'
tp4928
a(g1598
I518
g1599
S'return host_from_gpu(self)'
tp4929
a(g1589
I615
g1590
S'node = self.make_node(*inputs, **kwargs)'
tp4930
a(g1602
I564
g1593
S'broadcastable=x.broadcastable)()])'
tp4931
aasbsg54
g1
(g324
g3
NtRp4932
(dp4933
g291
(lp4934
g3806
asg24
g1
(g25
g3
NtRp4935
(dp4936
g1201
(lp4937
g332
asg330
(lp4938
g333
asbsg334
(dp4939
sg315
g3396
sg336
(lp4940
g4916
asg386
g876
sbsg55
g1
(g56
g3
NtRp4941
(dp4942
g59
g3825
sg61
g245
sg63
g65
sg66
I00
sg16
Nsbsb(g1
(g683
g3
NtRp4943
(dp4944
g21
S'auto_65797'
p4945
sg23
Nsg24
g1
(g25
g3
NtRp4946
(dp4947
g28
(lp4948
(lp4949
(g691
I334
g696
S'state = deepcopy(state, memo)'
tp4950
a(g691
I163
g694
S'y = copier(x, memo)'
tp4951
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp4952
a(g691
I163
g694
S'y = copier(x, memo)'
tp4953
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp4954
a(g691
I163
g694
S'y = copier(x, memo)'
tp4955
a(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp4956
a(g691
I174
g694
S'y = copier(memo)'
tp4957
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp4958
(dp4959
g59
(tsg61
S'int64'
p4960
sg63
g668
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp4961
(I1
(tg1573
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tbsbtp4962
sg3540
(g1
(g18
g3
NtRp4963
(dp4964
g21
S'auto_1732'
p4965
sg23
I0
sg24
g1
(g25
g3
NtRp4966
(dp4967
g28
(lp4968
sbsg16
Nsg54
g1
(g324
g3
NtRp4969
(dp4970
g291
(lp4971
g3540
asg24
g1
(g25
g3
NtRp4972
sg336
(lp4973
g4963
asg386
g1
(g662
g3
NtRp4974
(dp4975
S'i'
I0
sbsbsg55
g665
sbg1
(g18
g3
NtRp4976
(dp4977
g23
I0
sg16
Nsg315
g3396
sg322
(lp4978
sg21
S'auto_1733'
p4979
sg24
g1
(g25
g3
NtRp4980
(dp4981
g28
(lp4982
sbsg54
g1
(g324
g3
NtRp4983
(dp4984
g291
(lp4985
g3540
asg24
g1
(g25
g3
NtRp4986
(dp4987
g1201
(lp4988
g1536
asg330
(lp4989
g659
asbsg334
(dp4990
sg315
g3396
sg336
(lp4991
g4976
asg386
g1
(g662
g3
NtRp4992
(dp4993
S'i'
I1
sbsbsg55
g665
sbtp4994
sg3552
(g1
(g18
g3
NtRp4995
(dp4996
g21
S'auto_1826'
p4997
sg23
I0
sg24
g1
(g25
g3
NtRp4998
(dp4999
g28
(lp5000
sbsg16
Nsg54
g1
(g324
g3
NtRp5001
(dp5002
g291
(lp5003
g3552
asg24
g1
(g25
g3
NtRp5004
sg336
(lp5005
g4995
asg386
g1
(g662
g3
NtRp5006
(dp5007
S'i'
I0
sbsbsg55
g665
sbg1
(g18
g3
NtRp5008
(dp5009
g21
S'auto_1827'
p5010
sg23
I0
sg24
g1
(g25
g3
NtRp5011
(dp5012
g28
(lp5013
sbsg16
Nsg54
g1
(g324
g3
NtRp5014
(dp5015
g291
(lp5016
g3552
asg24
g1
(g25
g3
NtRp5017
sg336
(lp5018
g5008
asg386
g1
(g662
g3
NtRp5019
(dp5020
S'i'
I1
sbsbsg55
g665
sbtp5021
sg1
(g338
g3
NtRp5022
(dp5023
g23
I0
sg16
Nsg315
g3396
sg322
(lp5024
sg21
S'auto_1789'
p5025
sg24
g1
(g25
g3
NtRp5026
(dp5027
g28
(lp5028
sbsg54
g1
(g324
g3
NtRp5029
(dp5030
g291
(lp5031
g3428
ag3434
asg24
g1
(g25
g3
NtRp5032
(dp5033
g1201
(lp5034
g1204
asg330
(lp5035
g332
asbsg334
(dp5036
sg315
g3396
sg336
(lp5037
g5022
asg386
g1
(g885
g3
NtRp5038
(dp5039
g16
S'GpuElemwise{add,no_inplace}'
p5040
sg888
g471
sg889
(dp5041
sg892
g893
sg894
g1
(g895
g3
NtRp5042
(dp5043
g898
Nsg899
(dp5044
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp5045
(dp5046
g59
(I00
I00
tp5047
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsb(g1
(g18
g3
NtRp5048
(dp5049
g21
S'auto_1824'
p5050
sg23
I0
sg24
g1
(g25
g3
NtRp5051
(dp5052
g28
(lp5053
sbsg16
Nsg54
g1
(g324
g3
NtRp5054
(dp5055
g291
(lp5056
g3428
asg24
g1
(g25
g3
NtRp5057
sg336
(lp5058
g5048
asg386
g1
(g662
g3
NtRp5059
(dp5060
S'i'
I0
sbsbsg55
g665
sbg1
(g18
g3
NtRp5061
(dp5062
g21
S'auto_1825'
p5063
sg23
I0
sg24
g1
(g25
g3
NtRp5064
(dp5065
g28
(lp5066
sbsg16
Nsg54
g1
(g324
g3
NtRp5067
(dp5068
g291
(lp5069
g3428
asg24
g1
(g25
g3
NtRp5070
sg336
(lp5071
g5061
asg386
g1
(g662
g3
NtRp5072
(dp5073
S'i'
I1
sbsbsg55
g665
sbtp5074
sg4451
(g4461
tp5075
sg4350
(g4461
g4943
tp5076
sg3789
(g3675
g4943
tp5077
sg1
(g18
g3
NtRp5078
(dp5079
g23
I0
sg16
Nsg315
g3396
sg322
(lp5080
sg21
S'auto_1785'
p5081
sg24
g1
(g25
g3
NtRp5082
(dp5083
g638
I00
sg114
Nsg639
g640
sg28
g4457
sbsg54
g1
(g324
g3
NtRp5084
(dp5085
g291
(lp5086
g3675
asg24
g1
(g25
g3
NtRp5087
(dp5088
g1201
(lp5089
g672
asg330
g4478
sbsg334
(dp5090
sg315
g3396
sg336
(lp5091
g5078
asg386
g4481
sbsg55
g4483
sb(g3675
tp5092
sg1
(g18
g3
NtRp5093
(dp5094
g23
I0
sg16
Nsg315
g3396
sg322
(lp5095
sg21
S'auto_1814'
p5096
sg24
g1
(g25
g3
NtRp5097
(dp5098
g28
(lp5099
sbsg54
g1
(g324
g3
NtRp5100
(dp5101
g291
(lp5102
g1
(g18
g3
NtRp5103
(dp5104
g23
I0
sg16
Nsg315
g3396
sg322
(lp5105
sg21
S'auto_1813'
p5106
sg24
g1
(g25
g3
NtRp5107
(dp5108
g114
Nsg28
g4447
sbsg54
g1
(g324
g3
NtRp5109
(dp5110
g291
(lp5111
g5078
ag4486
ag1
(g18
g3
NtRp5112
(dp5113
g23
I0
sg16
Nsg315
g3396
sg322
(lp5114
sg21
S'auto_1811'
p5115
sg24
g1
(g25
g3
NtRp5116
(dp5117
g114
Nsg28
(lp5118
sbsg54
g1
(g324
g3
NtRp5119
(dp5120
g291
(lp5121
g1
(g338
g3
NtRp5122
(dp5123
g23
I0
sg16
Nsg315
g3396
sg322
(lp5124
sg21
S'auto_1808'
p5125
sg24
g1
(g25
g3
NtRp5126
(dp5127
g28
(lp5128
sbsg54
g1
(g324
g3
NtRp5129
(dp5130
g291
(lp5131
g1
(g338
g3
NtRp5132
(dp5133
g23
I0
sg16
Nsg315
g3396
sg322
(lp5134
sg21
S'auto_1802'
p5135
sg24
g1
(g25
g3
NtRp5136
(dp5137
g28
(lp5138
sbsg54
g1
(g324
g3
NtRp5139
(dp5140
g291
(lp5141
g3552
ag3558
asg24
g1
(g25
g3
NtRp5142
(dp5143
g1201
(lp5144
g1204
asg330
(lp5145
g332
asbsg334
(dp5146
sg315
g3396
sg336
(lp5147
g5132
asg386
g1
(g885
g3
NtRp5148
(dp5149
g16
S'GpuElemwise{add,no_inplace}'
p5150
sg888
g471
sg889
(dp5151
sg892
g893
sg894
g1
(g895
g3
NtRp5152
(dp5153
g898
Nsg899
(dp5154
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp5155
(dp5156
g59
(I00
I00
tp5157
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg24
g1
(g25
g3
NtRp5158
(dp5159
g1201
(lp5160
g1204
asg330
(lp5161
g332
asbsg334
(dp5162
sg315
g3396
sg336
(lp5163
g5122
asg386
g1
(g885
g3
NtRp5164
(dp5165
g16
S'GpuElemwise{tanh,no_inplace}'
p5166
sg888
g479
sg889
(dp5167
sg892
g1911
sg894
g1
(g895
g3
NtRp5168
(dp5169
g898
Nsg899
(dp5170
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp5171
(dp5172
g59
(I00
I00
tp5173
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsbasg24
g1
(g25
g3
NtRp5174
(dp5175
g1201
(lp5176
g1352
asg330
(lp5177
g332
asbsg334
(dp5178
sg315
g3396
sg336
(lp5179
g5112
asg386
g876
sbsg55
g1
(g56
g3
NtRp5180
(dp5181
g59
(I00
I00
tp5182
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsbag1
(g18
g3
NtRp5183
(dp5184
g23
I0
sg16
Nsg315
g3396
sg322
(lp5185
sg21
S'auto_1812'
p5186
sg24
g1
(g25
g3
NtRp5187
(dp5188
g114
Nsg28
(lp5189
sbsg54
g1
(g324
g3
NtRp5190
(dp5191
g291
(lp5192
g3719
asg24
g1
(g25
g3
NtRp5193
(dp5194
g1201
(lp5195
g1352
asg330
(lp5196
g332
asbsg334
(dp5197
sg315
g3396
sg336
(lp5198
g5183
asg386
g876
sbsg55
g1
(g56
g3
NtRp5199
(dp5200
g59
(I00
tp5201
sg61
g273
sg63
g65
sg66
I00
sg16
Nsbsbag4889
asg24
g1
(g25
g3
NtRp5202
(dp5203
g1201
(lp5204
g1352
asg330
g4911
sbsg334
(dp5205
sg315
g3396
sg336
(lp5206
g5103
asg386
g2512
sbsg55
g4483
sbasg24
g1
(g25
g3
NtRp5207
(dp5208
g1201
(lp5209
g781
asg330
(lp5210
g1714
ag332
asbsg334
(dp5211
sg315
g3396
sg336
(lp5212
g5093
asg386
g1
(g1659
g3
NtRp5213
(dp5214
g390
(lp5215
sg392
(lp5216
I0
asg394
(lp5217
I1
asg396
(dp5218
I0
(lp5219
I0
assg399
g3910
sg401
I01
sg402
g3911
sbsbsg55
g1
(g56
g3
NtRp5220
(dp5221
g59
(I00
I01
tp5222
sg61
g3902
sg63
g65
sg66
I00
sg16
Nsbsb(g3675
g4943
tp5223
sg3701
(tsg1
(g338
g3
NtRp5224
(dp5225
g23
I0
sg16
Nsg315
g3396
sg322
(lp5226
sg21
S'auto_1815'
p5227
sg24
g1
(g25
g3
NtRp5228
(dp5229
g28
(lp5230
sbsg54
g1
(g324
g3
NtRp5231
(dp5232
g291
(lp5233
g1
(g18
g3
NtRp5234
(dp5235
g23
I0
sg16
Nsg315
g3396
sg322
(lp5236
sg21
S'auto_1831'
p5237
sg24
g1
(g25
g3
NtRp5238
(dp5239
g28
(lp5240
sbsg54
g1
(g324
g3
NtRp5241
(dp5242
g291
(lp5243
g3789
asg24
g1
(g25
g3
NtRp5244
(dp5245
g1201
(lp5246
g2174
asg330
(lp5247
g781
asbsg334
(dp5248
sg315
g3396
sg336
(lp5249
g5234
asg386
g876
sbsg55
g1
(g56
g3
NtRp5250
(dp5251
g59
(I00
I01
tp5252
sg61
g3902
sg63
g65
sg66
I00
sg16
Nsbsbasg24
g1
(g25
g3
NtRp5253
(dp5254
g1201
(lp5255
g2174
asg330
(lp5256
g332
asbsg334
(dp5257
sg315
g3396
sg336
(lp5258
g5224
asg386
g1
(g985
g3
NtRp5259
(dp5260
g114
Nsbsbsg55
g1
(g108
g3
NtRp5261
(dp5262
g59
(I00
I01
tp5263
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g3902
sbsb(g3675
g4943
tp5264
sg4543
(g4461
g4976
tp5265
sg1
(g18
g3
NtRp5266
(dp5267
g23
I0
sg16
Nsg315
g3396
sg322
(lp5268
sg21
S'auto_1718'
p5269
sg24
g1
(g25
g3
NtRp5270
(dp5271
g28
(lp5272
(lp5273
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5274
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5275
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5276
a(g81
I39
g51
S'self._set_prediction()'
tp5277
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5278
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5279
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5280
a(g1583
I123
g1584
S'activation = activation + self.b'
tp5281
aasbsg54
g1
(g324
g3
NtRp5282
(dp5283
g291
(lp5284
g4916
asg24
g1
(g25
g3
NtRp5285
(dp5286
g1201
(lp5287
g332
asg330
(lp5288
g333
asbsg334
(dp5289
sg315
g3396
sg336
(lp5290
g5266
asg386
g1
(g1659
g3
NtRp5291
(dp5292
g390
(lp5293
sg392
(lp5294
I0
asg394
(lp5295
I0
asg396
(dp5296
I0
(lp5297
I0
assg399
g3825
sg401
I01
sg402
g3826
sbsbsg55
g1
(g56
g3
NtRp5298
(dp5299
g59
(I01
I01
tp5300
sg61
g245
sg63
g65
sg66
I00
sg16
Nsbsb(g4943
g4943
tp5301
sg1
(g18
g3
NtRp5302
(dp5303
g23
I0
sg16
Nsg315
g3396
sg322
(lp5304
sg21
S'auto_1721'
p5305
sg24
g1
(g25
g3
NtRp5306
(dp5307
g28
(lp5308
(lp5309
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5310
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5311
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5312
a(g81
I39
g51
S'self._set_prediction()'
tp5313
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5314
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5315
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5316
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp5317
aasbsg54
g1
(g324
g3
NtRp5318
(dp5319
g291
(lp5320
g3399
ag4601
asg24
g1
(g25
g3
NtRp5321
(dp5322
g1201
(lp5323
g1872
asg330
(lp5324
g333
asbsg334
(dp5325
sg315
g3396
sg336
(lp5326
g5302
asg386
g2467
sbsg55
g1
(g56
g3
NtRp5327
(dp5328
g59
(I00
I00
tp5329
sg61
S'float32'
p5330
sg63
g65
sg66
I00
sg16
Nsbsb(g4461
g1
(g18
g3
NtRp5331
(dp5332
g21
S'auto_1736'
p5333
sg23
I0
sg24
g1
(g25
g3
NtRp5334
(dp5335
g28
(lp5336
sbsg16
Nsg54
g1
(g324
g3
NtRp5337
(dp5338
g291
(lp5339
g3416
asg24
g1
(g25
g3
NtRp5340
sg336
(lp5341
g5331
asg386
g1
(g662
g3
NtRp5342
(dp5343
S'i'
I1
sbsbsg55
g665
sbtp5344
sg5183
(g1
(g18
g3
NtRp5345
(dp5346
g21
S'auto_1730'
p5347
sg23
I0
sg24
g1
(g25
g3
NtRp5348
(dp5349
g28
(lp5350
sbsg16
Nsg54
g1
(g324
g3
NtRp5351
(dp5352
g291
(lp5353
g3730
asg24
g1
(g25
g3
NtRp5354
sg336
(lp5355
g5345
asg386
g1
(g662
g3
NtRp5356
(dp5357
S'i'
I0
sbsbsg55
g665
sbtp5358
sg4294
(g3675
tp5359
sg4461
(tsg4889
(tsg1
(g18
g3
NtRp5360
(dp5361
g23
I0
sg16
Nsg315
g3396
sg322
(lp5362
sg21
S'auto_1840'
p5363
sg24
g1
(g25
g3
NtRp5364
(dp5365
g28
(lp5366
sbsg54
g1
(g324
g3
NtRp5367
(dp5368
g291
(lp5369
g4294
asg24
g1
(g25
g3
NtRp5370
(dp5371
g1201
(lp5372
g2174
asg330
(lp5373
g1352
asbsg334
(dp5374
sg315
g3396
sg336
(lp5375
g5360
asg386
g876
sbsg55
g1
(g56
g3
NtRp5376
(dp5377
g59
(I00
tp5378
sg61
g3902
sg63
g65
sg66
I00
sg16
Nsbsb(g3675
tp5379
sg3434
(g4943
g1
(g18
g3
NtRp5380
(dp5381
g21
S'auto_1734'
p5382
sg23
I0
sg24
g1
(g25
g3
NtRp5383
(dp5384
g28
(lp5385
sbsg16
Nsg54
g1
(g324
g3
NtRp5386
(dp5387
g291
(lp5388
g3445
asg24
g1
(g25
g3
NtRp5389
sg336
(lp5390
g5380
asg386
g1
(g662
g3
NtRp5391
(dp5392
S'i'
I0
sbsbsg55
g665
sbtp5393
sg4657
(g5380
tp5394
sg4845
(g5345
g4943
tp5395
sg5112
(g4995
g5008
tp5396
sg3399
(g4461
g1
(g18
g3
NtRp5397
(dp5398
g21
S'auto_1738'
p5399
sg23
I0
sg24
g1
(g25
g3
NtRp5400
(dp5401
g28
(lp5402
sbsg16
Nsg54
g1
(g324
g3
NtRp5403
(dp5404
g291
(lp5405
g3399
asg24
g1
(g25
g3
NtRp5406
sg336
(lp5407
g5397
asg386
g1
(g662
g3
NtRp5408
(dp5409
S'i'
I1
sbsbsg55
g665
sbtp5410
sg5234
(g3675
g4943
tp5411
sg3664
(g3675
tp5412
sg1
(g18
g3
NtRp5413
(dp5414
g23
I0
sg16
Nsg315
g3396
sg322
(lp5415
sg21
S'auto_1835'
p5416
sg24
g1
(g25
g3
NtRp5417
(dp5418
g28
(lp5419
sbsg54
g1
(g324
g3
NtRp5420
(dp5421
g291
(lp5422
g4486
asg24
g1
(g25
g3
NtRp5423
(dp5424
g1201
(lp5425
g2531
asg409
g1
(g324
g3
NtRp5426
(dp5427
g291
(lp5428
g1
(g413
g3
NtRp5429
(dp5430
g21
S'auto_1844'
p5431
sg23
Nsg24
g1
(g25
g3
NtRp5432
sg16
Nsg54
Nsg55
g440
sbasg24
g1
(g25
g3
NtRp5433
sg336
(lp5434
g1
(g413
g3
NtRp5435
(dp5436
g21
S'auto_1845'
p5437
sg23
I0
sg24
g1
(g25
g3
NtRp5438
sg16
Nsg54
g5426
sg55
g2545
sbasg386
g2548
sbsg330
(lp5439
g1352
asbsg334
(dp5440
sg315
g3396
sg336
(lp5441
g5413
asg386
g2562
sbsg55
g3716
sb(tsg4835
(g5345
tp5442
sg1
(g2878
g3
NtRp5443
(dp5444
g21
S'auto_1752'
p5445
sg23
Nsg24
g1
(g25
g3
NtRp5446
(dp5447
g28
(lp5448
sbsg16
Nsg710
g1015
(g1573
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp5449
sg322
(lp5450
sg55
g2887
sb(tsg4572
(g4461
g5331
tp5451
sg4505
(g4461
g4976
tp5452
sg5132
(g4995
g5008
tp5453
sg3754
(tsg4148
(g5048
g5061
tp5454
sg1
(g18
g3
NtRp5455
(dp5456
g23
I0
sg16
Nsg315
g3396
sg322
(lp5457
sg21
S'auto_1843'
p5458
sg24
g1
(g25
g3
NtRp5459
(dp5460
g28
(lp5461
sbsg54
g1
(g324
g3
NtRp5462
(dp5463
g291
(lp5464
g3664
asg24
g1
(g25
g3
NtRp5465
(dp5466
g1201
(lp5467
g2174
asg330
(lp5468
g672
asbsg334
(dp5469
sg315
g3396
sg336
(lp5470
g5455
asg386
g876
sbsg55
g1
(g56
g3
NtRp5471
(dp5472
g59
(I00
tp5473
sg61
g678
sg63
g65
sg66
I00
sg16
Nsbsb(g3675
tp5474
sg4591
(g4461
g5331
tp5475
sg3795
(g4943
g4943
tp5476
sg3868
(g4461
g4943
tp5477
sg3730
(g5345
g4943
tp5478
sg1
(g18
g3
NtRp5479
(dp5480
g23
I0
sg16
Nsg315
g3396
sg322
(lp5481
sg21
S'auto_1756'
p5482
sg24
g1
(g25
g3
NtRp5483
(dp5484
g28
g5099
sbsg54
g1
(g324
g3
NtRp5485
(dp5486
g291
(lp5487
g4441
asg24
g1
(g25
g3
NtRp5488
(dp5489
g1201
(lp5490
g332
asg330
g5210
sbsg334
(dp5491
sg315
g3396
sg336
(lp5492
g5479
asg386
g5213
sbsg55
g5220
sb(g4461
g4943
tp5493
sg1
(g18
g3
NtRp5494
(dp5495
g23
I0
sg16
Nsg315
g3396
sg322
(lp5496
sg21
S'auto_1838'
p5497
sg24
g1
(g25
g3
NtRp5498
(dp5499
g28
(lp5500
sbsg54
g1
(g324
g3
NtRp5501
(dp5502
g291
(lp5503
g4889
asg24
g1
(g25
g3
NtRp5504
(dp5505
g1201
(lp5506
g2531
asg409
g1
(g324
g3
NtRp5507
(dp5508
g291
(lp5509
g1
(g413
g3
NtRp5510
(dp5511
g21
S'auto_1847'
p5512
sg23
Nsg24
g1
(g25
g3
NtRp5513
sg16
Nsg54
Nsg55
g440
sbasg24
g1
(g25
g3
NtRp5514
sg336
(lp5515
g1
(g413
g3
NtRp5516
(dp5517
g21
S'auto_1848'
p5518
sg23
I0
sg24
g1
(g25
g3
NtRp5519
sg16
Nsg54
g5507
sg55
g2545
sbasg386
g2548
sbsg330
(lp5520
g1352
asbsg334
(dp5521
sg315
g3396
sg336
(lp5522
g5494
asg386
g2562
sbsg55
g3769
sb(tsg1
(g18
g3
NtRp5523
(dp5524
g23
I0
sg16
Nsg315
g3396
sg322
(lp5525
sg21
S'auto_1767'
p5526
sg24
g1
(g25
g3
NtRp5527
(dp5528
g28
(lp5529
sbsg54
g1
(g324
g3
NtRp5530
(dp5531
g291
(lp5532
g4461
ag4976
asg24
g1
(g25
g3
NtRp5533
(dp5534
g1201
(lp5535
g1536
asg330
(lp5536
g659
asbsg334
(dp5537
sg315
g3396
sg336
(lp5538
g5523
asg386
g1549
sbsg55
g1
(g56
g3
NtRp5539
(dp5540
g59
(I00
tp5541
sg61
g667
sg63
g668
sg66
I00
sg16
Nsbsb(g1
(g683
g3
NtRp5542
(dp5543
g21
S'auto_65800'
p5544
sg23
Nsg24
g1
(g25
g3
NtRp5545
(dp5546
g28
(lp5547
(lp5548
(g691
I334
g696
S'state = deepcopy(state, memo)'
tp5549
a(g691
I163
g694
S'y = copier(x, memo)'
tp5550
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp5551
a(g691
I163
g694
S'y = copier(x, memo)'
tp5552
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp5553
a(g691
I163
g694
S'y = copier(x, memo)'
tp5554
a(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp5555
a(g691
I174
g694
S'y = copier(memo)'
tp5556
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp5557
(dp5558
g59
(tsg61
S'int64'
p5559
sg63
g668
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp5560
(I1
(tg1573
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp5561
sg3719
(g5345
tp5562
sg3675
(tsg4774
(g1
(g18
g3
NtRp5563
(dp5564
g21
S'auto_1731'
p5565
sg23
I0
sg24
g1
(g25
g3
NtRp5566
(dp5567
g28
(lp5568
sbsg16
Nsg54
g1
(g324
g3
NtRp5569
(dp5570
g291
(lp5571
g3569
asg24
g1
(g25
g3
NtRp5572
sg336
(lp5573
g5563
asg386
g1
(g662
g3
NtRp5574
(dp5575
S'i'
I0
sbsbsg55
g665
sbtp5576
sg3534
(g5048
g5061
tp5577
sg4553
(g4461
g5331
tp5578
sg3857
(g3675
g4943
tp5579
sg1
(g18
g3
NtRp5580
(dp5581
g23
I0
sg16
Nsg315
g3396
sg322
(lp5582
sg21
S'auto_1755'
p5583
sg24
g1
(g25
g3
NtRp5584
(dp5585
g28
(lp5586
sbsg54
g1
(g324
g3
NtRp5587
(dp5588
g291
(lp5589
g4451
ag4486
ag4505
ag4835
ag4889
asg24
g1
(g25
g3
NtRp5590
(dp5591
g1201
(lp5592
S'LocalOptGroup(use_c_ger,use_c_gemv)'
p5593
asg330
(lp5594
g1714
asbsg334
(dp5595
sg315
g3396
sg336
(lp5596
g5580
asg386
g2117
sbsg55
g4483
sb(g4461
tp5597
sg1
(g18
g3
NtRp5598
(dp5599
g23
I0
sg16
Nsg315
g3396
sg322
(lp5600
sg21
S'auto_1724'
p5601
sg24
g1
(g25
g3
NtRp5602
(dp5603
g28
(lp5604
(lp5605
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5606
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5607
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5608
a(g81
I39
g51
S'self._set_prediction()'
tp5609
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5610
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5611
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5612
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp5613
aasbsg54
g1
(g324
g3
NtRp5614
(dp5615
g291
(lp5616
g4553
ag4718
asg24
g1
(g25
g3
NtRp5617
(dp5618
g1201
(lp5619
g1872
asg330
(lp5620
g333
asbsg334
(dp5621
sg315
g3396
sg336
(lp5622
g5598
asg386
g2467
sbsg55
g1
(g56
g3
NtRp5623
(dp5624
g59
(I00
I00
tp5625
sg61
S'float32'
p5626
sg63
g65
sg66
I00
sg16
Nsbsb(g4461
g4976
tp5627
sg4601
(g1
(g18
g3
NtRp5628
(dp5629
g21
S'auto_1735'
p5630
sg23
I0
sg24
g1
(g25
g3
NtRp5631
(dp5632
g28
(lp5633
sbsg16
Nsg54
g1
(g324
g3
NtRp5634
(dp5635
g291
(lp5636
g3416
asg24
g1
(g25
g3
NtRp5637
sg336
(lp5638
g5628
asg386
g1
(g662
g3
NtRp5639
(dp5640
S'i'
I0
sbsbsg55
g665
sbg5331
tp5641
sg1
(g338
g3
NtRp5642
(dp5643
g23
I0
sg16
Nsg315
g3396
sg322
(lp5644
sg21
S'auto_1832'
p5645
sg24
g1
(g25
g3
NtRp5646
(dp5647
g28
(lp5648
sbsg54
g1
(g324
g3
NtRp5649
(dp5650
g291
(lp5651
g5455
asg24
g1
(g25
g3
NtRp5652
(dp5653
g1201
(lp5654
g2174
asg330
(lp5655
g1352
asbsg334
(dp5656
sg315
g3396
sg336
(lp5657
g5642
asg386
g1
(g985
g3
NtRp5658
(dp5659
g114
Nsbsbsg55
g4311
sb(g3675
tp5660
sg3558
(g4943
g5563
tp5661
sg1
(g338
g3
NtRp5662
(dp5663
g23
I0
sg16
Nsg315
g3396
sg322
(lp5664
sg21
S'auto_1795'
p5665
sg24
g1
(g25
g3
NtRp5666
(dp5667
g28
(lp5668
sbsg54
g1
(g324
g3
NtRp5669
(dp5670
g291
(lp5671
g5022
asg24
g1
(g25
g3
NtRp5672
(dp5673
g1201
(lp5674
g1204
asg330
(lp5675
g332
asbsg334
(dp5676
sg315
g3396
sg336
(lp5677
g5662
asg386
g1
(g885
g3
NtRp5678
(dp5679
g16
S'GpuElemwise{tanh,no_inplace}'
p5680
sg888
g479
sg889
(dp5681
sg892
g1911
sg894
g1
(g895
g3
NtRp5682
(dp5683
g898
Nsg899
(dp5684
sbsg901
I00
sbsbsg55
g1
(g108
g3
NtRp5685
(dp5686
g59
(I00
I00
tp5687
sg112
I2
sg16
Nsg113
I11
sg114
Nsg61
g421
sbsb(g5048
g5061
tp5688
sg3569
(g5563
tp5689
sg1
(g18
g3
NtRp5690
(dp5691
g23
I0
sg16
Nsg315
g3396
sg322
(lp5692
sg21
S'auto_1741'
p5693
sg24
g1
(g25
g3
NtRp5694
(dp5695
g28
(lp5696
sbsg54
g1
(g324
g3
NtRp5697
(dp5698
g291
(lp5699
g4505
ag4845
asg24
g1
(g25
g3
NtRp5700
(dp5701
g1201
(lp5702
g1714
asg330
(lp5703
g1872
asbsg334
(dp5704
sg315
g3396
sg336
(lp5705
g5690
asg386
g1876
sbsg55
g1
(g56
g3
NtRp5706
(dp5707
g59
(I00
I01
tp5708
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsb(g4461
g4943
tp5709
sg4976
(tsg4486
(tsg5103
(g3675
tp5710
sg3410
(g4461
g5397
tp5711
sg4320
(g3675
g4943
tp5712
sg1
(g18
g3
NtRp5713
(dp5714
g23
I0
sg16
Nsg315
g3396
sg322
(lp5715
sg21
S'auto_1753'
p5716
sg24
g1
(g25
g3
NtRp5717
(dp5718
g28
(lp5719
sbsg54
g1
(g324
g3
NtRp5720
(dp5721
g291
(lp5722
g5523
ag5443
asg24
g1
(g25
g3
NtRp5723
(dp5724
g1201
(lp5725
g1536
asg330
(lp5726
g1714
asbsg334
(dp5727
sg315
g3396
sg336
(lp5728
g5713
asg386
g1
(g3029
g3
NtRp5729
(dp5730
g3032
(g2887
tp5731
sbsbsg55
g1
(g56
g3
NtRp5732
(dp5733
g59
(tsg61
g667
sg63
g668
sg66
I00
sg16
Nsbsb(tsg1
(g18
g3
NtRp5734
(dp5735
g23
I0
sg16
Nsg315
g3396
sg322
(lp5736
sg21
S'auto_1727'
p5737
sg24
g1
(g25
g3
NtRp5738
(dp5739
g28
(lp5740
(lp5741
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5742
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5743
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5744
a(g81
I39
g51
S'self._set_prediction()'
tp5745
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5746
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5747
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5748
a(g1583
I121
g1584
S'activation = T.dot(input, self.W)'
tp5749
aasbsg54
g1
(g324
g3
NtRp5750
(dp5751
g291
(lp5752
g4505
ag4845
asg24
g1
(g25
g3
NtRp5753
(dp5754
g1201
(lp5755
g1872
asg330
(lp5756
g333
asbsg334
(dp5757
sg315
g3396
sg336
(lp5758
g5734
asg386
g2467
sbsg55
g1
(g56
g3
NtRp5759
(dp5760
g59
(I00
I01
tp5761
sg61
S'float32'
p5762
sg63
g65
sg66
I00
sg16
Nsbsb(g4461
g4943
tp5763
sg4221
(g4995
g5008
tp5764
sg5122
(g4995
g5008
tp5765
sg4524
(g4461
g4976
tp5766
sg1
(g18
g3
NtRp5767
(dp5768
g23
I0
sg16
Nsg315
g3396
sg322
(lp5769
sg21
S'auto_1728'
p5770
sg24
g1
(g25
g3
NtRp5771
(dp5772
g28
(lp5773
(lp5774
(g38
I2481
g39
S"self.compile if kw['shell_futures'] else None)"
tp5775
a(g41
I292
g42
S"exec(compiler(scripttext, filename, 'exec'), glob, loc)"
tp5776
a(g44
I27
g45
S'network = MLPNetwork(layers)'
tp5777
a(g81
I39
g51
S'self._set_prediction()'
tp5778
a(g1641
I522
g1642
S'prediction_stochastic = self.get_output(deterministic=False)'
tp5779
a(g1644
I64
g1645
S'return layers.get_output(self.network, inputs, **kwargs)'
tp5780
a(g1647
I190
g1645
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp5781
a(g1583
I123
g1584
S'activation = activation + self.b'
tp5782
aasbsg54
g1
(g324
g3
NtRp5783
(dp5784
g291
(lp5785
g5479
ag5266
asg24
g1
(g25
g3
NtRp5786
(dp5787
g1201
(lp5788
g332
asg330
(lp5789
g333
asbsg334
(dp5790
sg315
g3396
sg336
(lp5791
g5767
asg386
g1887
sbsg55
g1
(g56
g3
NtRp5792
(dp5793
g59
(I00
I01
tp5794
sg61
g421
sg63
g65
sg66
I00
sg16
Nsbsb(g4461
g4943
tp5795
sg3416
(g5628
g5331
tp5796
sg3445
(g5380
tp5797
sg1
(g18
g3
NtRp5798
(dp5799
g23
I0
sg16
Nsg315
g3396
sg322
(lp5800
sg21
S'auto_1751'
p5801
sg24
g1
(g25
g3
NtRp5802
(dp5803
g28
(lp5804
sbsg54
g1
(g324
g3
NtRp5805
(dp5806
g291
(lp5807
g4505
asg24
g1
(g25
g3
NtRp5808
(dp5809
g1201
(lp5810
g659
asg330
(lp5811
g1714
asbsg334
(dp5812
sg315
g3396
sg336
(lp5813
g5798
asg386
g2929
sbsg55
g2930
sb(g1
(g683
g3
NtRp5814
(dp5815
g21
S'auto_65801'
p5816
sg23
Nsg24
g1
(g25
g3
NtRp5817
(dp5818
g28
(lp5819
(lp5820
(g691
I334
g696
S'state = deepcopy(state, memo)'
tp5821
a(g691
I163
g694
S'y = copier(x, memo)'
tp5822
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp5823
a(g691
I163
g694
S'y = copier(x, memo)'
tp5824
a(g691
I257
g699
S'y[deepcopy(key, memo)] = deepcopy(value, memo)'
tp5825
a(g691
I163
g694
S'y = copier(x, memo)'
tp5826
a(g691
I237
g692
S'y.append(deepcopy(a, memo))'
tp5827
a(g691
I174
g694
S'y = copier(memo)'
tp5828
aasg705
Nsbsg16
Nsg55
g1
(g56
g3
NtRp5829
(dp5830
g59
(tsg61
S'int64'
p5831
sg63
g668
sg66
I00
sg16
Nsbsg710
g101
(g102
(I0
tS'b'
tRp5832
(I1
(tg1573
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tbsbtp5833
sg3658
(g4995
g5008
tp5834
sg1
(g18
g3
NtRp5835
(dp5836
g23
I0
sg16
Nsg315
g3396
sg322
(lp5837
sg21
S'auto_1770'
p5838
sg24
g1
(g25
g3
NtRp5839
(dp5840
g28
(lp5841
sbsg54
g1
(g324
g3
NtRp5842
(dp5843
g291
(lp5844
g3410
asg24
g1
(g25
g3
NtRp5845
(dp5846
g1201
(lp5847
g2174
asg330
(lp5848
g332
asbsg334
(dp5849
sg315
g3396
sg336
(lp5850
g5835
asg386
g876
sbsg55
g1
(g56
g3
NtRp5851
(dp5852
g59
(I00
I00
tp5853
sg61
g62
sg63
g65
sg66
I00
sg16
Nsbsb(g4461
g5397
tp5854
sg3428
(g5048
g5061
tp5855
sg4718
(g4963
g4976
tp5856
sg1
(g338
g3
NtRp5857
(dp5858
g23
I0
sg16
Nsg315
g3396
sg322
(lp5859
sg21
S'auto_1829'
p5860
sg24
g1
(g25
g3
NtRp5861
(dp5862
g28
(lp5863
sbsg54
g1
(g324
g3
NtRp5864
(dp5865
g291
(lp5866
g5360
asg24
g1
(g25
g3
NtRp5867
(dp5868
g1201
(lp5869
g2174
asg330
(lp5870
g781
asbsg334
(dp5871
sg315
g3396
sg336
(lp5872
g5857
asg386
g1
(g985
g3
NtRp5873
(dp5874
g114
Nsbsbsg55
g1
(g108
g3
NtRp5875
(dp5876
g59
(I00
tp5877
sg112
I1
sg16
Nsg113
I11
sg114
Nsg61
g3902
sbsb(g3675
tp5878
sg4755
(g4943
g5563
tp5879
sg3806
(g4943
tp5880
sg4638
(g4943
g5380
tp5881
sg3778
(g3675
tp5882
ssg3037
g4943
sg3038
(dp5883
g5397
g148
((lp5884
g3399
ag3410
ag5835
atRp5885
sg5078
g148
((ltRp5886
sg5413
g148
((ltRp5887
sg5835
g148
((ltRp5888
sg5542
g148
((lp5889
g5523
atRp5890
sg4350
g148
((ltRp5891
sg4963
g148
((lp5892
g3540
ag4718
atRp5893
sg5713
g148
((ltRp5894
sg5103
g148
((ltRp5895
sg1
(g18
g3
NtRp5896
(dp5897
g21
S'auto_1902'
p5898
sg23
I0
sg24
g1
(g25
g3
NtRp5899
(dp5900
g28
(lp5901
sbsg16
Nsg54
g1
(g324
g3
NtRp5902
(dp5903
g291
(lp5904
g3778
asg24
g1
(g25
g3
NtRp5905
sg336
(lp5906
g5896
asg386
g1
(g662
g3
NtRp5907
(dp5908
S'i'
I0
sbsbsg55
g665
sbg148
((lp5909
g3778
atRp5910
sg5093
g148
((ltRp5911
sg5628
g148
((lp5912
g3416
ag4601
atRp5913
sg5563
g148
((lp5914
g4755
ag3569
ag3558
ag4774
atRp5915
sg4148
g148
((ltRp5916
sg5048
g148
((lp5917
g5022
ag5662
ag3534
ag4148
ag3428
atRp5918
sg4221
g148
((ltRp5919
sg5598
g148
((ltRp5920
sg4294
g148
((ltRp5921
sg5494
g148
((ltRp5922
sg5224
g148
((ltRp5923
sg5061
g148
((lp5924
g5022
ag5662
ag3534
ag4148
ag3428
atRp5925
sg5580
g148
((ltRp5926
sg3868
g148
((ltRp5927
sg5642
g148
((ltRp5928
sg5857
g148
((ltRp5929
sg4943
g148
((lp5930
g5224
ag3730
ag3789
ag5266
ag5767
ag3434
ag4845
ag5234
ag4916
ag3795
ag5479
ag3857
ag5093
ag3868
ag3558
ag5690
ag5734
ag4320
ag4755
ag4638
ag3806
ag4350
atRp5931
sg5690
g148
((ltRp5932
sg4995
g148
((lp5933
g3552
ag5132
ag4221
ag5112
ag3658
ag5122
atRp5934
sg4461
g148
((lp5935
g5580
ag4441
ag3399
ag4553
ag4505
ag4451
ag5598
ag5835
ag4572
ag3410
ag4524
ag5734
ag4543
ag5302
ag3868
ag5767
ag5479
ag4591
ag4350
ag5690
atRp5936
sg5380
g148
((lp5937
g4638
ag4657
ag3434
ag3445
atRp5938
sg4320
g148
((ltRp5939
sg5734
g148
((ltRp5940
sg5331
g148
((lp5941
g3416
ag4553
ag4572
ag5302
ag4601
ag4591
atRp5942
sg5122
g148
((ltRp5943
sg5662
g148
((ltRp5944
sg5767
g148
((ltRp5945
sg5798
g148
((ltRp5946
sg5008
g148
((lp5947
g3552
ag5132
ag4221
ag5112
ag3658
ag5122
atRp5948
sg1
(g18
g3
NtRp5949
(dp5950
g21
S'auto_1841'
p5951
sg23
I0
sg24
g1
(g25
g3
NtRp5952
(dp5953
g28
(lp5954
sbsg16
Nsg54
g1
(g324
g3
NtRp5955
(dp5956
g291
(lp5957
g4294
asg24
g1
(g25
g3
NtRp5958
sg336
(lp5959
g5949
asg386
g1
(g662
g3
NtRp5960
(dp5961
S'i'
I0
sbsbsg55
g665
sbg148
((lp5962
g4294
ag5360
atRp5963
sg3675
g148
((lp5964
g5078
ag5360
ag3857
ag5224
ag5234
ag3789
ag5857
ag3664
ag5642
ag5093
ag3778
ag3868
ag4294
ag5455
ag5103
ag4320
atRp5965
sg5345
g148
((lp5966
g3730
ag4835
ag4845
ag5183
ag3719
atRp5967
sg4976
g148
((lp5968
g3540
ag4505
ag5598
ag4524
ag4543
ag4718
atRp5969
sg5814
g148
((lp5970
g5798
atRp5971
sg5302
g148
((ltRp5972
ssbsg3129
g148
((lp5973
g3431
ag3683
ag3792
ag3661
ag3672
ag3413
ag3442
ag3860
ag3781
ag3537
ag3402
ag3727
ag3803
ag3555
ag3566
atRp5974
sg3132
(dp5975
sg3134
(lp5976
g1
(g3136
g3
NtRp5977
(dp5978
g3139
I00
sg3140
g148
((ltRp5979
sba(itheano.compile.function_module
Supervisor
p5980
(dp5981
g3144
(lp5982
g3399
ag3416
ag3445
ag3540
ag3569
ag3730
ag3806
asbag1
(g3146
g3
NtRp5983
ag3979
ag4437
ag4006
asbsg336
g1
(g3148
g3
NtRp5984
(dp5985
g301
g1
(g18
g3
NtRp5986
(dp5987
g21
S'auto_1704'
p5988
sg23
I0
sg24
g1
(g25
g3
NtRp5989
(dp5990
g28
g5773
sbsg16
Nsg54
g1
(g324
g3
NtRp5991
(dp5992
g291
(lp5993
g1
(g18
g3
NtRp5994
(dp5995
g21
S'auto_1701'
p5996
sg23
I0
sg24
g1
(g25
g3
NtRp5997
(dp5998
g28
g5740
sbsg16
Nsg54
g1
(g324
g3
NtRp5999
(dp6000
g291
(lp6001
g1
(g18
g3
NtRp6002
(dp6003
g21
S'auto_1699'
p6004
sg23
I0
sg24
g1
(g25
g3
NtRp6005
(dp6006
g28
g4511
sbsg16
Nsg54
g1
(g324
g3
NtRp6007
(dp6008
g291
(lp6009
g1
(g18
g3
NtRp6010
(dp6011
g21
S'auto_1698'
p6012
sg23
I0
sg24
g1
(g25
g3
NtRp6013
(dp6014
g28
g4530
sbsg16
Nsg54
g1
(g324
g3
NtRp6015
(dp6016
g291
(lp6017
g1
(g18
g3
NtRp6018
(dp6019
g21
S'auto_1695'
p6020
sg23
I0
sg24
g1
(g25
g3
NtRp6021
(dp6022
g28
g5604
sbsg16
Nsg54
g1
(g324
g3
NtRp6023
(dp6024
g291
(lp6025
g1
(g18
g3
NtRp6026
(dp6027
g21
S'auto_1693'
p6028
sg23
I0
sg24
g1
(g25
g3
NtRp6029
(dp6030
g28
g4559
sbsg16
Nsg54
g1
(g324
g3
NtRp6031
(dp6032
g291
(lp6033
g1
(g18
g3
NtRp6034
(dp6035
g21
S'auto_1692'
p6036
sg23
I0
sg24
g1
(g25
g3
NtRp6037
(dp6038
g28
g4578
sbsg16
Nsg54
g1
(g324
g3
NtRp6039
(dp6040
g291
(lp6041
g1
(g18
g3
NtRp6042
(dp6043
g21
S'auto_1689'
p6044
sg23
I0
sg24
g1
(g25
g3
NtRp6045
(dp6046
g28
g5308
sbsg16
Nsg54
g1
(g324
g3
NtRp6047
(dp6048
g291
(lp6049
g19
ag1
(g18
g3
NtRp6050
(dp6051
g21
S'auto_1688'
p6052
sg23
I0
sg24
g1
(g25
g3
NtRp6053
(dp6054
g28
g4607
sbsg16
Nsg54
g1
(g324
g3
NtRp6055
(dp6056
g291
(lp6057
g124
asg24
g1
(g25
g3
NtRp6058
sg336
(lp6059
g6050
asg386
g876
sbsg55
g4626
sbasg24
g1
(g25
g3
NtRp6060
sg336
(lp6061
g6042
asg386
g2467
sbsg55
g5327
sbag1
(g18
g3
NtRp6062
(dp6063
g21
S'auto_1691'
p6064
sg23
I0
sg24
g1
(g25
g3
NtRp6065
(dp6066
g28
g4644
sbsg16
Nsg54
g1
(g324
g3
NtRp6067
(dp6068
g291
(lp6069
g1
(g18
g3
NtRp6070
(dp6071
g21
S'auto_1690'
p6072
sg23
I0
sg24
g1
(g25
g3
NtRp6073
(dp6074
g28
g4663
sbsg16
Nsg54
g1
(g324
g3
NtRp6075
(dp6076
g291
(lp6077
g71
asg24
g1
(g25
g3
NtRp6078
sg336
(lp6079
g6070
asg386
g876
sbsg55
g4682
sbasg24
g1
(g25
g3
NtRp6080
sg336
(lp6081
g6062
asg386
g4690
sbsg55
g4697
sbasg24
g1
(g25
g3
NtRp6082
sg336
(lp6083
g6034
asg386
g1887
sbsg55
g4706
sbasg24
g1
(g25
g3
NtRp6084
sg336
(lp6085
g6026
asg386
g1907
sbsg55
g4715
sbag1
(g18
g3
NtRp6086
(dp6087
g21
S'auto_1694'
p6088
sg23
I0
sg24
g1
(g25
g3
NtRp6089
(dp6090
g28
g4724
sbsg16
Nsg54
g1
(g324
g3
NtRp6091
(dp6092
g291
(lp6093
g189
asg24
g1
(g25
g3
NtRp6094
sg336
(lp6095
g6086
asg386
g876
sbsg55
g4743
sbasg24
g1
(g25
g3
NtRp6096
sg336
(lp6097
g6018
asg386
g2467
sbsg55
g5623
sbag1
(g18
g3
NtRp6098
(dp6099
g21
S'auto_1697'
p6100
sg23
I0
sg24
g1
(g25
g3
NtRp6101
(dp6102
g28
g4761
sbsg16
Nsg54
g1
(g324
g3
NtRp6103
(dp6104
g291
(lp6105
g1
(g18
g3
NtRp6106
(dp6107
g21
S'auto_1696'
p6108
sg23
I0
sg24
g1
(g25
g3
NtRp6109
(dp6110
g28
g4780
sbsg16
Nsg54
g1
(g324
g3
NtRp6111
(dp6112
g291
(lp6113
g162
asg24
g1
(g25
g3
NtRp6114
sg336
(lp6115
g6106
asg386
g876
sbsg55
g4799
sbasg24
g1
(g25
g3
NtRp6116
sg336
(lp6117
g6098
asg386
g4807
sbsg55
g4814
sbasg24
g1
(g25
g3
NtRp6118
sg336
(lp6119
g6010
asg386
g1887
sbsg55
g4823
sbasg24
g1
(g25
g3
NtRp6120
sg336
(lp6121
g6002
asg386
g1907
sbsg55
g4832
sbag1
(g18
g3
NtRp6122
(dp6123
g21
S'auto_1700'
p6124
sg23
I0
sg24
g1
(g25
g3
NtRp6125
(dp6126
g28
g4851
sbsg16
Nsg54
g1
(g324
g3
NtRp6127
(dp6128
g291
(lp6129
g250
asg24
g1
(g25
g3
NtRp6130
sg336
(lp6131
g6122
asg386
g876
sbsg55
g4870
sbasg24
g1
(g25
g3
NtRp6132
sg336
(lp6133
g5994
asg386
g2467
sbsg55
g5759
sbag1
(g18
g3
NtRp6134
(dp6135
g21
S'auto_1703'
p6136
sg23
I0
sg24
g1
(g25
g3
NtRp6137
(dp6138
g28
g5272
sbsg16
Nsg54
g1
(g324
g3
NtRp6139
(dp6140
g291
(lp6141
g1
(g18
g3
NtRp6142
(dp6143
g21
S'auto_1702'
p6144
sg23
I0
sg24
g1
(g25
g3
NtRp6145
(dp6146
g28
g4922
sbsg16
Nsg54
g1
(g324
g3
NtRp6147
(dp6148
g291
(lp6149
g222
asg24
g1
(g25
g3
NtRp6150
sg336
(lp6151
g6142
asg386
g876
sbsg55
g4941
sbasg24
g1
(g25
g3
NtRp6152
sg336
(lp6153
g6134
asg386
g5291
sbsg55
g5298
sbasg24
g1
(g25
g3
NtRp6154
sg336
(lp6155
g5986
asg386
g1887
sbsg55
g5792
sbsg296
I00
sbsg3321
Nsg3322
I00
sg3323
g3325
stRp6156
(lp6157
g1
(g95
g3
NtRp6158
(dp6159
g3361
I0
sg16
g53
sg3362
I01
sg98
(lp6160
Nasg299
I00
sg106
I00
sg107
I00
sg55
g57
sg116
I01
sbag1
(g95
g3
NtRp6161
(dp6162
g3361
I0
sg16
S'W'
sg3362
I00
sg98
g141
sg299
I01
sg106
I00
sg107
I00
sg55
g144
sg116
Nsbag1
(g95
g3
NtRp6163
(dp6164
g3361
I0
sg16
S'b'
sg3362
I00
sg98
g99
sg299
I01
sg106
I00
sg107
I00
sg55
g109
sg116
Nsbag1
(g95
g3
NtRp6165
(dp6166
g3361
I0
sg16
S'W'
sg3362
I00
sg98
g206
sg299
I01
sg106
I00
sg107
I00
sg55
g209
sg116
Nsbag1
(g95
g3
NtRp6167
(dp6168
g3361
I0
sg16
S'b'
sg3362
I00
sg98
g179
sg299
I01
sg106
I00
sg107
I00
sg55
g182
sg116
Nsbag1
(g95
g3
NtRp6169
(dp6170
g3361
I0
sg16
S'W'
sg3362
I00
sg98
g267
sg299
I01
sg106
I00
sg107
I00
sg55
g270
sg116
Nsbag1
(g95
g3
NtRp6171
(dp6172
g3361
I0
sg16
S'b'
sg3362
I00
sg98
g239
sg299
I01
sg106
I00
sg107
I00
sg55
g242
sg116
Nsba(lp6173
Nag143
ag105
ag208
ag181
ag269
ag241
atRp6174
sS'stochastic'
p6175
I00
sb.